
ethernet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094c8  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  080096c8  080096c8  0000a6c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800976c  0800976c  0000b06c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800976c  0800976c  0000a76c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009774  08009774  0000b06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009774  08009774  0000a774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009778  08009778  0000a778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800977c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000592c  2000006c  080097e8  0000b06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005998  080097e8  0000b998  2**0
                  ALLOC
 11 .lwip_sec     00000140  2007c000  2007c000  0000c000  2**2
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  0000b06c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002ab47  00000000  00000000  0000b09a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005068  00000000  00000000  00035be1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f98  00000000  00000000  0003ac50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001885  00000000  00000000  0003cbe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ef8a  00000000  00000000  0003e46d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000261b0  00000000  00000000  0006d3f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011a1c2  00000000  00000000  000935a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001ad769  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008dd0  00000000  00000000  001ad7ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004a  00000000  00000000  001b657c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000006c 	.word	0x2000006c
 800021c:	00000000 	.word	0x00000000
 8000220:	080096b0 	.word	0x080096b0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000070 	.word	0x20000070
 800023c:	080096b0 	.word	0x080096b0

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b988 	b.w	8000608 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	468e      	mov	lr, r1
 8000318:	4604      	mov	r4, r0
 800031a:	4688      	mov	r8, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d962      	bls.n	80003ec <__udivmoddi4+0xdc>
 8000326:	fab2 f682 	clz	r6, r2
 800032a:	b14e      	cbz	r6, 8000340 <__udivmoddi4+0x30>
 800032c:	f1c6 0320 	rsb	r3, r6, #32
 8000330:	fa01 f806 	lsl.w	r8, r1, r6
 8000334:	fa20 f303 	lsr.w	r3, r0, r3
 8000338:	40b7      	lsls	r7, r6
 800033a:	ea43 0808 	orr.w	r8, r3, r8
 800033e:	40b4      	lsls	r4, r6
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	fa1f fc87 	uxth.w	ip, r7
 8000348:	fbb8 f1fe 	udiv	r1, r8, lr
 800034c:	0c23      	lsrs	r3, r4, #16
 800034e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000352:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000356:	fb01 f20c 	mul.w	r2, r1, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0x62>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f101 30ff 	add.w	r0, r1, #4294967295
 8000364:	f080 80ea 	bcs.w	800053c <__udivmoddi4+0x22c>
 8000368:	429a      	cmp	r2, r3
 800036a:	f240 80e7 	bls.w	800053c <__udivmoddi4+0x22c>
 800036e:	3902      	subs	r1, #2
 8000370:	443b      	add	r3, r7
 8000372:	1a9a      	subs	r2, r3, r2
 8000374:	b2a3      	uxth	r3, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000382:	fb00 fc0c 	mul.w	ip, r0, ip
 8000386:	459c      	cmp	ip, r3
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0x8e>
 800038a:	18fb      	adds	r3, r7, r3
 800038c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000390:	f080 80d6 	bcs.w	8000540 <__udivmoddi4+0x230>
 8000394:	459c      	cmp	ip, r3
 8000396:	f240 80d3 	bls.w	8000540 <__udivmoddi4+0x230>
 800039a:	443b      	add	r3, r7
 800039c:	3802      	subs	r0, #2
 800039e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a2:	eba3 030c 	sub.w	r3, r3, ip
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11d      	cbz	r5, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40f3      	lsrs	r3, r6
 80003ac:	2200      	movs	r2, #0
 80003ae:	e9c5 3200 	strd	r3, r2, [r5]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d905      	bls.n	80003c6 <__udivmoddi4+0xb6>
 80003ba:	b10d      	cbz	r5, 80003c0 <__udivmoddi4+0xb0>
 80003bc:	e9c5 0100 	strd	r0, r1, [r5]
 80003c0:	2100      	movs	r1, #0
 80003c2:	4608      	mov	r0, r1
 80003c4:	e7f5      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003c6:	fab3 f183 	clz	r1, r3
 80003ca:	2900      	cmp	r1, #0
 80003cc:	d146      	bne.n	800045c <__udivmoddi4+0x14c>
 80003ce:	4573      	cmp	r3, lr
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xc8>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 8105 	bhi.w	80005e2 <__udivmoddi4+0x2d2>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb6e 0203 	sbc.w	r2, lr, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4690      	mov	r8, r2
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0e5      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003e6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ea:	e7e2      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	f000 8090 	beq.w	8000512 <__udivmoddi4+0x202>
 80003f2:	fab2 f682 	clz	r6, r2
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	f040 80a4 	bne.w	8000544 <__udivmoddi4+0x234>
 80003fc:	1a8a      	subs	r2, r1, r2
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	b280      	uxth	r0, r0
 8000406:	b2bc      	uxth	r4, r7
 8000408:	2101      	movs	r1, #1
 800040a:	fbb2 fcfe 	udiv	ip, r2, lr
 800040e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000412:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000416:	fb04 f20c 	mul.w	r2, r4, ip
 800041a:	429a      	cmp	r2, r3
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x11e>
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x11c>
 8000426:	429a      	cmp	r2, r3
 8000428:	f200 80e0 	bhi.w	80005ec <__udivmoddi4+0x2dc>
 800042c:	46c4      	mov	ip, r8
 800042e:	1a9b      	subs	r3, r3, r2
 8000430:	fbb3 f2fe 	udiv	r2, r3, lr
 8000434:	fb0e 3312 	mls	r3, lr, r2, r3
 8000438:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800043c:	fb02 f404 	mul.w	r4, r2, r4
 8000440:	429c      	cmp	r4, r3
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x144>
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	f102 30ff 	add.w	r0, r2, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x142>
 800044c:	429c      	cmp	r4, r3
 800044e:	f200 80ca 	bhi.w	80005e6 <__udivmoddi4+0x2d6>
 8000452:	4602      	mov	r2, r0
 8000454:	1b1b      	subs	r3, r3, r4
 8000456:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0x98>
 800045c:	f1c1 0620 	rsb	r6, r1, #32
 8000460:	408b      	lsls	r3, r1
 8000462:	fa22 f706 	lsr.w	r7, r2, r6
 8000466:	431f      	orrs	r7, r3
 8000468:	fa0e f401 	lsl.w	r4, lr, r1
 800046c:	fa20 f306 	lsr.w	r3, r0, r6
 8000470:	fa2e fe06 	lsr.w	lr, lr, r6
 8000474:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000478:	4323      	orrs	r3, r4
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	fa1f fc87 	uxth.w	ip, r7
 8000482:	fbbe f0f9 	udiv	r0, lr, r9
 8000486:	0c1c      	lsrs	r4, r3, #16
 8000488:	fb09 ee10 	mls	lr, r9, r0, lr
 800048c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000490:	fb00 fe0c 	mul.w	lr, r0, ip
 8000494:	45a6      	cmp	lr, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	d909      	bls.n	80004b0 <__udivmoddi4+0x1a0>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f100 3aff 	add.w	sl, r0, #4294967295
 80004a2:	f080 809c 	bcs.w	80005de <__udivmoddi4+0x2ce>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f240 8099 	bls.w	80005de <__udivmoddi4+0x2ce>
 80004ac:	3802      	subs	r0, #2
 80004ae:	443c      	add	r4, r7
 80004b0:	eba4 040e 	sub.w	r4, r4, lr
 80004b4:	fa1f fe83 	uxth.w	lr, r3
 80004b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004bc:	fb09 4413 	mls	r4, r9, r3, r4
 80004c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c8:	45a4      	cmp	ip, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x1ce>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80004d2:	f080 8082 	bcs.w	80005da <__udivmoddi4+0x2ca>
 80004d6:	45a4      	cmp	ip, r4
 80004d8:	d97f      	bls.n	80005da <__udivmoddi4+0x2ca>
 80004da:	3b02      	subs	r3, #2
 80004dc:	443c      	add	r4, r7
 80004de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ea:	4564      	cmp	r4, ip
 80004ec:	4673      	mov	r3, lr
 80004ee:	46e1      	mov	r9, ip
 80004f0:	d362      	bcc.n	80005b8 <__udivmoddi4+0x2a8>
 80004f2:	d05f      	beq.n	80005b4 <__udivmoddi4+0x2a4>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x1fe>
 80004f6:	ebb8 0203 	subs.w	r2, r8, r3
 80004fa:	eb64 0409 	sbc.w	r4, r4, r9
 80004fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000502:	fa22 f301 	lsr.w	r3, r2, r1
 8000506:	431e      	orrs	r6, r3
 8000508:	40cc      	lsrs	r4, r1
 800050a:	e9c5 6400 	strd	r6, r4, [r5]
 800050e:	2100      	movs	r1, #0
 8000510:	e74f      	b.n	80003b2 <__udivmoddi4+0xa2>
 8000512:	fbb1 fcf2 	udiv	ip, r1, r2
 8000516:	0c01      	lsrs	r1, r0, #16
 8000518:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800051c:	b280      	uxth	r0, r0
 800051e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000522:	463b      	mov	r3, r7
 8000524:	4638      	mov	r0, r7
 8000526:	463c      	mov	r4, r7
 8000528:	46b8      	mov	r8, r7
 800052a:	46be      	mov	lr, r7
 800052c:	2620      	movs	r6, #32
 800052e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000532:	eba2 0208 	sub.w	r2, r2, r8
 8000536:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800053a:	e766      	b.n	800040a <__udivmoddi4+0xfa>
 800053c:	4601      	mov	r1, r0
 800053e:	e718      	b.n	8000372 <__udivmoddi4+0x62>
 8000540:	4610      	mov	r0, r2
 8000542:	e72c      	b.n	800039e <__udivmoddi4+0x8e>
 8000544:	f1c6 0220 	rsb	r2, r6, #32
 8000548:	fa2e f302 	lsr.w	r3, lr, r2
 800054c:	40b7      	lsls	r7, r6
 800054e:	40b1      	lsls	r1, r6
 8000550:	fa20 f202 	lsr.w	r2, r0, r2
 8000554:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000558:	430a      	orrs	r2, r1
 800055a:	fbb3 f8fe 	udiv	r8, r3, lr
 800055e:	b2bc      	uxth	r4, r7
 8000560:	fb0e 3318 	mls	r3, lr, r8, r3
 8000564:	0c11      	lsrs	r1, r2, #16
 8000566:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056a:	fb08 f904 	mul.w	r9, r8, r4
 800056e:	40b0      	lsls	r0, r6
 8000570:	4589      	cmp	r9, r1
 8000572:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000576:	b280      	uxth	r0, r0
 8000578:	d93e      	bls.n	80005f8 <__udivmoddi4+0x2e8>
 800057a:	1879      	adds	r1, r7, r1
 800057c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000580:	d201      	bcs.n	8000586 <__udivmoddi4+0x276>
 8000582:	4589      	cmp	r9, r1
 8000584:	d81f      	bhi.n	80005c6 <__udivmoddi4+0x2b6>
 8000586:	eba1 0109 	sub.w	r1, r1, r9
 800058a:	fbb1 f9fe 	udiv	r9, r1, lr
 800058e:	fb09 f804 	mul.w	r8, r9, r4
 8000592:	fb0e 1119 	mls	r1, lr, r9, r1
 8000596:	b292      	uxth	r2, r2
 8000598:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800059c:	4542      	cmp	r2, r8
 800059e:	d229      	bcs.n	80005f4 <__udivmoddi4+0x2e4>
 80005a0:	18ba      	adds	r2, r7, r2
 80005a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005a6:	d2c4      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005a8:	4542      	cmp	r2, r8
 80005aa:	d2c2      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005ac:	f1a9 0102 	sub.w	r1, r9, #2
 80005b0:	443a      	add	r2, r7
 80005b2:	e7be      	b.n	8000532 <__udivmoddi4+0x222>
 80005b4:	45f0      	cmp	r8, lr
 80005b6:	d29d      	bcs.n	80004f4 <__udivmoddi4+0x1e4>
 80005b8:	ebbe 0302 	subs.w	r3, lr, r2
 80005bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005c0:	3801      	subs	r0, #1
 80005c2:	46e1      	mov	r9, ip
 80005c4:	e796      	b.n	80004f4 <__udivmoddi4+0x1e4>
 80005c6:	eba7 0909 	sub.w	r9, r7, r9
 80005ca:	4449      	add	r1, r9
 80005cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d4:	fb09 f804 	mul.w	r8, r9, r4
 80005d8:	e7db      	b.n	8000592 <__udivmoddi4+0x282>
 80005da:	4673      	mov	r3, lr
 80005dc:	e77f      	b.n	80004de <__udivmoddi4+0x1ce>
 80005de:	4650      	mov	r0, sl
 80005e0:	e766      	b.n	80004b0 <__udivmoddi4+0x1a0>
 80005e2:	4608      	mov	r0, r1
 80005e4:	e6fd      	b.n	80003e2 <__udivmoddi4+0xd2>
 80005e6:	443b      	add	r3, r7
 80005e8:	3a02      	subs	r2, #2
 80005ea:	e733      	b.n	8000454 <__udivmoddi4+0x144>
 80005ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f0:	443b      	add	r3, r7
 80005f2:	e71c      	b.n	800042e <__udivmoddi4+0x11e>
 80005f4:	4649      	mov	r1, r9
 80005f6:	e79c      	b.n	8000532 <__udivmoddi4+0x222>
 80005f8:	eba1 0109 	sub.w	r1, r1, r9
 80005fc:	46c4      	mov	ip, r8
 80005fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000602:	fb09 f804 	mul.w	r8, r9, r4
 8000606:	e7c4      	b.n	8000592 <__udivmoddi4+0x282>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <AppMain>:
#include "main.h"
#include "lcd.h"
#include "FreeRTOS_IP.h"


void AppMain(void){
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0

	//FreeRTOS_IPInit_Multi();

	//test LCD
	lcd_4SPI_init();
 8000610:	f000 f8d6 	bl	80007c0 <lcd_4SPI_init>
	setPageaddressing();
 8000614:	f000 f860 	bl	80006d8 <setPageaddressing>

	//THIS WORKS, COLUMN SEEMS TO NOT
	lcd_setpage_address(1);
 8000618:	2001      	movs	r0, #1
 800061a:	f000 f873 	bl	8000704 <lcd_setpage_address>
	lcd_setcolumn_address(32);
 800061e:	2020      	movs	r0, #32
 8000620:	f000 f88a 	bl	8000738 <lcd_setcolumn_address>

	while(1){
		printf("** HELLO WORLD!");
 8000624:	4804      	ldr	r0, [pc, #16]	@ (8000638 <AppMain+0x2c>)
 8000626:	f008 f96b 	bl	8008900 <iprintf>
		HAL_Delay(1000);
 800062a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800062e:	f000 ff97 	bl	8001560 <HAL_Delay>
		printf("** HELLO WORLD!");
 8000632:	bf00      	nop
 8000634:	e7f6      	b.n	8000624 <AppMain+0x18>
 8000636:	bf00      	nop
 8000638:	080096c8 	.word	0x080096c8

0800063c <lcd_transfer>:

#include <lcd.h>
#include "main.h"
#include "stm32f7xx_hal.h"

HAL_StatusTypeDef lcd_transfer(uint8_t data){
 800063c:	b580      	push	{r7, lr}
 800063e:	b084      	sub	sp, #16
 8000640:	af00      	add	r7, sp, #0
 8000642:	4603      	mov	r3, r0
 8000644:	71fb      	strb	r3, [r7, #7]
	//pull CS low
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 8000646:	2200      	movs	r2, #0
 8000648:	2140      	movs	r1, #64	@ 0x40
 800064a:	480b      	ldr	r0, [pc, #44]	@ (8000678 <lcd_transfer+0x3c>)
 800064c:	f001 fec6 	bl	80023dc <HAL_GPIO_WritePin>

	//transmit the data

	HAL_StatusTypeDef status = HAL_SPI_Transmit(&hspi2, &data, 1, 1000);
 8000650:	1df9      	adds	r1, r7, #7
 8000652:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000656:	2201      	movs	r2, #1
 8000658:	4808      	ldr	r0, [pc, #32]	@ (800067c <lcd_transfer+0x40>)
 800065a:	f003 fa76 	bl	8003b4a <HAL_SPI_Transmit>
 800065e:	4603      	mov	r3, r0
 8000660:	73fb      	strb	r3, [r7, #15]
	if (status == HAL_OK){

	}
	//pull CS high
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
 8000662:	2201      	movs	r2, #1
 8000664:	2140      	movs	r1, #64	@ 0x40
 8000666:	4804      	ldr	r0, [pc, #16]	@ (8000678 <lcd_transfer+0x3c>)
 8000668:	f001 feb8 	bl	80023dc <HAL_GPIO_WritePin>

	return HAL_OK;
 800066c:	2300      	movs	r3, #0

}
 800066e:	4618      	mov	r0, r3
 8000670:	3710      	adds	r7, #16
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	40020c00 	.word	0x40020c00
 800067c:	20000180 	.word	0x20000180

08000680 <onLCD>:

	return HAL_OK;
}

//turn LCD on to match RAM data
HAL_StatusTypeDef  onLCD(void){
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0

	//lcd on data
	uint8_t data = 0xAF;
 8000686:	23af      	movs	r3, #175	@ 0xaf
 8000688:	71fb      	strb	r3, [r7, #7]

	//pull A0 low (PD7)
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 800068a:	2200      	movs	r2, #0
 800068c:	2180      	movs	r1, #128	@ 0x80
 800068e:	4806      	ldr	r0, [pc, #24]	@ (80006a8 <onLCD+0x28>)
 8000690:	f001 fea4 	bl	80023dc <HAL_GPIO_WritePin>


	return lcd_transfer(data);
 8000694:	79fb      	ldrb	r3, [r7, #7]
 8000696:	4618      	mov	r0, r3
 8000698:	f7ff ffd0 	bl	800063c <lcd_transfer>
 800069c:	4603      	mov	r3, r0

}
 800069e:	4618      	mov	r0, r3
 80006a0:	3708      	adds	r7, #8
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40020c00 	.word	0x40020c00

080006ac <offLCD>:
	return lcd_transfer(data);
}


//turn lcd OFF
HAL_StatusTypeDef  offLCD(void){
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0

	//lcd off data
	uint8_t data = 0xAE;
 80006b2:	23ae      	movs	r3, #174	@ 0xae
 80006b4:	71fb      	strb	r3, [r7, #7]

	//pull A0 low (PD7)
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 80006b6:	2200      	movs	r2, #0
 80006b8:	2180      	movs	r1, #128	@ 0x80
 80006ba:	4806      	ldr	r0, [pc, #24]	@ (80006d4 <offLCD+0x28>)
 80006bc:	f001 fe8e 	bl	80023dc <HAL_GPIO_WritePin>

	return lcd_transfer(data);
 80006c0:	79fb      	ldrb	r3, [r7, #7]
 80006c2:	4618      	mov	r0, r3
 80006c4:	f7ff ffba 	bl	800063c <lcd_transfer>
 80006c8:	4603      	mov	r3, r0
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	3708      	adds	r7, #8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40020c00 	.word	0x40020c00

080006d8 <setPageaddressing>:




//set page(horizontal) addressing after R/W a byte of SPI data
HAL_StatusTypeDef setPageaddressing(){
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
	uint8_t data = 0x20;
 80006de:	2320      	movs	r3, #32
 80006e0:	71fb      	strb	r3, [r7, #7]

	//pull A0 low (PD7)
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 80006e2:	2200      	movs	r2, #0
 80006e4:	2180      	movs	r1, #128	@ 0x80
 80006e6:	4806      	ldr	r0, [pc, #24]	@ (8000700 <setPageaddressing+0x28>)
 80006e8:	f001 fe78 	bl	80023dc <HAL_GPIO_WritePin>

	return lcd_transfer(data);
 80006ec:	79fb      	ldrb	r3, [r7, #7]
 80006ee:	4618      	mov	r0, r3
 80006f0:	f7ff ffa4 	bl	800063c <lcd_transfer>
 80006f4:	4603      	mov	r3, r0
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40020c00 	.word	0x40020c00

08000704 <lcd_setpage_address>:
}


//set the page address for writing pixels
//page number must be between 0-15
HAL_StatusTypeDef  lcd_setpage_address(int page_num){
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]

	//convert int to uint8
	uint8_t pg_num = page_num;
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	73fb      	strb	r3, [r7, #15]
	//data byte for page address
	uint8_t data = 0xB0 | pg_num;
 8000710:	7bfb      	ldrb	r3, [r7, #15]
 8000712:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 8000716:	73bb      	strb	r3, [r7, #14]

	//pull A0 low (PD7)
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 8000718:	2200      	movs	r2, #0
 800071a:	2180      	movs	r1, #128	@ 0x80
 800071c:	4805      	ldr	r0, [pc, #20]	@ (8000734 <lcd_setpage_address+0x30>)
 800071e:	f001 fe5d 	bl	80023dc <HAL_GPIO_WritePin>

	return lcd_transfer(data);
 8000722:	7bbb      	ldrb	r3, [r7, #14]
 8000724:	4618      	mov	r0, r3
 8000726:	f7ff ff89 	bl	800063c <lcd_transfer>
 800072a:	4603      	mov	r3, r0
}
 800072c:	4618      	mov	r0, r3
 800072e:	3710      	adds	r7, #16
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	40020c00 	.word	0x40020c00

08000738 <lcd_setcolumn_address>:

//set the column address for writing pixels
// must be between 0 and 127, there are 128 columns
HAL_StatusTypeDef  lcd_setcolumn_address(int column_num){
 8000738:	b580      	push	{r7, lr}
 800073a:	b084      	sub	sp, #16
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]

	if(column_num >= 128 || column_num < 0){
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	2b7f      	cmp	r3, #127	@ 0x7f
 8000744:	dc02      	bgt.n	800074c <lcd_setcolumn_address+0x14>
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	2b00      	cmp	r3, #0
 800074a:	da01      	bge.n	8000750 <lcd_setcolumn_address+0x18>
		return HAL_ERROR;
 800074c:	2301      	movs	r3, #1
 800074e:	e030      	b.n	80007b2 <lcd_setcolumn_address+0x7a>
	}

	uint8_t num_conv = (uint8_t) column_num;
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	73fb      	strb	r3, [r7, #15]

	uint8_t high_address = 0b00010000;
 8000754:	2310      	movs	r3, #16
 8000756:	73bb      	strb	r3, [r7, #14]
	uint8_t low_address = 0x00;
 8000758:	2300      	movs	r3, #0
 800075a:	737b      	strb	r3, [r7, #13]

	high_address = high_address | ((num_conv >> 4) & 0x0F);
 800075c:	7bfb      	ldrb	r3, [r7, #15]
 800075e:	091b      	lsrs	r3, r3, #4
 8000760:	b2db      	uxtb	r3, r3
 8000762:	b25a      	sxtb	r2, r3
 8000764:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000768:	4313      	orrs	r3, r2
 800076a:	b25b      	sxtb	r3, r3
 800076c:	73bb      	strb	r3, [r7, #14]
	low_address = low_address | (num_conv & 0x0F);
 800076e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000772:	f003 030f 	and.w	r3, r3, #15
 8000776:	b25a      	sxtb	r2, r3
 8000778:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800077c:	4313      	orrs	r3, r2
 800077e:	b25b      	sxtb	r3, r3
 8000780:	737b      	strb	r3, [r7, #13]

	//pull A0 low (PD7)
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 8000782:	2200      	movs	r2, #0
 8000784:	2180      	movs	r1, #128	@ 0x80
 8000786:	480d      	ldr	r0, [pc, #52]	@ (80007bc <lcd_setcolumn_address+0x84>)
 8000788:	f001 fe28 	bl	80023dc <HAL_GPIO_WritePin>

	if(lcd_transfer(high_address) != HAL_OK){
 800078c:	7bbb      	ldrb	r3, [r7, #14]
 800078e:	4618      	mov	r0, r3
 8000790:	f7ff ff54 	bl	800063c <lcd_transfer>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <lcd_setcolumn_address+0x66>
		return HAL_ERROR;
 800079a:	2301      	movs	r3, #1
 800079c:	e009      	b.n	80007b2 <lcd_setcolumn_address+0x7a>
	}
	if(lcd_transfer(low_address) != HAL_OK){
 800079e:	7b7b      	ldrb	r3, [r7, #13]
 80007a0:	4618      	mov	r0, r3
 80007a2:	f7ff ff4b 	bl	800063c <lcd_transfer>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <lcd_setcolumn_address+0x78>
		return HAL_ERROR;
 80007ac:	2301      	movs	r3, #1
 80007ae:	e000      	b.n	80007b2 <lcd_setcolumn_address+0x7a>
	}

	return HAL_OK;
 80007b0:	2300      	movs	r3, #0
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	3710      	adds	r7, #16
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	40020c00 	.word	0x40020c00

080007c0 <lcd_4SPI_init>:
}

//initialize SPI protocol with 4 wire setup
//includes SCL,SI,A0, and /CS
//Pins: PB10 -> SCK, PC3 -> SI(MOSI), RES -> PC0, A0(D/C) -> PD7, CS -> PD6
HAL_StatusTypeDef lcd_4SPI_init(){
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
	//pull CS high
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
 80007c4:	2201      	movs	r2, #1
 80007c6:	2140      	movs	r1, #64	@ 0x40
 80007c8:	4808      	ldr	r0, [pc, #32]	@ (80007ec <lcd_4SPI_init+0x2c>)
 80007ca:	f001 fe07 	bl	80023dc <HAL_GPIO_WritePin>

	//pull RES pin up
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 80007ce:	2201      	movs	r2, #1
 80007d0:	2101      	movs	r1, #1
 80007d2:	4807      	ldr	r0, [pc, #28]	@ (80007f0 <lcd_4SPI_init+0x30>)
 80007d4:	f001 fe02 	bl	80023dc <HAL_GPIO_WritePin>

	//dummy transmission for SPI

	onLCD();
 80007d8:	f7ff ff52 	bl	8000680 <onLCD>
	offLCD();
 80007dc:	f7ff ff66 	bl	80006ac <offLCD>

	//this is the column where the lcd starts
	lcd_setcolumn_address(32);
 80007e0:	2020      	movs	r0, #32
 80007e2:	f7ff ffa9 	bl	8000738 <lcd_setcolumn_address>

	return HAL_OK;
 80007e6:	2300      	movs	r3, #0

}
 80007e8:	4618      	mov	r0, r3
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	40020c00 	.word	0x40020c00
 80007f0:	40020800 	.word	0x40020800

080007f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80007f8:	f000 fa7e 	bl	8000cf8 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007fc:	f000 fe74 	bl	80014e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000800:	f000 f822 	bl	8000848 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000804:	f000 f990 	bl	8000b28 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000808:	f000 f930 	bl	8000a6c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800080c:	f000 f95e 	bl	8000acc <MX_USB_OTG_FS_PCD_Init>
  MX_SPI2_Init();
 8000810:	f000 f8ee 	bl	80009f0 <MX_SPI2_Init>
  MX_ETH_Init();
 8000814:	f000 f88a 	bl	800092c <MX_ETH_Init>
  MX_RNG_Init();
 8000818:	f000 f8d6 	bl	80009c8 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800081c:	f005 f896 	bl	800594c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000820:	4a06      	ldr	r2, [pc, #24]	@ (800083c <main+0x48>)
 8000822:	2100      	movs	r1, #0
 8000824:	4806      	ldr	r0, [pc, #24]	@ (8000840 <main+0x4c>)
 8000826:	f005 f8fb 	bl	8005a20 <osThreadNew>
 800082a:	4603      	mov	r3, r0
 800082c:	4a05      	ldr	r2, [pc, #20]	@ (8000844 <main+0x50>)
 800082e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000830:	f005 f8c0 	bl	80059b4 <osKernelStart>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  AppMain();
 8000834:	f7ff feea 	bl	800060c <AppMain>
 8000838:	e7fc      	b.n	8000834 <main+0x40>
 800083a:	bf00      	nop
 800083c:	080096fc 	.word	0x080096fc
 8000840:	08000ce1 	.word	0x08000ce1
 8000844:	2000074c 	.word	0x2000074c

08000848 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b094      	sub	sp, #80	@ 0x50
 800084c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800084e:	f107 031c 	add.w	r3, r7, #28
 8000852:	2234      	movs	r2, #52	@ 0x34
 8000854:	2100      	movs	r1, #0
 8000856:	4618      	mov	r0, r3
 8000858:	f008 f8a7 	bl	80089aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800085c:	f107 0308 	add.w	r3, r7, #8
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
 8000866:	609a      	str	r2, [r3, #8]
 8000868:	60da      	str	r2, [r3, #12]
 800086a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800086c:	f001 ff0a 	bl	8002684 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000870:	4b2c      	ldr	r3, [pc, #176]	@ (8000924 <SystemClock_Config+0xdc>)
 8000872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000874:	4a2b      	ldr	r2, [pc, #172]	@ (8000924 <SystemClock_Config+0xdc>)
 8000876:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800087a:	6413      	str	r3, [r2, #64]	@ 0x40
 800087c:	4b29      	ldr	r3, [pc, #164]	@ (8000924 <SystemClock_Config+0xdc>)
 800087e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000880:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000884:	607b      	str	r3, [r7, #4]
 8000886:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000888:	4b27      	ldr	r3, [pc, #156]	@ (8000928 <SystemClock_Config+0xe0>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000890:	4a25      	ldr	r2, [pc, #148]	@ (8000928 <SystemClock_Config+0xe0>)
 8000892:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000896:	6013      	str	r3, [r2, #0]
 8000898:	4b23      	ldr	r3, [pc, #140]	@ (8000928 <SystemClock_Config+0xe0>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008a0:	603b      	str	r3, [r7, #0]
 80008a2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008a4:	2301      	movs	r3, #1
 80008a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008a8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80008ac:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ae:	2302      	movs	r3, #2
 80008b0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008b2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80008b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008b8:	2304      	movs	r3, #4
 80008ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80008bc:	2360      	movs	r3, #96	@ 0x60
 80008be:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008c0:	2302      	movs	r3, #2
 80008c2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008c4:	2304      	movs	r3, #4
 80008c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008c8:	2302      	movs	r3, #2
 80008ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008cc:	f107 031c 	add.w	r3, r7, #28
 80008d0:	4618      	mov	r0, r3
 80008d2:	f001 ff37 	bl	8002744 <HAL_RCC_OscConfig>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80008dc:	f000 fa4c 	bl	8000d78 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80008e0:	f001 fee0 	bl	80026a4 <HAL_PWREx_EnableOverDrive>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80008ea:	f000 fa45 	bl	8000d78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ee:	230f      	movs	r3, #15
 80008f0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008f2:	2302      	movs	r3, #2
 80008f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008f6:	2300      	movs	r3, #0
 80008f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000900:	2300      	movs	r3, #0
 8000902:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000904:	f107 0308 	add.w	r3, r7, #8
 8000908:	2103      	movs	r1, #3
 800090a:	4618      	mov	r0, r3
 800090c:	f002 f9c8 	bl	8002ca0 <HAL_RCC_ClockConfig>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000916:	f000 fa2f 	bl	8000d78 <Error_Handler>
  }
}
 800091a:	bf00      	nop
 800091c:	3750      	adds	r7, #80	@ 0x50
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40023800 	.word	0x40023800
 8000928:	40007000 	.word	0x40007000

0800092c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000930:	4b1f      	ldr	r3, [pc, #124]	@ (80009b0 <MX_ETH_Init+0x84>)
 8000932:	4a20      	ldr	r2, [pc, #128]	@ (80009b4 <MX_ETH_Init+0x88>)
 8000934:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000936:	4b20      	ldr	r3, [pc, #128]	@ (80009b8 <MX_ETH_Init+0x8c>)
 8000938:	2200      	movs	r2, #0
 800093a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800093c:	4b1e      	ldr	r3, [pc, #120]	@ (80009b8 <MX_ETH_Init+0x8c>)
 800093e:	2280      	movs	r2, #128	@ 0x80
 8000940:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000942:	4b1d      	ldr	r3, [pc, #116]	@ (80009b8 <MX_ETH_Init+0x8c>)
 8000944:	22e1      	movs	r2, #225	@ 0xe1
 8000946:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000948:	4b1b      	ldr	r3, [pc, #108]	@ (80009b8 <MX_ETH_Init+0x8c>)
 800094a:	2200      	movs	r2, #0
 800094c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800094e:	4b1a      	ldr	r3, [pc, #104]	@ (80009b8 <MX_ETH_Init+0x8c>)
 8000950:	2200      	movs	r2, #0
 8000952:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000954:	4b18      	ldr	r3, [pc, #96]	@ (80009b8 <MX_ETH_Init+0x8c>)
 8000956:	2200      	movs	r2, #0
 8000958:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800095a:	4b15      	ldr	r3, [pc, #84]	@ (80009b0 <MX_ETH_Init+0x84>)
 800095c:	4a16      	ldr	r2, [pc, #88]	@ (80009b8 <MX_ETH_Init+0x8c>)
 800095e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000960:	4b13      	ldr	r3, [pc, #76]	@ (80009b0 <MX_ETH_Init+0x84>)
 8000962:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000966:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000968:	4b11      	ldr	r3, [pc, #68]	@ (80009b0 <MX_ETH_Init+0x84>)
 800096a:	4a14      	ldr	r2, [pc, #80]	@ (80009bc <MX_ETH_Init+0x90>)
 800096c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800096e:	4b10      	ldr	r3, [pc, #64]	@ (80009b0 <MX_ETH_Init+0x84>)
 8000970:	4a13      	ldr	r2, [pc, #76]	@ (80009c0 <MX_ETH_Init+0x94>)
 8000972:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8000974:	4b0e      	ldr	r3, [pc, #56]	@ (80009b0 <MX_ETH_Init+0x84>)
 8000976:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800097a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800097c:	480c      	ldr	r0, [pc, #48]	@ (80009b0 <MX_ETH_Init+0x84>)
 800097e:	f000 ff6d 	bl	800185c <HAL_ETH_Init>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000988:	f000 f9f6 	bl	8000d78 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800098c:	2238      	movs	r2, #56	@ 0x38
 800098e:	2100      	movs	r1, #0
 8000990:	480c      	ldr	r0, [pc, #48]	@ (80009c4 <MX_ETH_Init+0x98>)
 8000992:	f008 f80a 	bl	80089aa <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000996:	4b0b      	ldr	r3, [pc, #44]	@ (80009c4 <MX_ETH_Init+0x98>)
 8000998:	2221      	movs	r2, #33	@ 0x21
 800099a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800099c:	4b09      	ldr	r3, [pc, #36]	@ (80009c4 <MX_ETH_Init+0x98>)
 800099e:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80009a2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80009a4:	4b07      	ldr	r3, [pc, #28]	@ (80009c4 <MX_ETH_Init+0x98>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	200000c0 	.word	0x200000c0
 80009b4:	40028000 	.word	0x40028000
 80009b8:	20000750 	.word	0x20000750
 80009bc:	2007c0a0 	.word	0x2007c0a0
 80009c0:	2007c000 	.word	0x2007c000
 80009c4:	20000088 	.word	0x20000088

080009c8 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80009cc:	4b06      	ldr	r3, [pc, #24]	@ (80009e8 <MX_RNG_Init+0x20>)
 80009ce:	4a07      	ldr	r2, [pc, #28]	@ (80009ec <MX_RNG_Init+0x24>)
 80009d0:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80009d2:	4805      	ldr	r0, [pc, #20]	@ (80009e8 <MX_RNG_Init+0x20>)
 80009d4:	f002 ffe4 	bl	80039a0 <HAL_RNG_Init>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80009de:	f000 f9cb 	bl	8000d78 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */
  /* USER CODE END RNG_Init 2 */

}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	20000170 	.word	0x20000170
 80009ec:	50060800 	.word	0x50060800

080009f0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80009f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000a64 <MX_SPI2_Init+0x74>)
 80009f6:	4a1c      	ldr	r2, [pc, #112]	@ (8000a68 <MX_SPI2_Init+0x78>)
 80009f8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80009fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000a64 <MX_SPI2_Init+0x74>)
 80009fc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000a00:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000a02:	4b18      	ldr	r3, [pc, #96]	@ (8000a64 <MX_SPI2_Init+0x74>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a08:	4b16      	ldr	r3, [pc, #88]	@ (8000a64 <MX_SPI2_Init+0x74>)
 8000a0a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000a0e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000a10:	4b14      	ldr	r3, [pc, #80]	@ (8000a64 <MX_SPI2_Init+0x74>)
 8000a12:	2202      	movs	r2, #2
 8000a14:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a16:	4b13      	ldr	r3, [pc, #76]	@ (8000a64 <MX_SPI2_Init+0x74>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000a1c:	4b11      	ldr	r3, [pc, #68]	@ (8000a64 <MX_SPI2_Init+0x74>)
 8000a1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a22:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000a24:	4b0f      	ldr	r3, [pc, #60]	@ (8000a64 <MX_SPI2_Init+0x74>)
 8000a26:	2238      	movs	r2, #56	@ 0x38
 8000a28:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a64 <MX_SPI2_Init+0x74>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a30:	4b0c      	ldr	r3, [pc, #48]	@ (8000a64 <MX_SPI2_Init+0x74>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a36:	4b0b      	ldr	r3, [pc, #44]	@ (8000a64 <MX_SPI2_Init+0x74>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000a3c:	4b09      	ldr	r3, [pc, #36]	@ (8000a64 <MX_SPI2_Init+0x74>)
 8000a3e:	2207      	movs	r2, #7
 8000a40:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a42:	4b08      	ldr	r3, [pc, #32]	@ (8000a64 <MX_SPI2_Init+0x74>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000a48:	4b06      	ldr	r3, [pc, #24]	@ (8000a64 <MX_SPI2_Init+0x74>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a4e:	4805      	ldr	r0, [pc, #20]	@ (8000a64 <MX_SPI2_Init+0x74>)
 8000a50:	f002 ffd0 	bl	80039f4 <HAL_SPI_Init>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000a5a:	f000 f98d 	bl	8000d78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	20000180 	.word	0x20000180
 8000a68:	40003800 	.word	0x40003800

08000a6c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a70:	4b14      	ldr	r3, [pc, #80]	@ (8000ac4 <MX_USART3_UART_Init+0x58>)
 8000a72:	4a15      	ldr	r2, [pc, #84]	@ (8000ac8 <MX_USART3_UART_Init+0x5c>)
 8000a74:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a76:	4b13      	ldr	r3, [pc, #76]	@ (8000ac4 <MX_USART3_UART_Init+0x58>)
 8000a78:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a7c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a7e:	4b11      	ldr	r3, [pc, #68]	@ (8000ac4 <MX_USART3_UART_Init+0x58>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a84:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac4 <MX_USART3_UART_Init+0x58>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac4 <MX_USART3_UART_Init+0x58>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a90:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac4 <MX_USART3_UART_Init+0x58>)
 8000a92:	220c      	movs	r2, #12
 8000a94:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a96:	4b0b      	ldr	r3, [pc, #44]	@ (8000ac4 <MX_USART3_UART_Init+0x58>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a9c:	4b09      	ldr	r3, [pc, #36]	@ (8000ac4 <MX_USART3_UART_Init+0x58>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aa2:	4b08      	ldr	r3, [pc, #32]	@ (8000ac4 <MX_USART3_UART_Init+0x58>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aa8:	4b06      	ldr	r3, [pc, #24]	@ (8000ac4 <MX_USART3_UART_Init+0x58>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000aae:	4805      	ldr	r0, [pc, #20]	@ (8000ac4 <MX_USART3_UART_Init+0x58>)
 8000ab0:	f003 fe18 	bl	80046e4 <HAL_UART_Init>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000aba:	f000 f95d 	bl	8000d78 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	200001e4 	.word	0x200001e4
 8000ac8:	40004800 	.word	0x40004800

08000acc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000ad0:	4b14      	ldr	r3, [pc, #80]	@ (8000b24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ad2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000ad6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000ad8:	4b12      	ldr	r3, [pc, #72]	@ (8000b24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ada:	2206      	movs	r2, #6
 8000adc:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000ade:	4b11      	ldr	r3, [pc, #68]	@ (8000b24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ae0:	2202      	movs	r2, #2
 8000ae2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000ae4:	4b0f      	ldr	r3, [pc, #60]	@ (8000b24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000aea:	4b0e      	ldr	r3, [pc, #56]	@ (8000b24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aec:	2202      	movs	r2, #2
 8000aee:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000af0:	4b0c      	ldr	r3, [pc, #48]	@ (8000b24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000af2:	2201      	movs	r2, #1
 8000af4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000af6:	4b0b      	ldr	r3, [pc, #44]	@ (8000b24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000afc:	4b09      	ldr	r3, [pc, #36]	@ (8000b24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000b02:	4b08      	ldr	r3, [pc, #32]	@ (8000b24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b04:	2201      	movs	r2, #1
 8000b06:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b08:	4b06      	ldr	r3, [pc, #24]	@ (8000b24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b0e:	4805      	ldr	r0, [pc, #20]	@ (8000b24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b10:	f001 fc7d 	bl	800240e <HAL_PCD_Init>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000b1a:	f000 f92d 	bl	8000d78 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	2000026c 	.word	0x2000026c

08000b28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08c      	sub	sp, #48	@ 0x30
 8000b2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2e:	f107 031c 	add.w	r3, r7, #28
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
 8000b36:	605a      	str	r2, [r3, #4]
 8000b38:	609a      	str	r2, [r3, #8]
 8000b3a:	60da      	str	r2, [r3, #12]
 8000b3c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b3e:	4b5a      	ldr	r3, [pc, #360]	@ (8000ca8 <MX_GPIO_Init+0x180>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b42:	4a59      	ldr	r2, [pc, #356]	@ (8000ca8 <MX_GPIO_Init+0x180>)
 8000b44:	f043 0304 	orr.w	r3, r3, #4
 8000b48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b4a:	4b57      	ldr	r3, [pc, #348]	@ (8000ca8 <MX_GPIO_Init+0x180>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4e:	f003 0304 	and.w	r3, r3, #4
 8000b52:	61bb      	str	r3, [r7, #24]
 8000b54:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b56:	4b54      	ldr	r3, [pc, #336]	@ (8000ca8 <MX_GPIO_Init+0x180>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5a:	4a53      	ldr	r2, [pc, #332]	@ (8000ca8 <MX_GPIO_Init+0x180>)
 8000b5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b62:	4b51      	ldr	r3, [pc, #324]	@ (8000ca8 <MX_GPIO_Init+0x180>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b6a:	617b      	str	r3, [r7, #20]
 8000b6c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6e:	4b4e      	ldr	r3, [pc, #312]	@ (8000ca8 <MX_GPIO_Init+0x180>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b72:	4a4d      	ldr	r2, [pc, #308]	@ (8000ca8 <MX_GPIO_Init+0x180>)
 8000b74:	f043 0301 	orr.w	r3, r3, #1
 8000b78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b7a:	4b4b      	ldr	r3, [pc, #300]	@ (8000ca8 <MX_GPIO_Init+0x180>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7e:	f003 0301 	and.w	r3, r3, #1
 8000b82:	613b      	str	r3, [r7, #16]
 8000b84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b86:	4b48      	ldr	r3, [pc, #288]	@ (8000ca8 <MX_GPIO_Init+0x180>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8a:	4a47      	ldr	r2, [pc, #284]	@ (8000ca8 <MX_GPIO_Init+0x180>)
 8000b8c:	f043 0302 	orr.w	r3, r3, #2
 8000b90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b92:	4b45      	ldr	r3, [pc, #276]	@ (8000ca8 <MX_GPIO_Init+0x180>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b96:	f003 0302 	and.w	r3, r3, #2
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b9e:	4b42      	ldr	r3, [pc, #264]	@ (8000ca8 <MX_GPIO_Init+0x180>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba2:	4a41      	ldr	r2, [pc, #260]	@ (8000ca8 <MX_GPIO_Init+0x180>)
 8000ba4:	f043 0308 	orr.w	r3, r3, #8
 8000ba8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000baa:	4b3f      	ldr	r3, [pc, #252]	@ (8000ca8 <MX_GPIO_Init+0x180>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bae:	f003 0308 	and.w	r3, r3, #8
 8000bb2:	60bb      	str	r3, [r7, #8]
 8000bb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bb6:	4b3c      	ldr	r3, [pc, #240]	@ (8000ca8 <MX_GPIO_Init+0x180>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bba:	4a3b      	ldr	r2, [pc, #236]	@ (8000ca8 <MX_GPIO_Init+0x180>)
 8000bbc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000bc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bc2:	4b39      	ldr	r3, [pc, #228]	@ (8000ca8 <MX_GPIO_Init+0x180>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000bca:	607b      	str	r3, [r7, #4]
 8000bcc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2101      	movs	r1, #1
 8000bd2:	4836      	ldr	r0, [pc, #216]	@ (8000cac <MX_GPIO_Init+0x184>)
 8000bd4:	f001 fc02 	bl	80023dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8000bde:	4834      	ldr	r0, [pc, #208]	@ (8000cb0 <MX_GPIO_Init+0x188>)
 8000be0:	f001 fbfc 	bl	80023dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8000be4:	2200      	movs	r2, #0
 8000be6:	2140      	movs	r1, #64	@ 0x40
 8000be8:	4832      	ldr	r0, [pc, #200]	@ (8000cb4 <MX_GPIO_Init+0x18c>)
 8000bea:	f001 fbf7 	bl	80023dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	21c0      	movs	r1, #192	@ 0xc0
 8000bf2:	4831      	ldr	r0, [pc, #196]	@ (8000cb8 <MX_GPIO_Init+0x190>)
 8000bf4:	f001 fbf2 	bl	80023dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000bf8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bfe:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c08:	f107 031c 	add.w	r3, r7, #28
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4827      	ldr	r0, [pc, #156]	@ (8000cac <MX_GPIO_Init+0x184>)
 8000c10:	f001 fa38 	bl	8002084 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c14:	2301      	movs	r3, #1
 8000c16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c20:	2303      	movs	r3, #3
 8000c22:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c24:	f107 031c 	add.w	r3, r7, #28
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4820      	ldr	r0, [pc, #128]	@ (8000cac <MX_GPIO_Init+0x184>)
 8000c2c:	f001 fa2a 	bl	8002084 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000c30:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 8000c34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c36:	2301      	movs	r3, #1
 8000c38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c42:	f107 031c 	add.w	r3, r7, #28
 8000c46:	4619      	mov	r1, r3
 8000c48:	4819      	ldr	r0, [pc, #100]	@ (8000cb0 <MX_GPIO_Init+0x188>)
 8000c4a:	f001 fa1b 	bl	8002084 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c4e:	2340      	movs	r3, #64	@ 0x40
 8000c50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c52:	2301      	movs	r3, #1
 8000c54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c5e:	f107 031c 	add.w	r3, r7, #28
 8000c62:	4619      	mov	r1, r3
 8000c64:	4813      	ldr	r0, [pc, #76]	@ (8000cb4 <MX_GPIO_Init+0x18c>)
 8000c66:	f001 fa0d 	bl	8002084 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000c6a:	2380      	movs	r3, #128	@ 0x80
 8000c6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c76:	f107 031c 	add.w	r3, r7, #28
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	480d      	ldr	r0, [pc, #52]	@ (8000cb4 <MX_GPIO_Init+0x18c>)
 8000c7e:	f001 fa01 	bl	8002084 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c82:	23c0      	movs	r3, #192	@ 0xc0
 8000c84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c86:	2301      	movs	r3, #1
 8000c88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8e:	2303      	movs	r3, #3
 8000c90:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c92:	f107 031c 	add.w	r3, r7, #28
 8000c96:	4619      	mov	r1, r3
 8000c98:	4807      	ldr	r0, [pc, #28]	@ (8000cb8 <MX_GPIO_Init+0x190>)
 8000c9a:	f001 f9f3 	bl	8002084 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c9e:	bf00      	nop
 8000ca0:	3730      	adds	r7, #48	@ 0x30
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40023800 	.word	0x40023800
 8000cac:	40020800 	.word	0x40020800
 8000cb0:	40020400 	.word	0x40020400
 8000cb4:	40021800 	.word	0x40021800
 8000cb8:	40020c00 	.word	0x40020c00

08000cbc <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8000cc4:	1d39      	adds	r1, r7, #4
 8000cc6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000cca:	2201      	movs	r2, #1
 8000ccc:	4803      	ldr	r0, [pc, #12]	@ (8000cdc <__io_putchar+0x20>)
 8000cce:	f003 fd57 	bl	8004780 <HAL_UART_Transmit>
	return ch;
 8000cd2:	687b      	ldr	r3, [r7, #4]
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	200001e4 	.word	0x200001e4

08000ce0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	AppMain();
 8000ce8:	f7ff fc90 	bl	800060c <AppMain>
    osDelay(1);
 8000cec:	2001      	movs	r0, #1
 8000cee:	f004 ff3d 	bl	8005b6c <osDelay>
	AppMain();
 8000cf2:	bf00      	nop
 8000cf4:	e7f8      	b.n	8000ce8 <StartDefaultTask+0x8>
	...

08000cf8 <MPU_Config>:
}

 /* MPU Configuration */

void MPU_Config(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000cfe:	463b      	mov	r3, r7
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000d0a:	f000 fd2f 	bl	800176c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000d12:	2300      	movs	r3, #0
 8000d14:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x2007c000;
 8000d16:	4b0e      	ldr	r3, [pc, #56]	@ (8000d50 <MPU_Config+0x58>)
 8000d18:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8000d1a:	230d      	movs	r3, #13
 8000d1c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000d22:	2301      	movs	r3, #1
 8000d24:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000d26:	2303      	movs	r3, #3
 8000d28:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000d32:	2300      	movs	r3, #0
 8000d34:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000d36:	2300      	movs	r3, #0
 8000d38:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d3a:	463b      	mov	r3, r7
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f000 fd4d 	bl	80017dc <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_HFNMI_PRIVDEF);
 8000d42:	2006      	movs	r0, #6
 8000d44:	f000 fd2a 	bl	800179c <HAL_MPU_Enable>

}
 8000d48:	bf00      	nop
 8000d4a:	3710      	adds	r7, #16
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	2007c000 	.word	0x2007c000

08000d54 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a04      	ldr	r2, [pc, #16]	@ (8000d74 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d101      	bne.n	8000d6a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000d66:	f000 fbdb 	bl	8001520 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	40001000 	.word	0x40001000

08000d78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d7c:	b672      	cpsid	i
}
 8000d7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d80:	bf00      	nop
 8000d82:	e7fd      	b.n	8000d80 <Error_Handler+0x8>

08000d84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d8a:	4b11      	ldr	r3, [pc, #68]	@ (8000dd0 <HAL_MspInit+0x4c>)
 8000d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d8e:	4a10      	ldr	r2, [pc, #64]	@ (8000dd0 <HAL_MspInit+0x4c>)
 8000d90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d94:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d96:	4b0e      	ldr	r3, [pc, #56]	@ (8000dd0 <HAL_MspInit+0x4c>)
 8000d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d9e:	607b      	str	r3, [r7, #4]
 8000da0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000da2:	4b0b      	ldr	r3, [pc, #44]	@ (8000dd0 <HAL_MspInit+0x4c>)
 8000da4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000da6:	4a0a      	ldr	r2, [pc, #40]	@ (8000dd0 <HAL_MspInit+0x4c>)
 8000da8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dac:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dae:	4b08      	ldr	r3, [pc, #32]	@ (8000dd0 <HAL_MspInit+0x4c>)
 8000db0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000db2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000db6:	603b      	str	r3, [r7, #0]
 8000db8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000dba:	2200      	movs	r2, #0
 8000dbc:	210f      	movs	r1, #15
 8000dbe:	f06f 0001 	mvn.w	r0, #1
 8000dc2:	f000 fca9 	bl	8001718 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40023800 	.word	0x40023800

08000dd4 <HAL_ETH_MspInit>:
  * This function configures the hardware resources used in this example
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b08e      	sub	sp, #56	@ 0x38
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ddc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]
 8000dea:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a4e      	ldr	r2, [pc, #312]	@ (8000f2c <HAL_ETH_MspInit+0x158>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	f040 8096 	bne.w	8000f24 <HAL_ETH_MspInit+0x150>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000df8:	4b4d      	ldr	r3, [pc, #308]	@ (8000f30 <HAL_ETH_MspInit+0x15c>)
 8000dfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfc:	4a4c      	ldr	r2, [pc, #304]	@ (8000f30 <HAL_ETH_MspInit+0x15c>)
 8000dfe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000e02:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e04:	4b4a      	ldr	r3, [pc, #296]	@ (8000f30 <HAL_ETH_MspInit+0x15c>)
 8000e06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e0c:	623b      	str	r3, [r7, #32]
 8000e0e:	6a3b      	ldr	r3, [r7, #32]
 8000e10:	4b47      	ldr	r3, [pc, #284]	@ (8000f30 <HAL_ETH_MspInit+0x15c>)
 8000e12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e14:	4a46      	ldr	r2, [pc, #280]	@ (8000f30 <HAL_ETH_MspInit+0x15c>)
 8000e16:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000e1a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e1c:	4b44      	ldr	r3, [pc, #272]	@ (8000f30 <HAL_ETH_MspInit+0x15c>)
 8000e1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e20:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000e24:	61fb      	str	r3, [r7, #28]
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	4b41      	ldr	r3, [pc, #260]	@ (8000f30 <HAL_ETH_MspInit+0x15c>)
 8000e2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2c:	4a40      	ldr	r2, [pc, #256]	@ (8000f30 <HAL_ETH_MspInit+0x15c>)
 8000e2e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000e32:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e34:	4b3e      	ldr	r3, [pc, #248]	@ (8000f30 <HAL_ETH_MspInit+0x15c>)
 8000e36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000e3c:	61bb      	str	r3, [r7, #24]
 8000e3e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e40:	4b3b      	ldr	r3, [pc, #236]	@ (8000f30 <HAL_ETH_MspInit+0x15c>)
 8000e42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e44:	4a3a      	ldr	r2, [pc, #232]	@ (8000f30 <HAL_ETH_MspInit+0x15c>)
 8000e46:	f043 0304 	orr.w	r3, r3, #4
 8000e4a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e4c:	4b38      	ldr	r3, [pc, #224]	@ (8000f30 <HAL_ETH_MspInit+0x15c>)
 8000e4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e50:	f003 0304 	and.w	r3, r3, #4
 8000e54:	617b      	str	r3, [r7, #20]
 8000e56:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e58:	4b35      	ldr	r3, [pc, #212]	@ (8000f30 <HAL_ETH_MspInit+0x15c>)
 8000e5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5c:	4a34      	ldr	r2, [pc, #208]	@ (8000f30 <HAL_ETH_MspInit+0x15c>)
 8000e5e:	f043 0301 	orr.w	r3, r3, #1
 8000e62:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e64:	4b32      	ldr	r3, [pc, #200]	@ (8000f30 <HAL_ETH_MspInit+0x15c>)
 8000e66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e68:	f003 0301 	and.w	r3, r3, #1
 8000e6c:	613b      	str	r3, [r7, #16]
 8000e6e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e70:	4b2f      	ldr	r3, [pc, #188]	@ (8000f30 <HAL_ETH_MspInit+0x15c>)
 8000e72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e74:	4a2e      	ldr	r2, [pc, #184]	@ (8000f30 <HAL_ETH_MspInit+0x15c>)
 8000e76:	f043 0302 	orr.w	r3, r3, #2
 8000e7a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e7c:	4b2c      	ldr	r3, [pc, #176]	@ (8000f30 <HAL_ETH_MspInit+0x15c>)
 8000e7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e80:	f003 0302 	and.w	r3, r3, #2
 8000e84:	60fb      	str	r3, [r7, #12]
 8000e86:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e88:	4b29      	ldr	r3, [pc, #164]	@ (8000f30 <HAL_ETH_MspInit+0x15c>)
 8000e8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8c:	4a28      	ldr	r2, [pc, #160]	@ (8000f30 <HAL_ETH_MspInit+0x15c>)
 8000e8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e92:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e94:	4b26      	ldr	r3, [pc, #152]	@ (8000f30 <HAL_ETH_MspInit+0x15c>)
 8000e96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e9c:	60bb      	str	r3, [r7, #8]
 8000e9e:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> ETH_RXD2
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|GPIO_PIN_3|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000ea0:	233a      	movs	r3, #58	@ 0x3a
 8000ea2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eac:	2303      	movs	r3, #3
 8000eae:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000eb0:	230b      	movs	r3, #11
 8000eb2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eb4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eb8:	4619      	mov	r1, r3
 8000eba:	481e      	ldr	r0, [pc, #120]	@ (8000f34 <HAL_ETH_MspInit+0x160>)
 8000ebc:	f001 f8e2 	bl	8002084 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|RMII_MDIO_Pin|GPIO_PIN_3|GPIO_PIN_7;
 8000ec0:	238e      	movs	r3, #142	@ 0x8e
 8000ec2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ecc:	2303      	movs	r3, #3
 8000ece:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ed0:	230b      	movs	r3, #11
 8000ed2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4817      	ldr	r0, [pc, #92]	@ (8000f38 <HAL_ETH_MspInit+0x164>)
 8000edc:	f001 f8d2 	bl	8002084 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_13;
 8000ee0:	f242 0301 	movw	r3, #8193	@ 0x2001
 8000ee4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eee:	2303      	movs	r3, #3
 8000ef0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ef2:	230b      	movs	r3, #11
 8000ef4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000efa:	4619      	mov	r1, r3
 8000efc:	480f      	ldr	r0, [pc, #60]	@ (8000f3c <HAL_ETH_MspInit+0x168>)
 8000efe:	f001 f8c1 	bl	8002084 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000f02:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000f06:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f10:	2303      	movs	r3, #3
 8000f12:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f14:	230b      	movs	r3, #11
 8000f16:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4808      	ldr	r0, [pc, #32]	@ (8000f40 <HAL_ETH_MspInit+0x16c>)
 8000f20:	f001 f8b0 	bl	8002084 <HAL_GPIO_Init>

    /* USER CODE END ETH_MspInit 1 */

  }

}
 8000f24:	bf00      	nop
 8000f26:	3738      	adds	r7, #56	@ 0x38
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	40028000 	.word	0x40028000
 8000f30:	40023800 	.word	0x40023800
 8000f34:	40020800 	.word	0x40020800
 8000f38:	40020000 	.word	0x40020000
 8000f3c:	40020400 	.word	0x40020400
 8000f40:	40021800 	.word	0x40021800

08000f44 <HAL_RNG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrng: RNG handle pointer
  * @retval None
  */
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b0a8      	sub	sp, #160	@ 0xa0
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f4c:	f107 0310 	add.w	r3, r7, #16
 8000f50:	2290      	movs	r2, #144	@ 0x90
 8000f52:	2100      	movs	r1, #0
 8000f54:	4618      	mov	r0, r3
 8000f56:	f007 fd28 	bl	80089aa <memset>
  if(hrng->Instance==RNG)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a11      	ldr	r2, [pc, #68]	@ (8000fa4 <HAL_RNG_MspInit+0x60>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d11b      	bne.n	8000f9c <HAL_RNG_MspInit+0x58>

    /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000f64:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000f68:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f70:	f107 0310 	add.w	r3, r7, #16
 8000f74:	4618      	mov	r0, r3
 8000f76:	f002 f8eb 	bl	8003150 <HAL_RCCEx_PeriphCLKConfig>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8000f80:	f7ff fefa 	bl	8000d78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000f84:	4b08      	ldr	r3, [pc, #32]	@ (8000fa8 <HAL_RNG_MspInit+0x64>)
 8000f86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f88:	4a07      	ldr	r2, [pc, #28]	@ (8000fa8 <HAL_RNG_MspInit+0x64>)
 8000f8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f8e:	6353      	str	r3, [r2, #52]	@ 0x34
 8000f90:	4b05      	ldr	r3, [pc, #20]	@ (8000fa8 <HAL_RNG_MspInit+0x64>)
 8000f92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f98:	60fb      	str	r3, [r7, #12]
 8000f9a:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END RNG_MspInit 1 */

  }

}
 8000f9c:	bf00      	nop
 8000f9e:	37a0      	adds	r7, #160	@ 0xa0
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	50060800 	.word	0x50060800
 8000fa8:	40023800 	.word	0x40023800

08000fac <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b08a      	sub	sp, #40	@ 0x28
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb4:	f107 0314 	add.w	r3, r7, #20
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a17      	ldr	r2, [pc, #92]	@ (8001028 <HAL_SPI_MspInit+0x7c>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d128      	bne.n	8001020 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000fce:	4b17      	ldr	r3, [pc, #92]	@ (800102c <HAL_SPI_MspInit+0x80>)
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd2:	4a16      	ldr	r2, [pc, #88]	@ (800102c <HAL_SPI_MspInit+0x80>)
 8000fd4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fda:	4b14      	ldr	r3, [pc, #80]	@ (800102c <HAL_SPI_MspInit+0x80>)
 8000fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fe2:	613b      	str	r3, [r7, #16]
 8000fe4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe6:	4b11      	ldr	r3, [pc, #68]	@ (800102c <HAL_SPI_MspInit+0x80>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fea:	4a10      	ldr	r2, [pc, #64]	@ (800102c <HAL_SPI_MspInit+0x80>)
 8000fec:	f043 0302 	orr.w	r3, r3, #2
 8000ff0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ff2:	4b0e      	ldr	r3, [pc, #56]	@ (800102c <HAL_SPI_MspInit+0x80>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff6:	f003 0302 	and.w	r3, r3, #2
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 8000ffe:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 8001002:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001004:	2302      	movs	r3, #2
 8001006:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001008:	2300      	movs	r3, #0
 800100a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800100c:	2303      	movs	r3, #3
 800100e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001010:	2305      	movs	r3, #5
 8001012:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001014:	f107 0314 	add.w	r3, r7, #20
 8001018:	4619      	mov	r1, r3
 800101a:	4805      	ldr	r0, [pc, #20]	@ (8001030 <HAL_SPI_MspInit+0x84>)
 800101c:	f001 f832 	bl	8002084 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8001020:	bf00      	nop
 8001022:	3728      	adds	r7, #40	@ 0x28
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	40003800 	.word	0x40003800
 800102c:	40023800 	.word	0x40023800
 8001030:	40020400 	.word	0x40020400

08001034 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b0ae      	sub	sp, #184	@ 0xb8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
 800104a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800104c:	f107 0314 	add.w	r3, r7, #20
 8001050:	2290      	movs	r2, #144	@ 0x90
 8001052:	2100      	movs	r1, #0
 8001054:	4618      	mov	r0, r3
 8001056:	f007 fca8 	bl	80089aa <memset>
  if(huart->Instance==USART3)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a22      	ldr	r2, [pc, #136]	@ (80010e8 <HAL_UART_MspInit+0xb4>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d13c      	bne.n	80010de <HAL_UART_MspInit+0xaa>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001064:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001068:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800106a:	2300      	movs	r3, #0
 800106c:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800106e:	f107 0314 	add.w	r3, r7, #20
 8001072:	4618      	mov	r0, r3
 8001074:	f002 f86c 	bl	8003150 <HAL_RCCEx_PeriphCLKConfig>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800107e:	f7ff fe7b 	bl	8000d78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001082:	4b1a      	ldr	r3, [pc, #104]	@ (80010ec <HAL_UART_MspInit+0xb8>)
 8001084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001086:	4a19      	ldr	r2, [pc, #100]	@ (80010ec <HAL_UART_MspInit+0xb8>)
 8001088:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800108c:	6413      	str	r3, [r2, #64]	@ 0x40
 800108e:	4b17      	ldr	r3, [pc, #92]	@ (80010ec <HAL_UART_MspInit+0xb8>)
 8001090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001092:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001096:	613b      	str	r3, [r7, #16]
 8001098:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800109a:	4b14      	ldr	r3, [pc, #80]	@ (80010ec <HAL_UART_MspInit+0xb8>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109e:	4a13      	ldr	r2, [pc, #76]	@ (80010ec <HAL_UART_MspInit+0xb8>)
 80010a0:	f043 0308 	orr.w	r3, r3, #8
 80010a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010a6:	4b11      	ldr	r3, [pc, #68]	@ (80010ec <HAL_UART_MspInit+0xb8>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010aa:	f003 0308 	and.w	r3, r3, #8
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80010b2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80010b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ba:	2302      	movs	r3, #2
 80010bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c6:	2303      	movs	r3, #3
 80010c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010cc:	2307      	movs	r3, #7
 80010ce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010d2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80010d6:	4619      	mov	r1, r3
 80010d8:	4805      	ldr	r0, [pc, #20]	@ (80010f0 <HAL_UART_MspInit+0xbc>)
 80010da:	f000 ffd3 	bl	8002084 <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 80010de:	bf00      	nop
 80010e0:	37b8      	adds	r7, #184	@ 0xb8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40004800 	.word	0x40004800
 80010ec:	40023800 	.word	0x40023800
 80010f0:	40020c00 	.word	0x40020c00

080010f4 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b0ae      	sub	sp, #184	@ 0xb8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	60da      	str	r2, [r3, #12]
 800110a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800110c:	f107 0314 	add.w	r3, r7, #20
 8001110:	2290      	movs	r2, #144	@ 0x90
 8001112:	2100      	movs	r1, #0
 8001114:	4618      	mov	r0, r3
 8001116:	f007 fc48 	bl	80089aa <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001122:	d159      	bne.n	80011d8 <HAL_PCD_MspInit+0xe4>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001124:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001128:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800112a:	2300      	movs	r3, #0
 800112c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001130:	f107 0314 	add.w	r3, r7, #20
 8001134:	4618      	mov	r0, r3
 8001136:	f002 f80b 	bl	8003150 <HAL_RCCEx_PeriphCLKConfig>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001140:	f7ff fe1a 	bl	8000d78 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001144:	4b26      	ldr	r3, [pc, #152]	@ (80011e0 <HAL_PCD_MspInit+0xec>)
 8001146:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001148:	4a25      	ldr	r2, [pc, #148]	@ (80011e0 <HAL_PCD_MspInit+0xec>)
 800114a:	f043 0301 	orr.w	r3, r3, #1
 800114e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001150:	4b23      	ldr	r3, [pc, #140]	@ (80011e0 <HAL_PCD_MspInit+0xec>)
 8001152:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001154:	f003 0301 	and.w	r3, r3, #1
 8001158:	613b      	str	r3, [r7, #16]
 800115a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800115c:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001160:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001164:	2302      	movs	r3, #2
 8001166:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	2300      	movs	r3, #0
 800116c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001170:	2303      	movs	r3, #3
 8001172:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001176:	230a      	movs	r3, #10
 8001178:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800117c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001180:	4619      	mov	r1, r3
 8001182:	4818      	ldr	r0, [pc, #96]	@ (80011e4 <HAL_PCD_MspInit+0xf0>)
 8001184:	f000 ff7e 	bl	8002084 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001188:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800118c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001190:	2300      	movs	r3, #0
 8001192:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	2300      	movs	r3, #0
 8001198:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800119c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80011a0:	4619      	mov	r1, r3
 80011a2:	4810      	ldr	r0, [pc, #64]	@ (80011e4 <HAL_PCD_MspInit+0xf0>)
 80011a4:	f000 ff6e 	bl	8002084 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80011a8:	4b0d      	ldr	r3, [pc, #52]	@ (80011e0 <HAL_PCD_MspInit+0xec>)
 80011aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011ac:	4a0c      	ldr	r2, [pc, #48]	@ (80011e0 <HAL_PCD_MspInit+0xec>)
 80011ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011b2:	6353      	str	r3, [r2, #52]	@ 0x34
 80011b4:	4b0a      	ldr	r3, [pc, #40]	@ (80011e0 <HAL_PCD_MspInit+0xec>)
 80011b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011bc:	60fb      	str	r3, [r7, #12]
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	4b07      	ldr	r3, [pc, #28]	@ (80011e0 <HAL_PCD_MspInit+0xec>)
 80011c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011c4:	4a06      	ldr	r2, [pc, #24]	@ (80011e0 <HAL_PCD_MspInit+0xec>)
 80011c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011ca:	6453      	str	r3, [r2, #68]	@ 0x44
 80011cc:	4b04      	ldr	r3, [pc, #16]	@ (80011e0 <HAL_PCD_MspInit+0xec>)
 80011ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011d4:	60bb      	str	r3, [r7, #8]
 80011d6:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80011d8:	bf00      	nop
 80011da:	37b8      	adds	r7, #184	@ 0xb8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	40023800 	.word	0x40023800
 80011e4:	40020000 	.word	0x40020000

080011e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b08e      	sub	sp, #56	@ 0x38
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80011f0:	2300      	movs	r3, #0
 80011f2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80011f4:	2300      	movs	r3, #0
 80011f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80011f8:	4b33      	ldr	r3, [pc, #204]	@ (80012c8 <HAL_InitTick+0xe0>)
 80011fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011fc:	4a32      	ldr	r2, [pc, #200]	@ (80012c8 <HAL_InitTick+0xe0>)
 80011fe:	f043 0310 	orr.w	r3, r3, #16
 8001202:	6413      	str	r3, [r2, #64]	@ 0x40
 8001204:	4b30      	ldr	r3, [pc, #192]	@ (80012c8 <HAL_InitTick+0xe0>)
 8001206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001208:	f003 0310 	and.w	r3, r3, #16
 800120c:	60fb      	str	r3, [r7, #12]
 800120e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001210:	f107 0210 	add.w	r2, r7, #16
 8001214:	f107 0314 	add.w	r3, r7, #20
 8001218:	4611      	mov	r1, r2
 800121a:	4618      	mov	r0, r3
 800121c:	f001 ff66 	bl	80030ec <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001220:	6a3b      	ldr	r3, [r7, #32]
 8001222:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001224:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001226:	2b00      	cmp	r3, #0
 8001228:	d103      	bne.n	8001232 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800122a:	f001 ff37 	bl	800309c <HAL_RCC_GetPCLK1Freq>
 800122e:	6378      	str	r0, [r7, #52]	@ 0x34
 8001230:	e004      	b.n	800123c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001232:	f001 ff33 	bl	800309c <HAL_RCC_GetPCLK1Freq>
 8001236:	4603      	mov	r3, r0
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800123c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800123e:	4a23      	ldr	r2, [pc, #140]	@ (80012cc <HAL_InitTick+0xe4>)
 8001240:	fba2 2303 	umull	r2, r3, r2, r3
 8001244:	0c9b      	lsrs	r3, r3, #18
 8001246:	3b01      	subs	r3, #1
 8001248:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800124a:	4b21      	ldr	r3, [pc, #132]	@ (80012d0 <HAL_InitTick+0xe8>)
 800124c:	4a21      	ldr	r2, [pc, #132]	@ (80012d4 <HAL_InitTick+0xec>)
 800124e:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001250:	4b1f      	ldr	r3, [pc, #124]	@ (80012d0 <HAL_InitTick+0xe8>)
 8001252:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001256:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001258:	4a1d      	ldr	r2, [pc, #116]	@ (80012d0 <HAL_InitTick+0xe8>)
 800125a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800125c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800125e:	4b1c      	ldr	r3, [pc, #112]	@ (80012d0 <HAL_InitTick+0xe8>)
 8001260:	2200      	movs	r2, #0
 8001262:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001264:	4b1a      	ldr	r3, [pc, #104]	@ (80012d0 <HAL_InitTick+0xe8>)
 8001266:	2200      	movs	r2, #0
 8001268:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800126a:	4b19      	ldr	r3, [pc, #100]	@ (80012d0 <HAL_InitTick+0xe8>)
 800126c:	2200      	movs	r2, #0
 800126e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001270:	4817      	ldr	r0, [pc, #92]	@ (80012d0 <HAL_InitTick+0xe8>)
 8001272:	f002 ff69 	bl	8004148 <HAL_TIM_Base_Init>
 8001276:	4603      	mov	r3, r0
 8001278:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800127c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001280:	2b00      	cmp	r3, #0
 8001282:	d11b      	bne.n	80012bc <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001284:	4812      	ldr	r0, [pc, #72]	@ (80012d0 <HAL_InitTick+0xe8>)
 8001286:	f002 ffc1 	bl	800420c <HAL_TIM_Base_Start_IT>
 800128a:	4603      	mov	r3, r0
 800128c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001290:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001294:	2b00      	cmp	r3, #0
 8001296:	d111      	bne.n	80012bc <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001298:	2036      	movs	r0, #54	@ 0x36
 800129a:	f000 fa59 	bl	8001750 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2b0f      	cmp	r3, #15
 80012a2:	d808      	bhi.n	80012b6 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80012a4:	2200      	movs	r2, #0
 80012a6:	6879      	ldr	r1, [r7, #4]
 80012a8:	2036      	movs	r0, #54	@ 0x36
 80012aa:	f000 fa35 	bl	8001718 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012ae:	4a0a      	ldr	r2, [pc, #40]	@ (80012d8 <HAL_InitTick+0xf0>)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6013      	str	r3, [r2, #0]
 80012b4:	e002      	b.n	80012bc <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80012bc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3738      	adds	r7, #56	@ 0x38
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	40023800 	.word	0x40023800
 80012cc:	431bde83 	.word	0x431bde83
 80012d0:	20000758 	.word	0x20000758
 80012d4:	40001000 	.word	0x40001000
 80012d8:	20000004 	.word	0x20000004

080012dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012e0:	bf00      	nop
 80012e2:	e7fd      	b.n	80012e0 <NMI_Handler+0x4>

080012e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012e8:	bf00      	nop
 80012ea:	e7fd      	b.n	80012e8 <HardFault_Handler+0x4>

080012ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012f0:	bf00      	nop
 80012f2:	e7fd      	b.n	80012f0 <MemManage_Handler+0x4>

080012f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012f8:	bf00      	nop
 80012fa:	e7fd      	b.n	80012f8 <BusFault_Handler+0x4>

080012fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001300:	bf00      	nop
 8001302:	e7fd      	b.n	8001300 <UsageFault_Handler+0x4>

08001304 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001308:	bf00      	nop
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
	...

08001314 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001318:	4802      	ldr	r0, [pc, #8]	@ (8001324 <TIM6_DAC_IRQHandler+0x10>)
 800131a:	f002 ffef 	bl	80042fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	20000758 	.word	0x20000758

08001328 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b086      	sub	sp, #24
 800132c:	af00      	add	r7, sp, #0
 800132e:	60f8      	str	r0, [r7, #12]
 8001330:	60b9      	str	r1, [r7, #8]
 8001332:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001334:	2300      	movs	r3, #0
 8001336:	617b      	str	r3, [r7, #20]
 8001338:	e00a      	b.n	8001350 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800133a:	f3af 8000 	nop.w
 800133e:	4601      	mov	r1, r0
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	1c5a      	adds	r2, r3, #1
 8001344:	60ba      	str	r2, [r7, #8]
 8001346:	b2ca      	uxtb	r2, r1
 8001348:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	3301      	adds	r3, #1
 800134e:	617b      	str	r3, [r7, #20]
 8001350:	697a      	ldr	r2, [r7, #20]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	429a      	cmp	r2, r3
 8001356:	dbf0      	blt.n	800133a <_read+0x12>
  }

  return len;
 8001358:	687b      	ldr	r3, [r7, #4]
}
 800135a:	4618      	mov	r0, r3
 800135c:	3718      	adds	r7, #24
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	b086      	sub	sp, #24
 8001366:	af00      	add	r7, sp, #0
 8001368:	60f8      	str	r0, [r7, #12]
 800136a:	60b9      	str	r1, [r7, #8]
 800136c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800136e:	2300      	movs	r3, #0
 8001370:	617b      	str	r3, [r7, #20]
 8001372:	e009      	b.n	8001388 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	1c5a      	adds	r2, r3, #1
 8001378:	60ba      	str	r2, [r7, #8]
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff fc9d 	bl	8000cbc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	3301      	adds	r3, #1
 8001386:	617b      	str	r3, [r7, #20]
 8001388:	697a      	ldr	r2, [r7, #20]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	429a      	cmp	r2, r3
 800138e:	dbf1      	blt.n	8001374 <_write+0x12>
  }
  return len;
 8001390:	687b      	ldr	r3, [r7, #4]
}
 8001392:	4618      	mov	r0, r3
 8001394:	3718      	adds	r7, #24
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <_close>:

int _close(int file)
{
 800139a:	b480      	push	{r7}
 800139c:	b083      	sub	sp, #12
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr

080013b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013b2:	b480      	push	{r7}
 80013b4:	b083      	sub	sp, #12
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
 80013ba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013c2:	605a      	str	r2, [r3, #4]
  return 0;
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	370c      	adds	r7, #12
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr

080013d2 <_isatty>:

int _isatty(int file)
{
 80013d2:	b480      	push	{r7}
 80013d4:	b083      	sub	sp, #12
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013da:	2301      	movs	r3, #1
}
 80013dc:	4618      	mov	r0, r3
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	60b9      	str	r1, [r7, #8]
 80013f2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013f4:	2300      	movs	r3, #0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3714      	adds	r7, #20
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
	...

08001404 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b086      	sub	sp, #24
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800140c:	4a14      	ldr	r2, [pc, #80]	@ (8001460 <_sbrk+0x5c>)
 800140e:	4b15      	ldr	r3, [pc, #84]	@ (8001464 <_sbrk+0x60>)
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001418:	4b13      	ldr	r3, [pc, #76]	@ (8001468 <_sbrk+0x64>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d102      	bne.n	8001426 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001420:	4b11      	ldr	r3, [pc, #68]	@ (8001468 <_sbrk+0x64>)
 8001422:	4a12      	ldr	r2, [pc, #72]	@ (800146c <_sbrk+0x68>)
 8001424:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001426:	4b10      	ldr	r3, [pc, #64]	@ (8001468 <_sbrk+0x64>)
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4413      	add	r3, r2
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	429a      	cmp	r2, r3
 8001432:	d207      	bcs.n	8001444 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001434:	f007 fb66 	bl	8008b04 <__errno>
 8001438:	4603      	mov	r3, r0
 800143a:	220c      	movs	r2, #12
 800143c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800143e:	f04f 33ff 	mov.w	r3, #4294967295
 8001442:	e009      	b.n	8001458 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001444:	4b08      	ldr	r3, [pc, #32]	@ (8001468 <_sbrk+0x64>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800144a:	4b07      	ldr	r3, [pc, #28]	@ (8001468 <_sbrk+0x64>)
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4413      	add	r3, r2
 8001452:	4a05      	ldr	r2, [pc, #20]	@ (8001468 <_sbrk+0x64>)
 8001454:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001456:	68fb      	ldr	r3, [r7, #12]
}
 8001458:	4618      	mov	r0, r3
 800145a:	3718      	adds	r7, #24
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	2007c000 	.word	0x2007c000
 8001464:	00000400 	.word	0x00000400
 8001468:	200007a4 	.word	0x200007a4
 800146c:	20005998 	.word	0x20005998

08001470 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001474:	4b06      	ldr	r3, [pc, #24]	@ (8001490 <SystemInit+0x20>)
 8001476:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800147a:	4a05      	ldr	r2, [pc, #20]	@ (8001490 <SystemInit+0x20>)
 800147c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001480:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001484:	bf00      	nop
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	e000ed00 	.word	0xe000ed00

08001494 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001494:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014cc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001498:	f7ff ffea 	bl	8001470 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800149c:	480c      	ldr	r0, [pc, #48]	@ (80014d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800149e:	490d      	ldr	r1, [pc, #52]	@ (80014d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014a0:	4a0d      	ldr	r2, [pc, #52]	@ (80014d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014a4:	e002      	b.n	80014ac <LoopCopyDataInit>

080014a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014aa:	3304      	adds	r3, #4

080014ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014b0:	d3f9      	bcc.n	80014a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014b2:	4a0a      	ldr	r2, [pc, #40]	@ (80014dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014b4:	4c0a      	ldr	r4, [pc, #40]	@ (80014e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014b8:	e001      	b.n	80014be <LoopFillZerobss>

080014ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014bc:	3204      	adds	r2, #4

080014be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014c0:	d3fb      	bcc.n	80014ba <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80014c2:	f007 fb25 	bl	8008b10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014c6:	f7ff f995 	bl	80007f4 <main>
  bx  lr    
 80014ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014cc:	2007c000 	.word	0x2007c000
  ldr r0, =_sdata
 80014d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014d4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80014d8:	0800977c 	.word	0x0800977c
  ldr r2, =_sbss
 80014dc:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80014e0:	20005998 	.word	0x20005998

080014e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014e4:	e7fe      	b.n	80014e4 <ADC_IRQHandler>
	...

080014e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCELERATOR_ENABLE != 0)
  __HAL_FLASH_ART_ENABLE();
 80014ec:	4b0b      	ldr	r3, [pc, #44]	@ (800151c <HAL_Init+0x34>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a0a      	ldr	r2, [pc, #40]	@ (800151c <HAL_Init+0x34>)
 80014f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014f6:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014f8:	4b08      	ldr	r3, [pc, #32]	@ (800151c <HAL_Init+0x34>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a07      	ldr	r2, [pc, #28]	@ (800151c <HAL_Init+0x34>)
 80014fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001502:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001504:	2003      	movs	r0, #3
 8001506:	f000 f8fc 	bl	8001702 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800150a:	200f      	movs	r0, #15
 800150c:	f7ff fe6c 	bl	80011e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001510:	f7ff fc38 	bl	8000d84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001514:	2300      	movs	r3, #0
}
 8001516:	4618      	mov	r0, r3
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	40023c00 	.word	0x40023c00

08001520 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001524:	4b06      	ldr	r3, [pc, #24]	@ (8001540 <HAL_IncTick+0x20>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	461a      	mov	r2, r3
 800152a:	4b06      	ldr	r3, [pc, #24]	@ (8001544 <HAL_IncTick+0x24>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4413      	add	r3, r2
 8001530:	4a04      	ldr	r2, [pc, #16]	@ (8001544 <HAL_IncTick+0x24>)
 8001532:	6013      	str	r3, [r2, #0]
}
 8001534:	bf00      	nop
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	20000008 	.word	0x20000008
 8001544:	200007a8 	.word	0x200007a8

08001548 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  return uwTick;
 800154c:	4b03      	ldr	r3, [pc, #12]	@ (800155c <HAL_GetTick+0x14>)
 800154e:	681b      	ldr	r3, [r3, #0]
}
 8001550:	4618      	mov	r0, r3
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	200007a8 	.word	0x200007a8

08001560 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001568:	f7ff ffee 	bl	8001548 <HAL_GetTick>
 800156c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001578:	d005      	beq.n	8001586 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800157a:	4b0a      	ldr	r3, [pc, #40]	@ (80015a4 <HAL_Delay+0x44>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	461a      	mov	r2, r3
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	4413      	add	r3, r2
 8001584:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001586:	bf00      	nop
 8001588:	f7ff ffde 	bl	8001548 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	68fa      	ldr	r2, [r7, #12]
 8001594:	429a      	cmp	r2, r3
 8001596:	d8f7      	bhi.n	8001588 <HAL_Delay+0x28>
  {
  }
}
 8001598:	bf00      	nop
 800159a:	bf00      	nop
 800159c:	3710      	adds	r7, #16
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	20000008 	.word	0x20000008

080015a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f003 0307 	and.w	r3, r3, #7
 80015b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015b8:	4b0b      	ldr	r3, [pc, #44]	@ (80015e8 <__NVIC_SetPriorityGrouping+0x40>)
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015be:	68ba      	ldr	r2, [r7, #8]
 80015c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015c4:	4013      	ands	r3, r2
 80015c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80015d0:	4b06      	ldr	r3, [pc, #24]	@ (80015ec <__NVIC_SetPriorityGrouping+0x44>)
 80015d2:	4313      	orrs	r3, r2
 80015d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015d6:	4a04      	ldr	r2, [pc, #16]	@ (80015e8 <__NVIC_SetPriorityGrouping+0x40>)
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	60d3      	str	r3, [r2, #12]
}
 80015dc:	bf00      	nop
 80015de:	3714      	adds	r7, #20
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr
 80015e8:	e000ed00 	.word	0xe000ed00
 80015ec:	05fa0000 	.word	0x05fa0000

080015f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015f4:	4b04      	ldr	r3, [pc, #16]	@ (8001608 <__NVIC_GetPriorityGrouping+0x18>)
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	0a1b      	lsrs	r3, r3, #8
 80015fa:	f003 0307 	and.w	r3, r3, #7
}
 80015fe:	4618      	mov	r0, r3
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	e000ed00 	.word	0xe000ed00

0800160c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161a:	2b00      	cmp	r3, #0
 800161c:	db0b      	blt.n	8001636 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800161e:	79fb      	ldrb	r3, [r7, #7]
 8001620:	f003 021f 	and.w	r2, r3, #31
 8001624:	4907      	ldr	r1, [pc, #28]	@ (8001644 <__NVIC_EnableIRQ+0x38>)
 8001626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162a:	095b      	lsrs	r3, r3, #5
 800162c:	2001      	movs	r0, #1
 800162e:	fa00 f202 	lsl.w	r2, r0, r2
 8001632:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001636:	bf00      	nop
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	e000e100 	.word	0xe000e100

08001648 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	4603      	mov	r3, r0
 8001650:	6039      	str	r1, [r7, #0]
 8001652:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001658:	2b00      	cmp	r3, #0
 800165a:	db0a      	blt.n	8001672 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	b2da      	uxtb	r2, r3
 8001660:	490c      	ldr	r1, [pc, #48]	@ (8001694 <__NVIC_SetPriority+0x4c>)
 8001662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001666:	0112      	lsls	r2, r2, #4
 8001668:	b2d2      	uxtb	r2, r2
 800166a:	440b      	add	r3, r1
 800166c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001670:	e00a      	b.n	8001688 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	b2da      	uxtb	r2, r3
 8001676:	4908      	ldr	r1, [pc, #32]	@ (8001698 <__NVIC_SetPriority+0x50>)
 8001678:	79fb      	ldrb	r3, [r7, #7]
 800167a:	f003 030f 	and.w	r3, r3, #15
 800167e:	3b04      	subs	r3, #4
 8001680:	0112      	lsls	r2, r2, #4
 8001682:	b2d2      	uxtb	r2, r2
 8001684:	440b      	add	r3, r1
 8001686:	761a      	strb	r2, [r3, #24]
}
 8001688:	bf00      	nop
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr
 8001694:	e000e100 	.word	0xe000e100
 8001698:	e000ed00 	.word	0xe000ed00

0800169c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800169c:	b480      	push	{r7}
 800169e:	b089      	sub	sp, #36	@ 0x24
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	60f8      	str	r0, [r7, #12]
 80016a4:	60b9      	str	r1, [r7, #8]
 80016a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	f003 0307 	and.w	r3, r3, #7
 80016ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	f1c3 0307 	rsb	r3, r3, #7
 80016b6:	2b04      	cmp	r3, #4
 80016b8:	bf28      	it	cs
 80016ba:	2304      	movcs	r3, #4
 80016bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	3304      	adds	r3, #4
 80016c2:	2b06      	cmp	r3, #6
 80016c4:	d902      	bls.n	80016cc <NVIC_EncodePriority+0x30>
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	3b03      	subs	r3, #3
 80016ca:	e000      	b.n	80016ce <NVIC_EncodePriority+0x32>
 80016cc:	2300      	movs	r3, #0
 80016ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d0:	f04f 32ff 	mov.w	r2, #4294967295
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	fa02 f303 	lsl.w	r3, r2, r3
 80016da:	43da      	mvns	r2, r3
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	401a      	ands	r2, r3
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016e4:	f04f 31ff 	mov.w	r1, #4294967295
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	fa01 f303 	lsl.w	r3, r1, r3
 80016ee:	43d9      	mvns	r1, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f4:	4313      	orrs	r3, r2
         );
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3724      	adds	r7, #36	@ 0x24
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr

08001702 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	b082      	sub	sp, #8
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f7ff ff4c 	bl	80015a8 <__NVIC_SetPriorityGrouping>
}
 8001710:	bf00      	nop
 8001712:	3708      	adds	r7, #8
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}

08001718 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001718:	b580      	push	{r7, lr}
 800171a:	b086      	sub	sp, #24
 800171c:	af00      	add	r7, sp, #0
 800171e:	4603      	mov	r3, r0
 8001720:	60b9      	str	r1, [r7, #8]
 8001722:	607a      	str	r2, [r7, #4]
 8001724:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001726:	2300      	movs	r3, #0
 8001728:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800172a:	f7ff ff61 	bl	80015f0 <__NVIC_GetPriorityGrouping>
 800172e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	68b9      	ldr	r1, [r7, #8]
 8001734:	6978      	ldr	r0, [r7, #20]
 8001736:	f7ff ffb1 	bl	800169c <NVIC_EncodePriority>
 800173a:	4602      	mov	r2, r0
 800173c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001740:	4611      	mov	r1, r2
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff ff80 	bl	8001648 <__NVIC_SetPriority>
}
 8001748:	bf00      	nop
 800174a:	3718      	adds	r7, #24
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800175a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff ff54 	bl	800160c <__NVIC_EnableIRQ>
}
 8001764:	bf00      	nop
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}

0800176c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001770:	f3bf 8f5f 	dmb	sy
}
 8001774:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001776:	4b07      	ldr	r3, [pc, #28]	@ (8001794 <HAL_MPU_Disable+0x28>)
 8001778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800177a:	4a06      	ldr	r2, [pc, #24]	@ (8001794 <HAL_MPU_Disable+0x28>)
 800177c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001780:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001782:	4b05      	ldr	r3, [pc, #20]	@ (8001798 <HAL_MPU_Disable+0x2c>)
 8001784:	2200      	movs	r2, #0
 8001786:	605a      	str	r2, [r3, #4]
}
 8001788:	bf00      	nop
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	e000ed00 	.word	0xe000ed00
 8001798:	e000ed90 	.word	0xe000ed90

0800179c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80017a4:	4a0b      	ldr	r2, [pc, #44]	@ (80017d4 <HAL_MPU_Enable+0x38>)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f043 0301 	orr.w	r3, r3, #1
 80017ac:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80017ae:	4b0a      	ldr	r3, [pc, #40]	@ (80017d8 <HAL_MPU_Enable+0x3c>)
 80017b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017b2:	4a09      	ldr	r2, [pc, #36]	@ (80017d8 <HAL_MPU_Enable+0x3c>)
 80017b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017b8:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80017ba:	f3bf 8f4f 	dsb	sy
}
 80017be:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80017c0:	f3bf 8f6f 	isb	sy
}
 80017c4:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80017c6:	bf00      	nop
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	e000ed90 	.word	0xe000ed90
 80017d8:	e000ed00 	.word	0xe000ed00

080017dc <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	785a      	ldrb	r2, [r3, #1]
 80017e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001858 <HAL_MPU_ConfigRegion+0x7c>)
 80017ea:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80017ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001858 <HAL_MPU_ConfigRegion+0x7c>)
 80017ee:	691b      	ldr	r3, [r3, #16]
 80017f0:	4a19      	ldr	r2, [pc, #100]	@ (8001858 <HAL_MPU_ConfigRegion+0x7c>)
 80017f2:	f023 0301 	bic.w	r3, r3, #1
 80017f6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80017f8:	4a17      	ldr	r2, [pc, #92]	@ (8001858 <HAL_MPU_ConfigRegion+0x7c>)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	7b1b      	ldrb	r3, [r3, #12]
 8001804:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	7adb      	ldrb	r3, [r3, #11]
 800180a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800180c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	7a9b      	ldrb	r3, [r3, #10]
 8001812:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001814:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	7b5b      	ldrb	r3, [r3, #13]
 800181a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800181c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	7b9b      	ldrb	r3, [r3, #14]
 8001822:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001824:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	7bdb      	ldrb	r3, [r3, #15]
 800182a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800182c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	7a5b      	ldrb	r3, [r3, #9]
 8001832:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001834:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	7a1b      	ldrb	r3, [r3, #8]
 800183a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800183c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	7812      	ldrb	r2, [r2, #0]
 8001842:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001844:	4a04      	ldr	r2, [pc, #16]	@ (8001858 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001846:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001848:	6113      	str	r3, [r2, #16]
}
 800184a:	bf00      	nop
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	e000ed90 	.word	0xe000ed90

0800185c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d101      	bne.n	800186e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e086      	b.n	800197c <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001874:	2b00      	cmp	r3, #0
 8001876:	d106      	bne.n	8001886 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2220      	movs	r2, #32
 800187c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f7ff faa7 	bl	8000dd4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001886:	4b3f      	ldr	r3, [pc, #252]	@ (8001984 <HAL_ETH_Init+0x128>)
 8001888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800188a:	4a3e      	ldr	r2, [pc, #248]	@ (8001984 <HAL_ETH_Init+0x128>)
 800188c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001890:	6453      	str	r3, [r2, #68]	@ 0x44
 8001892:	4b3c      	ldr	r3, [pc, #240]	@ (8001984 <HAL_ETH_Init+0x128>)
 8001894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001896:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800189a:	60bb      	str	r3, [r7, #8]
 800189c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800189e:	4b3a      	ldr	r3, [pc, #232]	@ (8001988 <HAL_ETH_Init+0x12c>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	4a39      	ldr	r2, [pc, #228]	@ (8001988 <HAL_ETH_Init+0x12c>)
 80018a4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80018a8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80018aa:	4b37      	ldr	r3, [pc, #220]	@ (8001988 <HAL_ETH_Init+0x12c>)
 80018ac:	685a      	ldr	r2, [r3, #4]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	4935      	ldr	r1, [pc, #212]	@ (8001988 <HAL_ETH_Init+0x12c>)
 80018b4:	4313      	orrs	r3, r2
 80018b6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80018b8:	4b33      	ldr	r3, [pc, #204]	@ (8001988 <HAL_ETH_Init+0x12c>)
 80018ba:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	6812      	ldr	r2, [r2, #0]
 80018ca:	f043 0301 	orr.w	r3, r3, #1
 80018ce:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80018d2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018d4:	f7ff fe38 	bl	8001548 <HAL_GetTick>
 80018d8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80018da:	e011      	b.n	8001900 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80018dc:	f7ff fe34 	bl	8001548 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80018ea:	d909      	bls.n	8001900 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2204      	movs	r2, #4
 80018f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	22e0      	movs	r2, #224	@ 0xe0
 80018f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e03d      	b.n	800197c <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0301 	and.w	r3, r3, #1
 800190e:	2b00      	cmp	r3, #0
 8001910:	d1e4      	bne.n	80018dc <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f000 fa40 	bl	8001d98 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f000 faeb 	bl	8001ef4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f000 fb41 	bl	8001fa6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	461a      	mov	r2, r3
 800192a:	2100      	movs	r1, #0
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f000 faa9 	bl	8001e84 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8001940:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	4b0f      	ldr	r3, [pc, #60]	@ (800198c <HAL_ETH_Init+0x130>)
 8001950:	430b      	orrs	r3, r1
 8001952:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8001966:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2210      	movs	r2, #16
 8001976:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800197a:	2300      	movs	r3, #0
}
 800197c:	4618      	mov	r0, r3
 800197e:	3710      	adds	r7, #16
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	40023800 	.word	0x40023800
 8001988:	40013800 	.word	0x40013800
 800198c:	00020060 	.word	0x00020060

08001990 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b086      	sub	sp, #24
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800199e:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019a8:	695b      	ldr	r3, [r3, #20]
 80019aa:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019b4:	69db      	ldr	r3, [r3, #28]
 80019b6:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 80019b8:	4b4b      	ldr	r3, [pc, #300]	@ (8001ae8 <HAL_ETH_IRQHandler+0x158>)
 80019ba:	695b      	ldr	r3, [r3, #20]
 80019bc:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d00e      	beq.n	80019e6 <HAL_ETH_IRQHandler+0x56>
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d009      	beq.n	80019e6 <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019da:	461a      	mov	r2, r3
 80019dc:	4b43      	ldr	r3, [pc, #268]	@ (8001aec <HAL_ETH_IRQHandler+0x15c>)
 80019de:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f003 ff4b 	bl	800587c <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	f003 0301 	and.w	r3, r3, #1
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d00f      	beq.n	8001a10 <HAL_ETH_IRQHandler+0x80>
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d00a      	beq.n	8001a10 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a02:	461a      	mov	r2, r3
 8001a04:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8001a08:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f003 ff66 	bl	80058dc <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d042      	beq.n	8001aa0 <HAL_ETH_IRQHandler+0x110>
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d03d      	beq.n	8001aa0 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a2a:	f043 0208 	orr.w	r2, r3, #8
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d01a      	beq.n	8001a74 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a46:	695a      	ldr	r2, [r3, #20]
 8001a48:	4b29      	ldr	r3, [pc, #164]	@ (8001af0 <HAL_ETH_IRQHandler+0x160>)
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a5a:	69db      	ldr	r3, [r3, #28]
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	6812      	ldr	r2, [r2, #0]
 8001a60:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8001a64:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001a68:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	22e0      	movs	r2, #224	@ 0xe0
 8001a6e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8001a72:	e012      	b.n	8001a9a <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a7c:	695a      	ldr	r2, [r3, #20]
 8001a7e:	f248 6380 	movw	r3, #34432	@ 0x8680
 8001a82:	4013      	ands	r3, r2
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a92:	461a      	mov	r2, r3
 8001a94:	f248 6380 	movw	r3, #34432	@ 0x8680
 8001a98:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f003 fe92 	bl	80057c4 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	f003 0308 	and.w	r3, r3, #8
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d00e      	beq.n	8001ac8 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ab0:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f000 f81a 	bl	8001af4 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d006      	beq.n	8001ae0 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001ad2:	4b05      	ldr	r3, [pc, #20]	@ (8001ae8 <HAL_ETH_IRQHandler+0x158>)
 8001ad4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001ad8:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f000 f814 	bl	8001b08 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8001ae0:	bf00      	nop
 8001ae2:	3718      	adds	r7, #24
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	40013c00 	.word	0x40013c00
 8001aec:	00010040 	.word	0x00010040
 8001af0:	007e2000 	.word	0x007e2000

08001af4 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001afc:	bf00      	nop
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001b10:	bf00      	nop
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001b2e:	68fa      	ldr	r2, [r7, #12]
 8001b30:	4b53      	ldr	r3, [pc, #332]	@ (8001c80 <ETH_SetMACConfig+0x164>)
 8001b32:	4013      	ands	r3, r2
 8001b34:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	7b9b      	ldrb	r3, [r3, #14]
 8001b3a:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001b3c:	683a      	ldr	r2, [r7, #0]
 8001b3e:	7c12      	ldrb	r2, [r2, #16]
 8001b40:	2a00      	cmp	r2, #0
 8001b42:	d102      	bne.n	8001b4a <ETH_SetMACConfig+0x2e>
 8001b44:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001b48:	e000      	b.n	8001b4c <ETH_SetMACConfig+0x30>
 8001b4a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001b4c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001b4e:	683a      	ldr	r2, [r7, #0]
 8001b50:	7c52      	ldrb	r2, [r2, #17]
 8001b52:	2a00      	cmp	r2, #0
 8001b54:	d102      	bne.n	8001b5c <ETH_SetMACConfig+0x40>
 8001b56:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001b5a:	e000      	b.n	8001b5e <ETH_SetMACConfig+0x42>
 8001b5c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001b5e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001b64:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	7fdb      	ldrb	r3, [r3, #31]
 8001b6a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001b6c:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001b72:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001b74:	683a      	ldr	r2, [r7, #0]
 8001b76:	7f92      	ldrb	r2, [r2, #30]
 8001b78:	2a00      	cmp	r2, #0
 8001b7a:	d102      	bne.n	8001b82 <ETH_SetMACConfig+0x66>
 8001b7c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b80:	e000      	b.n	8001b84 <ETH_SetMACConfig+0x68>
 8001b82:	2200      	movs	r2, #0
                        macconf->Speed |
 8001b84:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	7f1b      	ldrb	r3, [r3, #28]
 8001b8a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001b8c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001b92:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	791b      	ldrb	r3, [r3, #4]
 8001b98:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001b9a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001b9c:	683a      	ldr	r2, [r7, #0]
 8001b9e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001ba2:	2a00      	cmp	r2, #0
 8001ba4:	d102      	bne.n	8001bac <ETH_SetMACConfig+0x90>
 8001ba6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001baa:	e000      	b.n	8001bae <ETH_SetMACConfig+0x92>
 8001bac:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001bae:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	7bdb      	ldrb	r3, [r3, #15]
 8001bb4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001bb6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001bbc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001bc4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	68fa      	ldr	r2, [r7, #12]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	68fa      	ldr	r2, [r7, #12]
 8001bd4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001bde:	2001      	movs	r0, #1
 8001be0:	f7ff fcbe 	bl	8001560 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	68fa      	ldr	r2, [r7, #12]
 8001bea:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	699b      	ldr	r3, [r3, #24]
 8001bf2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001bf4:	68fa      	ldr	r2, [r7, #12]
 8001bf6:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c02:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001c04:	683a      	ldr	r2, [r7, #0]
 8001c06:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001c0a:	2a00      	cmp	r2, #0
 8001c0c:	d101      	bne.n	8001c12 <ETH_SetMACConfig+0xf6>
 8001c0e:	2280      	movs	r2, #128	@ 0x80
 8001c10:	e000      	b.n	8001c14 <ETH_SetMACConfig+0xf8>
 8001c12:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001c14:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001c1a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001c1c:	683a      	ldr	r2, [r7, #0]
 8001c1e:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8001c22:	2a01      	cmp	r2, #1
 8001c24:	d101      	bne.n	8001c2a <ETH_SetMACConfig+0x10e>
 8001c26:	2208      	movs	r2, #8
 8001c28:	e000      	b.n	8001c2c <ETH_SetMACConfig+0x110>
 8001c2a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001c2c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001c2e:	683a      	ldr	r2, [r7, #0]
 8001c30:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8001c34:	2a01      	cmp	r2, #1
 8001c36:	d101      	bne.n	8001c3c <ETH_SetMACConfig+0x120>
 8001c38:	2204      	movs	r2, #4
 8001c3a:	e000      	b.n	8001c3e <ETH_SetMACConfig+0x122>
 8001c3c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001c3e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001c40:	683a      	ldr	r2, [r7, #0]
 8001c42:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8001c46:	2a01      	cmp	r2, #1
 8001c48:	d101      	bne.n	8001c4e <ETH_SetMACConfig+0x132>
 8001c4a:	2202      	movs	r2, #2
 8001c4c:	e000      	b.n	8001c50 <ETH_SetMACConfig+0x134>
 8001c4e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001c50:	4313      	orrs	r3, r2
 8001c52:	68fa      	ldr	r2, [r7, #12]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	68fa      	ldr	r2, [r7, #12]
 8001c5e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	699b      	ldr	r3, [r3, #24]
 8001c66:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c68:	2001      	movs	r0, #1
 8001c6a:	f7ff fc79 	bl	8001560 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	68fa      	ldr	r2, [r7, #12]
 8001c74:	619a      	str	r2, [r3, #24]
}
 8001c76:	bf00      	nop
 8001c78:	3710      	adds	r7, #16
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	fd20810f 	.word	0xfd20810f

08001c84 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c96:	699b      	ldr	r3, [r3, #24]
 8001c98:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	4b3d      	ldr	r3, [pc, #244]	@ (8001d94 <ETH_SetDMAConfig+0x110>)
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	7b1b      	ldrb	r3, [r3, #12]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d102      	bne.n	8001cb0 <ETH_SetDMAConfig+0x2c>
 8001caa:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001cae:	e000      	b.n	8001cb2 <ETH_SetDMAConfig+0x2e>
 8001cb0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	7b5b      	ldrb	r3, [r3, #13]
 8001cb6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001cb8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001cba:	683a      	ldr	r2, [r7, #0]
 8001cbc:	7f52      	ldrb	r2, [r2, #29]
 8001cbe:	2a00      	cmp	r2, #0
 8001cc0:	d102      	bne.n	8001cc8 <ETH_SetDMAConfig+0x44>
 8001cc2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001cc6:	e000      	b.n	8001cca <ETH_SetDMAConfig+0x46>
 8001cc8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001cca:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	7b9b      	ldrb	r3, [r3, #14]
 8001cd0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001cd2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001cd8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	7f1b      	ldrb	r3, [r3, #28]
 8001cde:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001ce0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	7f9b      	ldrb	r3, [r3, #30]
 8001ce6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001ce8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001cee:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001cf6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	68fa      	ldr	r2, [r7, #12]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d08:	461a      	mov	r2, r3
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d1a:	2001      	movs	r0, #1
 8001d1c:	f7ff fc20 	bl	8001560 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d28:	461a      	mov	r2, r3
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	791b      	ldrb	r3, [r3, #4]
 8001d32:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001d38:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001d3e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001d44:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001d4c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001d4e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d54:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001d56:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001d5c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	6812      	ldr	r2, [r2, #0]
 8001d62:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001d66:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001d6a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d78:	2001      	movs	r0, #1
 8001d7a:	f7ff fbf1 	bl	8001560 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d86:	461a      	mov	r2, r3
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	6013      	str	r3, [r2, #0]
}
 8001d8c:	bf00      	nop
 8001d8e:	3710      	adds	r7, #16
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	f8de3f23 	.word	0xf8de3f23

08001d98 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b0a6      	sub	sp, #152	@ 0x98
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001da0:	2301      	movs	r3, #1
 8001da2:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8001da6:	2301      	movs	r3, #1
 8001da8:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001dac:	2300      	movs	r3, #0
 8001dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001db0:	2300      	movs	r3, #0
 8001db2:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001db6:	2301      	movs	r3, #1
 8001db8:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001dde:	2300      	movs	r3, #0
 8001de0:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001de4:	2300      	movs	r3, #0
 8001de6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001de8:	2300      	movs	r3, #0
 8001dea:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001dee:	2300      	movs	r3, #0
 8001df0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001df4:	2300      	movs	r3, #0
 8001df6:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001e00:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001e04:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001e06:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001e0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001e12:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001e16:	4619      	mov	r1, r3
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f7ff fe7f 	bl	8001b1c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001e22:	2301      	movs	r3, #1
 8001e24:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001e26:	2301      	movs	r3, #1
 8001e28:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001e30:	2300      	movs	r3, #0
 8001e32:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001e34:	2300      	movs	r3, #0
 8001e36:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001e40:	2300      	movs	r3, #0
 8001e42:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001e44:	2301      	movs	r3, #1
 8001e46:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001e4e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001e52:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001e54:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001e58:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001e5a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e5e:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001e60:	2301      	movs	r3, #1
 8001e62:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001e66:	2300      	movs	r3, #0
 8001e68:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001e6e:	f107 0308 	add.w	r3, r7, #8
 8001e72:	4619      	mov	r1, r3
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f7ff ff05 	bl	8001c84 <ETH_SetDMAConfig>
}
 8001e7a:	bf00      	nop
 8001e7c:	3798      	adds	r7, #152	@ 0x98
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
	...

08001e84 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b087      	sub	sp, #28
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	3305      	adds	r3, #5
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	021b      	lsls	r3, r3, #8
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	3204      	adds	r2, #4
 8001e9c:	7812      	ldrb	r2, [r2, #0]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001ea2:	68ba      	ldr	r2, [r7, #8]
 8001ea4:	4b11      	ldr	r3, [pc, #68]	@ (8001eec <ETH_MACAddressConfig+0x68>)
 8001ea6:	4413      	add	r3, r2
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	3303      	adds	r3, #3
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	061a      	lsls	r2, r3, #24
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	3302      	adds	r3, #2
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	041b      	lsls	r3, r3, #16
 8001ebe:	431a      	orrs	r2, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	021b      	lsls	r3, r3, #8
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	7812      	ldrb	r2, [r2, #0]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001ed2:	68ba      	ldr	r2, [r7, #8]
 8001ed4:	4b06      	ldr	r3, [pc, #24]	@ (8001ef0 <ETH_MACAddressConfig+0x6c>)
 8001ed6:	4413      	add	r3, r2
 8001ed8:	461a      	mov	r2, r3
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	6013      	str	r3, [r2, #0]
}
 8001ede:	bf00      	nop
 8001ee0:	371c      	adds	r7, #28
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	40028040 	.word	0x40028040
 8001ef0:	40028044 	.word	0x40028044

08001ef4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b085      	sub	sp, #20
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001efc:	2300      	movs	r3, #0
 8001efe:	60fb      	str	r3, [r7, #12]
 8001f00:	e03e      	b.n	8001f80 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	68d9      	ldr	r1, [r3, #12]
 8001f06:	68fa      	ldr	r2, [r7, #12]
 8001f08:	4613      	mov	r3, r2
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	4413      	add	r3, r2
 8001f0e:	00db      	lsls	r3, r3, #3
 8001f10:	440b      	add	r3, r1
 8001f12:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	2200      	movs	r2, #0
 8001f18:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	2200      	movs	r2, #0
 8001f24:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001f2c:	68b9      	ldr	r1, [r7, #8]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	68fa      	ldr	r2, [r7, #12]
 8001f32:	3206      	adds	r2, #6
 8001f34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d80c      	bhi.n	8001f64 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	68d9      	ldr	r1, [r3, #12]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	1c5a      	adds	r2, r3, #1
 8001f52:	4613      	mov	r3, r2
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	4413      	add	r3, r2
 8001f58:	00db      	lsls	r3, r3, #3
 8001f5a:	440b      	add	r3, r1
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	60da      	str	r2, [r3, #12]
 8001f62:	e004      	b.n	8001f6e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	461a      	mov	r2, r3
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	60fb      	str	r3, [r7, #12]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2b03      	cmp	r3, #3
 8001f84:	d9bd      	bls.n	8001f02 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	68da      	ldr	r2, [r3, #12]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f98:	611a      	str	r2, [r3, #16]
}
 8001f9a:	bf00      	nop
 8001f9c:	3714      	adds	r7, #20
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr

08001fa6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	b085      	sub	sp, #20
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001fae:	2300      	movs	r3, #0
 8001fb0:	60fb      	str	r3, [r7, #12]
 8001fb2:	e048      	b.n	8002046 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6919      	ldr	r1, [r3, #16]
 8001fb8:	68fa      	ldr	r2, [r7, #12]
 8001fba:	4613      	mov	r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	4413      	add	r3, r2
 8001fc0:	00db      	lsls	r3, r3, #3
 8001fc2:	440b      	add	r3, r1
 8001fc4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001ff0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	695b      	ldr	r3, [r3, #20]
 8001ff6:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800200a:	68b9      	ldr	r1, [r7, #8]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	68fa      	ldr	r2, [r7, #12]
 8002010:	3212      	adds	r2, #18
 8002012:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2b02      	cmp	r3, #2
 800201a:	d80c      	bhi.n	8002036 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6919      	ldr	r1, [r3, #16]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	1c5a      	adds	r2, r3, #1
 8002024:	4613      	mov	r3, r2
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	4413      	add	r3, r2
 800202a:	00db      	lsls	r3, r3, #3
 800202c:	440b      	add	r3, r1
 800202e:	461a      	mov	r2, r3
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	60da      	str	r2, [r3, #12]
 8002034:	e004      	b.n	8002040 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	461a      	mov	r2, r3
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	3301      	adds	r3, #1
 8002044:	60fb      	str	r3, [r7, #12]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2b03      	cmp	r3, #3
 800204a:	d9b3      	bls.n	8001fb4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2200      	movs	r2, #0
 800205c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	691a      	ldr	r2, [r3, #16]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002076:	60da      	str	r2, [r3, #12]
}
 8002078:	bf00      	nop
 800207a:	3714      	adds	r7, #20
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002084:	b480      	push	{r7}
 8002086:	b089      	sub	sp, #36	@ 0x24
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800208e:	2300      	movs	r3, #0
 8002090:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002092:	2300      	movs	r3, #0
 8002094:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002096:	2300      	movs	r3, #0
 8002098:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800209a:	2300      	movs	r3, #0
 800209c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800209e:	2300      	movs	r3, #0
 80020a0:	61fb      	str	r3, [r7, #28]
 80020a2:	e175      	b.n	8002390 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80020a4:	2201      	movs	r2, #1
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	697a      	ldr	r2, [r7, #20]
 80020b4:	4013      	ands	r3, r2
 80020b6:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80020b8:	693a      	ldr	r2, [r7, #16]
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	429a      	cmp	r2, r3
 80020be:	f040 8164 	bne.w	800238a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f003 0303 	and.w	r3, r3, #3
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d005      	beq.n	80020da <HAL_GPIO_Init+0x56>
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f003 0303 	and.w	r3, r3, #3
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d130      	bne.n	800213c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	2203      	movs	r2, #3
 80020e6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ea:	43db      	mvns	r3, r3
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	4013      	ands	r3, r2
 80020f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	68da      	ldr	r2, [r3, #12]
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	005b      	lsls	r3, r3, #1
 80020fa:	fa02 f303 	lsl.w	r3, r2, r3
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	4313      	orrs	r3, r2
 8002102:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002110:	2201      	movs	r2, #1
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	43db      	mvns	r3, r3
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	4013      	ands	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	091b      	lsrs	r3, r3, #4
 8002126:	f003 0201 	and.w	r2, r3, #1
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	4313      	orrs	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f003 0303 	and.w	r3, r3, #3
 8002144:	2b03      	cmp	r3, #3
 8002146:	d017      	beq.n	8002178 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	2203      	movs	r2, #3
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	43db      	mvns	r3, r3
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	4013      	ands	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	689a      	ldr	r2, [r3, #8]
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	4313      	orrs	r3, r2
 8002170:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f003 0303 	and.w	r3, r3, #3
 8002180:	2b02      	cmp	r3, #2
 8002182:	d123      	bne.n	80021cc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	08da      	lsrs	r2, r3, #3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	3208      	adds	r2, #8
 800218c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002190:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	f003 0307 	and.w	r3, r3, #7
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	220f      	movs	r2, #15
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	43db      	mvns	r3, r3
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	4013      	ands	r3, r2
 80021a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	691a      	ldr	r2, [r3, #16]
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	f003 0307 	and.w	r3, r3, #7
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	08da      	lsrs	r2, r3, #3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	3208      	adds	r2, #8
 80021c6:	69b9      	ldr	r1, [r7, #24]
 80021c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	005b      	lsls	r3, r3, #1
 80021d6:	2203      	movs	r2, #3
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	43db      	mvns	r3, r3
 80021de:	69ba      	ldr	r2, [r7, #24]
 80021e0:	4013      	ands	r3, r2
 80021e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f003 0203 	and.w	r2, r3, #3
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	fa02 f303 	lsl.w	r3, r2, r3
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002208:	2b00      	cmp	r3, #0
 800220a:	f000 80be 	beq.w	800238a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800220e:	4b66      	ldr	r3, [pc, #408]	@ (80023a8 <HAL_GPIO_Init+0x324>)
 8002210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002212:	4a65      	ldr	r2, [pc, #404]	@ (80023a8 <HAL_GPIO_Init+0x324>)
 8002214:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002218:	6453      	str	r3, [r2, #68]	@ 0x44
 800221a:	4b63      	ldr	r3, [pc, #396]	@ (80023a8 <HAL_GPIO_Init+0x324>)
 800221c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800221e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002222:	60fb      	str	r3, [r7, #12]
 8002224:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002226:	4a61      	ldr	r2, [pc, #388]	@ (80023ac <HAL_GPIO_Init+0x328>)
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	089b      	lsrs	r3, r3, #2
 800222c:	3302      	adds	r3, #2
 800222e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002232:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	f003 0303 	and.w	r3, r3, #3
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	220f      	movs	r2, #15
 800223e:	fa02 f303 	lsl.w	r3, r2, r3
 8002242:	43db      	mvns	r3, r3
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	4013      	ands	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a58      	ldr	r2, [pc, #352]	@ (80023b0 <HAL_GPIO_Init+0x32c>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d037      	beq.n	80022c2 <HAL_GPIO_Init+0x23e>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a57      	ldr	r2, [pc, #348]	@ (80023b4 <HAL_GPIO_Init+0x330>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d031      	beq.n	80022be <HAL_GPIO_Init+0x23a>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a56      	ldr	r2, [pc, #344]	@ (80023b8 <HAL_GPIO_Init+0x334>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d02b      	beq.n	80022ba <HAL_GPIO_Init+0x236>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a55      	ldr	r2, [pc, #340]	@ (80023bc <HAL_GPIO_Init+0x338>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d025      	beq.n	80022b6 <HAL_GPIO_Init+0x232>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a54      	ldr	r2, [pc, #336]	@ (80023c0 <HAL_GPIO_Init+0x33c>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d01f      	beq.n	80022b2 <HAL_GPIO_Init+0x22e>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a53      	ldr	r2, [pc, #332]	@ (80023c4 <HAL_GPIO_Init+0x340>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d019      	beq.n	80022ae <HAL_GPIO_Init+0x22a>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a52      	ldr	r2, [pc, #328]	@ (80023c8 <HAL_GPIO_Init+0x344>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d013      	beq.n	80022aa <HAL_GPIO_Init+0x226>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a51      	ldr	r2, [pc, #324]	@ (80023cc <HAL_GPIO_Init+0x348>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d00d      	beq.n	80022a6 <HAL_GPIO_Init+0x222>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a50      	ldr	r2, [pc, #320]	@ (80023d0 <HAL_GPIO_Init+0x34c>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d007      	beq.n	80022a2 <HAL_GPIO_Init+0x21e>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a4f      	ldr	r2, [pc, #316]	@ (80023d4 <HAL_GPIO_Init+0x350>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d101      	bne.n	800229e <HAL_GPIO_Init+0x21a>
 800229a:	2309      	movs	r3, #9
 800229c:	e012      	b.n	80022c4 <HAL_GPIO_Init+0x240>
 800229e:	230a      	movs	r3, #10
 80022a0:	e010      	b.n	80022c4 <HAL_GPIO_Init+0x240>
 80022a2:	2308      	movs	r3, #8
 80022a4:	e00e      	b.n	80022c4 <HAL_GPIO_Init+0x240>
 80022a6:	2307      	movs	r3, #7
 80022a8:	e00c      	b.n	80022c4 <HAL_GPIO_Init+0x240>
 80022aa:	2306      	movs	r3, #6
 80022ac:	e00a      	b.n	80022c4 <HAL_GPIO_Init+0x240>
 80022ae:	2305      	movs	r3, #5
 80022b0:	e008      	b.n	80022c4 <HAL_GPIO_Init+0x240>
 80022b2:	2304      	movs	r3, #4
 80022b4:	e006      	b.n	80022c4 <HAL_GPIO_Init+0x240>
 80022b6:	2303      	movs	r3, #3
 80022b8:	e004      	b.n	80022c4 <HAL_GPIO_Init+0x240>
 80022ba:	2302      	movs	r3, #2
 80022bc:	e002      	b.n	80022c4 <HAL_GPIO_Init+0x240>
 80022be:	2301      	movs	r3, #1
 80022c0:	e000      	b.n	80022c4 <HAL_GPIO_Init+0x240>
 80022c2:	2300      	movs	r3, #0
 80022c4:	69fa      	ldr	r2, [r7, #28]
 80022c6:	f002 0203 	and.w	r2, r2, #3
 80022ca:	0092      	lsls	r2, r2, #2
 80022cc:	4093      	lsls	r3, r2
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80022d4:	4935      	ldr	r1, [pc, #212]	@ (80023ac <HAL_GPIO_Init+0x328>)
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	089b      	lsrs	r3, r3, #2
 80022da:	3302      	adds	r3, #2
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022e2:	4b3d      	ldr	r3, [pc, #244]	@ (80023d8 <HAL_GPIO_Init+0x354>)
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	43db      	mvns	r3, r3
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	4013      	ands	r3, r2
 80022f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d003      	beq.n	8002306 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80022fe:	69ba      	ldr	r2, [r7, #24]
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	4313      	orrs	r3, r2
 8002304:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002306:	4a34      	ldr	r2, [pc, #208]	@ (80023d8 <HAL_GPIO_Init+0x354>)
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800230c:	4b32      	ldr	r3, [pc, #200]	@ (80023d8 <HAL_GPIO_Init+0x354>)
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	43db      	mvns	r3, r3
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	4013      	ands	r3, r2
 800231a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d003      	beq.n	8002330 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	4313      	orrs	r3, r2
 800232e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002330:	4a29      	ldr	r2, [pc, #164]	@ (80023d8 <HAL_GPIO_Init+0x354>)
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002336:	4b28      	ldr	r3, [pc, #160]	@ (80023d8 <HAL_GPIO_Init+0x354>)
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	43db      	mvns	r3, r3
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	4013      	ands	r3, r2
 8002344:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d003      	beq.n	800235a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	4313      	orrs	r3, r2
 8002358:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800235a:	4a1f      	ldr	r2, [pc, #124]	@ (80023d8 <HAL_GPIO_Init+0x354>)
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002360:	4b1d      	ldr	r3, [pc, #116]	@ (80023d8 <HAL_GPIO_Init+0x354>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	43db      	mvns	r3, r3
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	4013      	ands	r3, r2
 800236e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d003      	beq.n	8002384 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	4313      	orrs	r3, r2
 8002382:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002384:	4a14      	ldr	r2, [pc, #80]	@ (80023d8 <HAL_GPIO_Init+0x354>)
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	3301      	adds	r3, #1
 800238e:	61fb      	str	r3, [r7, #28]
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	2b0f      	cmp	r3, #15
 8002394:	f67f ae86 	bls.w	80020a4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002398:	bf00      	nop
 800239a:	bf00      	nop
 800239c:	3724      	adds	r7, #36	@ 0x24
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	40023800 	.word	0x40023800
 80023ac:	40013800 	.word	0x40013800
 80023b0:	40020000 	.word	0x40020000
 80023b4:	40020400 	.word	0x40020400
 80023b8:	40020800 	.word	0x40020800
 80023bc:	40020c00 	.word	0x40020c00
 80023c0:	40021000 	.word	0x40021000
 80023c4:	40021400 	.word	0x40021400
 80023c8:	40021800 	.word	0x40021800
 80023cc:	40021c00 	.word	0x40021c00
 80023d0:	40022000 	.word	0x40022000
 80023d4:	40022400 	.word	0x40022400
 80023d8:	40013c00 	.word	0x40013c00

080023dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	460b      	mov	r3, r1
 80023e6:	807b      	strh	r3, [r7, #2]
 80023e8:	4613      	mov	r3, r2
 80023ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023ec:	787b      	ldrb	r3, [r7, #1]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d003      	beq.n	80023fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023f2:	887a      	ldrh	r2, [r7, #2]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80023f8:	e003      	b.n	8002402 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80023fa:	887b      	ldrh	r3, [r7, #2]
 80023fc:	041a      	lsls	r2, r3, #16
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	619a      	str	r2, [r3, #24]
}
 8002402:	bf00      	nop
 8002404:	370c      	adds	r7, #12
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr

0800240e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800240e:	b580      	push	{r7, lr}
 8002410:	b086      	sub	sp, #24
 8002412:	af02      	add	r7, sp, #8
 8002414:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d101      	bne.n	8002420 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e108      	b.n	8002632 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800242c:	b2db      	uxtb	r3, r3
 800242e:	2b00      	cmp	r3, #0
 8002430:	d106      	bne.n	8002440 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f7fe fe5a 	bl	80010f4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2203      	movs	r2, #3
 8002444:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800244e:	d102      	bne.n	8002456 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4618      	mov	r0, r3
 800245c:	f002 fef4 	bl	8005248 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6818      	ldr	r0, [r3, #0]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	7c1a      	ldrb	r2, [r3, #16]
 8002468:	f88d 2000 	strb.w	r2, [sp]
 800246c:	3304      	adds	r3, #4
 800246e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002470:	f002 fe90 	bl	8005194 <USB_CoreInit>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d005      	beq.n	8002486 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2202      	movs	r2, #2
 800247e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e0d5      	b.n	8002632 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2100      	movs	r1, #0
 800248c:	4618      	mov	r0, r3
 800248e:	f002 feec 	bl	800526a <USB_SetCurrentMode>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d005      	beq.n	80024a4 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2202      	movs	r2, #2
 800249c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e0c6      	b.n	8002632 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024a4:	2300      	movs	r3, #0
 80024a6:	73fb      	strb	r3, [r7, #15]
 80024a8:	e04a      	b.n	8002540 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80024aa:	7bfa      	ldrb	r2, [r7, #15]
 80024ac:	6879      	ldr	r1, [r7, #4]
 80024ae:	4613      	mov	r3, r2
 80024b0:	00db      	lsls	r3, r3, #3
 80024b2:	4413      	add	r3, r2
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	440b      	add	r3, r1
 80024b8:	3315      	adds	r3, #21
 80024ba:	2201      	movs	r2, #1
 80024bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80024be:	7bfa      	ldrb	r2, [r7, #15]
 80024c0:	6879      	ldr	r1, [r7, #4]
 80024c2:	4613      	mov	r3, r2
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	4413      	add	r3, r2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	440b      	add	r3, r1
 80024cc:	3314      	adds	r3, #20
 80024ce:	7bfa      	ldrb	r2, [r7, #15]
 80024d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80024d2:	7bfa      	ldrb	r2, [r7, #15]
 80024d4:	7bfb      	ldrb	r3, [r7, #15]
 80024d6:	b298      	uxth	r0, r3
 80024d8:	6879      	ldr	r1, [r7, #4]
 80024da:	4613      	mov	r3, r2
 80024dc:	00db      	lsls	r3, r3, #3
 80024de:	4413      	add	r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	440b      	add	r3, r1
 80024e4:	332e      	adds	r3, #46	@ 0x2e
 80024e6:	4602      	mov	r2, r0
 80024e8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80024ea:	7bfa      	ldrb	r2, [r7, #15]
 80024ec:	6879      	ldr	r1, [r7, #4]
 80024ee:	4613      	mov	r3, r2
 80024f0:	00db      	lsls	r3, r3, #3
 80024f2:	4413      	add	r3, r2
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	440b      	add	r3, r1
 80024f8:	3318      	adds	r3, #24
 80024fa:	2200      	movs	r2, #0
 80024fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80024fe:	7bfa      	ldrb	r2, [r7, #15]
 8002500:	6879      	ldr	r1, [r7, #4]
 8002502:	4613      	mov	r3, r2
 8002504:	00db      	lsls	r3, r3, #3
 8002506:	4413      	add	r3, r2
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	440b      	add	r3, r1
 800250c:	331c      	adds	r3, #28
 800250e:	2200      	movs	r2, #0
 8002510:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002512:	7bfa      	ldrb	r2, [r7, #15]
 8002514:	6879      	ldr	r1, [r7, #4]
 8002516:	4613      	mov	r3, r2
 8002518:	00db      	lsls	r3, r3, #3
 800251a:	4413      	add	r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	440b      	add	r3, r1
 8002520:	3320      	adds	r3, #32
 8002522:	2200      	movs	r2, #0
 8002524:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002526:	7bfa      	ldrb	r2, [r7, #15]
 8002528:	6879      	ldr	r1, [r7, #4]
 800252a:	4613      	mov	r3, r2
 800252c:	00db      	lsls	r3, r3, #3
 800252e:	4413      	add	r3, r2
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	440b      	add	r3, r1
 8002534:	3324      	adds	r3, #36	@ 0x24
 8002536:	2200      	movs	r2, #0
 8002538:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800253a:	7bfb      	ldrb	r3, [r7, #15]
 800253c:	3301      	adds	r3, #1
 800253e:	73fb      	strb	r3, [r7, #15]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	791b      	ldrb	r3, [r3, #4]
 8002544:	7bfa      	ldrb	r2, [r7, #15]
 8002546:	429a      	cmp	r2, r3
 8002548:	d3af      	bcc.n	80024aa <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800254a:	2300      	movs	r3, #0
 800254c:	73fb      	strb	r3, [r7, #15]
 800254e:	e044      	b.n	80025da <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002550:	7bfa      	ldrb	r2, [r7, #15]
 8002552:	6879      	ldr	r1, [r7, #4]
 8002554:	4613      	mov	r3, r2
 8002556:	00db      	lsls	r3, r3, #3
 8002558:	4413      	add	r3, r2
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	440b      	add	r3, r1
 800255e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002562:	2200      	movs	r2, #0
 8002564:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002566:	7bfa      	ldrb	r2, [r7, #15]
 8002568:	6879      	ldr	r1, [r7, #4]
 800256a:	4613      	mov	r3, r2
 800256c:	00db      	lsls	r3, r3, #3
 800256e:	4413      	add	r3, r2
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	440b      	add	r3, r1
 8002574:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002578:	7bfa      	ldrb	r2, [r7, #15]
 800257a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800257c:	7bfa      	ldrb	r2, [r7, #15]
 800257e:	6879      	ldr	r1, [r7, #4]
 8002580:	4613      	mov	r3, r2
 8002582:	00db      	lsls	r3, r3, #3
 8002584:	4413      	add	r3, r2
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	440b      	add	r3, r1
 800258a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800258e:	2200      	movs	r2, #0
 8002590:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002592:	7bfa      	ldrb	r2, [r7, #15]
 8002594:	6879      	ldr	r1, [r7, #4]
 8002596:	4613      	mov	r3, r2
 8002598:	00db      	lsls	r3, r3, #3
 800259a:	4413      	add	r3, r2
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	440b      	add	r3, r1
 80025a0:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80025a4:	2200      	movs	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80025a8:	7bfa      	ldrb	r2, [r7, #15]
 80025aa:	6879      	ldr	r1, [r7, #4]
 80025ac:	4613      	mov	r3, r2
 80025ae:	00db      	lsls	r3, r3, #3
 80025b0:	4413      	add	r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	440b      	add	r3, r1
 80025b6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80025ba:	2200      	movs	r2, #0
 80025bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80025be:	7bfa      	ldrb	r2, [r7, #15]
 80025c0:	6879      	ldr	r1, [r7, #4]
 80025c2:	4613      	mov	r3, r2
 80025c4:	00db      	lsls	r3, r3, #3
 80025c6:	4413      	add	r3, r2
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	440b      	add	r3, r1
 80025cc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80025d0:	2200      	movs	r2, #0
 80025d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025d4:	7bfb      	ldrb	r3, [r7, #15]
 80025d6:	3301      	adds	r3, #1
 80025d8:	73fb      	strb	r3, [r7, #15]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	791b      	ldrb	r3, [r3, #4]
 80025de:	7bfa      	ldrb	r2, [r7, #15]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d3b5      	bcc.n	8002550 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6818      	ldr	r0, [r3, #0]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	7c1a      	ldrb	r2, [r3, #16]
 80025ec:	f88d 2000 	strb.w	r2, [sp]
 80025f0:	3304      	adds	r3, #4
 80025f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025f4:	f002 fe86 	bl	8005304 <USB_DevInit>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d005      	beq.n	800260a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2202      	movs	r2, #2
 8002602:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e013      	b.n	8002632 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2201      	movs	r2, #1
 8002614:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	7b1b      	ldrb	r3, [r3, #12]
 800261c:	2b01      	cmp	r3, #1
 800261e:	d102      	bne.n	8002626 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f000 f80b 	bl	800263c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4618      	mov	r0, r3
 800262c:	f003 f841 	bl	80056b2 <USB_DevDisconnect>

  return HAL_OK;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3710      	adds	r7, #16
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
	...

0800263c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800263c:	b480      	push	{r7}
 800263e:	b085      	sub	sp, #20
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2201      	movs	r2, #1
 800264e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800266a:	4b05      	ldr	r3, [pc, #20]	@ (8002680 <HAL_PCDEx_ActivateLPM+0x44>)
 800266c:	4313      	orrs	r3, r2
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002672:	2300      	movs	r3, #0
}
 8002674:	4618      	mov	r0, r3
 8002676:	3714      	adds	r7, #20
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr
 8002680:	10000003 	.word	0x10000003

08002684 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002688:	4b05      	ldr	r3, [pc, #20]	@ (80026a0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a04      	ldr	r2, [pc, #16]	@ (80026a0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800268e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002692:	6013      	str	r3, [r2, #0]
}
 8002694:	bf00      	nop
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	40007000 	.word	0x40007000

080026a4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80026aa:	2300      	movs	r3, #0
 80026ac:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80026ae:	4b23      	ldr	r3, [pc, #140]	@ (800273c <HAL_PWREx_EnableOverDrive+0x98>)
 80026b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b2:	4a22      	ldr	r2, [pc, #136]	@ (800273c <HAL_PWREx_EnableOverDrive+0x98>)
 80026b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80026ba:	4b20      	ldr	r3, [pc, #128]	@ (800273c <HAL_PWREx_EnableOverDrive+0x98>)
 80026bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026c2:	603b      	str	r3, [r7, #0]
 80026c4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80026c6:	4b1e      	ldr	r3, [pc, #120]	@ (8002740 <HAL_PWREx_EnableOverDrive+0x9c>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a1d      	ldr	r2, [pc, #116]	@ (8002740 <HAL_PWREx_EnableOverDrive+0x9c>)
 80026cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026d0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80026d2:	f7fe ff39 	bl	8001548 <HAL_GetTick>
 80026d6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80026d8:	e009      	b.n	80026ee <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80026da:	f7fe ff35 	bl	8001548 <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80026e8:	d901      	bls.n	80026ee <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e022      	b.n	8002734 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80026ee:	4b14      	ldr	r3, [pc, #80]	@ (8002740 <HAL_PWREx_EnableOverDrive+0x9c>)
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026fa:	d1ee      	bne.n	80026da <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80026fc:	4b10      	ldr	r3, [pc, #64]	@ (8002740 <HAL_PWREx_EnableOverDrive+0x9c>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a0f      	ldr	r2, [pc, #60]	@ (8002740 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002702:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002706:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002708:	f7fe ff1e 	bl	8001548 <HAL_GetTick>
 800270c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800270e:	e009      	b.n	8002724 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002710:	f7fe ff1a 	bl	8001548 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800271e:	d901      	bls.n	8002724 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e007      	b.n	8002734 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002724:	4b06      	ldr	r3, [pc, #24]	@ (8002740 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800272c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002730:	d1ee      	bne.n	8002710 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002732:	2300      	movs	r3, #0
}
 8002734:	4618      	mov	r0, r3
 8002736:	3708      	adds	r7, #8
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	40023800 	.word	0x40023800
 8002740:	40007000 	.word	0x40007000

08002744 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800274c:	2300      	movs	r3, #0
 800274e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d101      	bne.n	800275a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e29b      	b.n	8002c92 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	2b00      	cmp	r3, #0
 8002764:	f000 8087 	beq.w	8002876 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002768:	4b96      	ldr	r3, [pc, #600]	@ (80029c4 <HAL_RCC_OscConfig+0x280>)
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f003 030c 	and.w	r3, r3, #12
 8002770:	2b04      	cmp	r3, #4
 8002772:	d00c      	beq.n	800278e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002774:	4b93      	ldr	r3, [pc, #588]	@ (80029c4 <HAL_RCC_OscConfig+0x280>)
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f003 030c 	and.w	r3, r3, #12
 800277c:	2b08      	cmp	r3, #8
 800277e:	d112      	bne.n	80027a6 <HAL_RCC_OscConfig+0x62>
 8002780:	4b90      	ldr	r3, [pc, #576]	@ (80029c4 <HAL_RCC_OscConfig+0x280>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002788:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800278c:	d10b      	bne.n	80027a6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800278e:	4b8d      	ldr	r3, [pc, #564]	@ (80029c4 <HAL_RCC_OscConfig+0x280>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d06c      	beq.n	8002874 <HAL_RCC_OscConfig+0x130>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d168      	bne.n	8002874 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e275      	b.n	8002c92 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027ae:	d106      	bne.n	80027be <HAL_RCC_OscConfig+0x7a>
 80027b0:	4b84      	ldr	r3, [pc, #528]	@ (80029c4 <HAL_RCC_OscConfig+0x280>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a83      	ldr	r2, [pc, #524]	@ (80029c4 <HAL_RCC_OscConfig+0x280>)
 80027b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027ba:	6013      	str	r3, [r2, #0]
 80027bc:	e02e      	b.n	800281c <HAL_RCC_OscConfig+0xd8>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d10c      	bne.n	80027e0 <HAL_RCC_OscConfig+0x9c>
 80027c6:	4b7f      	ldr	r3, [pc, #508]	@ (80029c4 <HAL_RCC_OscConfig+0x280>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a7e      	ldr	r2, [pc, #504]	@ (80029c4 <HAL_RCC_OscConfig+0x280>)
 80027cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027d0:	6013      	str	r3, [r2, #0]
 80027d2:	4b7c      	ldr	r3, [pc, #496]	@ (80029c4 <HAL_RCC_OscConfig+0x280>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a7b      	ldr	r2, [pc, #492]	@ (80029c4 <HAL_RCC_OscConfig+0x280>)
 80027d8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027dc:	6013      	str	r3, [r2, #0]
 80027de:	e01d      	b.n	800281c <HAL_RCC_OscConfig+0xd8>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80027e8:	d10c      	bne.n	8002804 <HAL_RCC_OscConfig+0xc0>
 80027ea:	4b76      	ldr	r3, [pc, #472]	@ (80029c4 <HAL_RCC_OscConfig+0x280>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a75      	ldr	r2, [pc, #468]	@ (80029c4 <HAL_RCC_OscConfig+0x280>)
 80027f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027f4:	6013      	str	r3, [r2, #0]
 80027f6:	4b73      	ldr	r3, [pc, #460]	@ (80029c4 <HAL_RCC_OscConfig+0x280>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a72      	ldr	r2, [pc, #456]	@ (80029c4 <HAL_RCC_OscConfig+0x280>)
 80027fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002800:	6013      	str	r3, [r2, #0]
 8002802:	e00b      	b.n	800281c <HAL_RCC_OscConfig+0xd8>
 8002804:	4b6f      	ldr	r3, [pc, #444]	@ (80029c4 <HAL_RCC_OscConfig+0x280>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a6e      	ldr	r2, [pc, #440]	@ (80029c4 <HAL_RCC_OscConfig+0x280>)
 800280a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800280e:	6013      	str	r3, [r2, #0]
 8002810:	4b6c      	ldr	r3, [pc, #432]	@ (80029c4 <HAL_RCC_OscConfig+0x280>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a6b      	ldr	r2, [pc, #428]	@ (80029c4 <HAL_RCC_OscConfig+0x280>)
 8002816:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800281a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d013      	beq.n	800284c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002824:	f7fe fe90 	bl	8001548 <HAL_GetTick>
 8002828:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800282a:	e008      	b.n	800283e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800282c:	f7fe fe8c 	bl	8001548 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	2b64      	cmp	r3, #100	@ 0x64
 8002838:	d901      	bls.n	800283e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e229      	b.n	8002c92 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800283e:	4b61      	ldr	r3, [pc, #388]	@ (80029c4 <HAL_RCC_OscConfig+0x280>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d0f0      	beq.n	800282c <HAL_RCC_OscConfig+0xe8>
 800284a:	e014      	b.n	8002876 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800284c:	f7fe fe7c 	bl	8001548 <HAL_GetTick>
 8002850:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002852:	e008      	b.n	8002866 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002854:	f7fe fe78 	bl	8001548 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b64      	cmp	r3, #100	@ 0x64
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e215      	b.n	8002c92 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002866:	4b57      	ldr	r3, [pc, #348]	@ (80029c4 <HAL_RCC_OscConfig+0x280>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d1f0      	bne.n	8002854 <HAL_RCC_OscConfig+0x110>
 8002872:	e000      	b.n	8002876 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002874:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	2b00      	cmp	r3, #0
 8002880:	d069      	beq.n	8002956 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002882:	4b50      	ldr	r3, [pc, #320]	@ (80029c4 <HAL_RCC_OscConfig+0x280>)
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	f003 030c 	and.w	r3, r3, #12
 800288a:	2b00      	cmp	r3, #0
 800288c:	d00b      	beq.n	80028a6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800288e:	4b4d      	ldr	r3, [pc, #308]	@ (80029c4 <HAL_RCC_OscConfig+0x280>)
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f003 030c 	and.w	r3, r3, #12
 8002896:	2b08      	cmp	r3, #8
 8002898:	d11c      	bne.n	80028d4 <HAL_RCC_OscConfig+0x190>
 800289a:	4b4a      	ldr	r3, [pc, #296]	@ (80029c4 <HAL_RCC_OscConfig+0x280>)
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d116      	bne.n	80028d4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028a6:	4b47      	ldr	r3, [pc, #284]	@ (80029c4 <HAL_RCC_OscConfig+0x280>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d005      	beq.n	80028be <HAL_RCC_OscConfig+0x17a>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d001      	beq.n	80028be <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e1e9      	b.n	8002c92 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028be:	4b41      	ldr	r3, [pc, #260]	@ (80029c4 <HAL_RCC_OscConfig+0x280>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	493d      	ldr	r1, [pc, #244]	@ (80029c4 <HAL_RCC_OscConfig+0x280>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028d2:	e040      	b.n	8002956 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d023      	beq.n	8002924 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028dc:	4b39      	ldr	r3, [pc, #228]	@ (80029c4 <HAL_RCC_OscConfig+0x280>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a38      	ldr	r2, [pc, #224]	@ (80029c4 <HAL_RCC_OscConfig+0x280>)
 80028e2:	f043 0301 	orr.w	r3, r3, #1
 80028e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e8:	f7fe fe2e 	bl	8001548 <HAL_GetTick>
 80028ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ee:	e008      	b.n	8002902 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028f0:	f7fe fe2a 	bl	8001548 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e1c7      	b.n	8002c92 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002902:	4b30      	ldr	r3, [pc, #192]	@ (80029c4 <HAL_RCC_OscConfig+0x280>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d0f0      	beq.n	80028f0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800290e:	4b2d      	ldr	r3, [pc, #180]	@ (80029c4 <HAL_RCC_OscConfig+0x280>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	00db      	lsls	r3, r3, #3
 800291c:	4929      	ldr	r1, [pc, #164]	@ (80029c4 <HAL_RCC_OscConfig+0x280>)
 800291e:	4313      	orrs	r3, r2
 8002920:	600b      	str	r3, [r1, #0]
 8002922:	e018      	b.n	8002956 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002924:	4b27      	ldr	r3, [pc, #156]	@ (80029c4 <HAL_RCC_OscConfig+0x280>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a26      	ldr	r2, [pc, #152]	@ (80029c4 <HAL_RCC_OscConfig+0x280>)
 800292a:	f023 0301 	bic.w	r3, r3, #1
 800292e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002930:	f7fe fe0a 	bl	8001548 <HAL_GetTick>
 8002934:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002936:	e008      	b.n	800294a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002938:	f7fe fe06 	bl	8001548 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	2b02      	cmp	r3, #2
 8002944:	d901      	bls.n	800294a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e1a3      	b.n	8002c92 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800294a:	4b1e      	ldr	r3, [pc, #120]	@ (80029c4 <HAL_RCC_OscConfig+0x280>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	2b00      	cmp	r3, #0
 8002954:	d1f0      	bne.n	8002938 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0308 	and.w	r3, r3, #8
 800295e:	2b00      	cmp	r3, #0
 8002960:	d038      	beq.n	80029d4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	695b      	ldr	r3, [r3, #20]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d019      	beq.n	800299e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800296a:	4b16      	ldr	r3, [pc, #88]	@ (80029c4 <HAL_RCC_OscConfig+0x280>)
 800296c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800296e:	4a15      	ldr	r2, [pc, #84]	@ (80029c4 <HAL_RCC_OscConfig+0x280>)
 8002970:	f043 0301 	orr.w	r3, r3, #1
 8002974:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002976:	f7fe fde7 	bl	8001548 <HAL_GetTick>
 800297a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800297c:	e008      	b.n	8002990 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800297e:	f7fe fde3 	bl	8001548 <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	2b02      	cmp	r3, #2
 800298a:	d901      	bls.n	8002990 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e180      	b.n	8002c92 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002990:	4b0c      	ldr	r3, [pc, #48]	@ (80029c4 <HAL_RCC_OscConfig+0x280>)
 8002992:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002994:	f003 0302 	and.w	r3, r3, #2
 8002998:	2b00      	cmp	r3, #0
 800299a:	d0f0      	beq.n	800297e <HAL_RCC_OscConfig+0x23a>
 800299c:	e01a      	b.n	80029d4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800299e:	4b09      	ldr	r3, [pc, #36]	@ (80029c4 <HAL_RCC_OscConfig+0x280>)
 80029a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029a2:	4a08      	ldr	r2, [pc, #32]	@ (80029c4 <HAL_RCC_OscConfig+0x280>)
 80029a4:	f023 0301 	bic.w	r3, r3, #1
 80029a8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029aa:	f7fe fdcd 	bl	8001548 <HAL_GetTick>
 80029ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029b0:	e00a      	b.n	80029c8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029b2:	f7fe fdc9 	bl	8001548 <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d903      	bls.n	80029c8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e166      	b.n	8002c92 <HAL_RCC_OscConfig+0x54e>
 80029c4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029c8:	4b92      	ldr	r3, [pc, #584]	@ (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 80029ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029cc:	f003 0302 	and.w	r3, r3, #2
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d1ee      	bne.n	80029b2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0304 	and.w	r3, r3, #4
 80029dc:	2b00      	cmp	r3, #0
 80029de:	f000 80a4 	beq.w	8002b2a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029e2:	4b8c      	ldr	r3, [pc, #560]	@ (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 80029e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d10d      	bne.n	8002a0a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80029ee:	4b89      	ldr	r3, [pc, #548]	@ (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 80029f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f2:	4a88      	ldr	r2, [pc, #544]	@ (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 80029f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80029fa:	4b86      	ldr	r3, [pc, #536]	@ (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 80029fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a02:	60bb      	str	r3, [r7, #8]
 8002a04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a06:	2301      	movs	r3, #1
 8002a08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a0a:	4b83      	ldr	r3, [pc, #524]	@ (8002c18 <HAL_RCC_OscConfig+0x4d4>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d118      	bne.n	8002a48 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002a16:	4b80      	ldr	r3, [pc, #512]	@ (8002c18 <HAL_RCC_OscConfig+0x4d4>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a7f      	ldr	r2, [pc, #508]	@ (8002c18 <HAL_RCC_OscConfig+0x4d4>)
 8002a1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a22:	f7fe fd91 	bl	8001548 <HAL_GetTick>
 8002a26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a28:	e008      	b.n	8002a3c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a2a:	f7fe fd8d 	bl	8001548 <HAL_GetTick>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	2b64      	cmp	r3, #100	@ 0x64
 8002a36:	d901      	bls.n	8002a3c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e12a      	b.n	8002c92 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a3c:	4b76      	ldr	r3, [pc, #472]	@ (8002c18 <HAL_RCC_OscConfig+0x4d4>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d0f0      	beq.n	8002a2a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d106      	bne.n	8002a5e <HAL_RCC_OscConfig+0x31a>
 8002a50:	4b70      	ldr	r3, [pc, #448]	@ (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 8002a52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a54:	4a6f      	ldr	r2, [pc, #444]	@ (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 8002a56:	f043 0301 	orr.w	r3, r3, #1
 8002a5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a5c:	e02d      	b.n	8002aba <HAL_RCC_OscConfig+0x376>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d10c      	bne.n	8002a80 <HAL_RCC_OscConfig+0x33c>
 8002a66:	4b6b      	ldr	r3, [pc, #428]	@ (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 8002a68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a6a:	4a6a      	ldr	r2, [pc, #424]	@ (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 8002a6c:	f023 0301 	bic.w	r3, r3, #1
 8002a70:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a72:	4b68      	ldr	r3, [pc, #416]	@ (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 8002a74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a76:	4a67      	ldr	r2, [pc, #412]	@ (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 8002a78:	f023 0304 	bic.w	r3, r3, #4
 8002a7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a7e:	e01c      	b.n	8002aba <HAL_RCC_OscConfig+0x376>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	2b05      	cmp	r3, #5
 8002a86:	d10c      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x35e>
 8002a88:	4b62      	ldr	r3, [pc, #392]	@ (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 8002a8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a8c:	4a61      	ldr	r2, [pc, #388]	@ (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 8002a8e:	f043 0304 	orr.w	r3, r3, #4
 8002a92:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a94:	4b5f      	ldr	r3, [pc, #380]	@ (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 8002a96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a98:	4a5e      	ldr	r2, [pc, #376]	@ (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 8002a9a:	f043 0301 	orr.w	r3, r3, #1
 8002a9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002aa0:	e00b      	b.n	8002aba <HAL_RCC_OscConfig+0x376>
 8002aa2:	4b5c      	ldr	r3, [pc, #368]	@ (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 8002aa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aa6:	4a5b      	ldr	r2, [pc, #364]	@ (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 8002aa8:	f023 0301 	bic.w	r3, r3, #1
 8002aac:	6713      	str	r3, [r2, #112]	@ 0x70
 8002aae:	4b59      	ldr	r3, [pc, #356]	@ (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 8002ab0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ab2:	4a58      	ldr	r2, [pc, #352]	@ (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 8002ab4:	f023 0304 	bic.w	r3, r3, #4
 8002ab8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d015      	beq.n	8002aee <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ac2:	f7fe fd41 	bl	8001548 <HAL_GetTick>
 8002ac6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ac8:	e00a      	b.n	8002ae0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aca:	f7fe fd3d 	bl	8001548 <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d901      	bls.n	8002ae0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e0d8      	b.n	8002c92 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ae0:	4b4c      	ldr	r3, [pc, #304]	@ (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 8002ae2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ae4:	f003 0302 	and.w	r3, r3, #2
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d0ee      	beq.n	8002aca <HAL_RCC_OscConfig+0x386>
 8002aec:	e014      	b.n	8002b18 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aee:	f7fe fd2b 	bl	8001548 <HAL_GetTick>
 8002af2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002af4:	e00a      	b.n	8002b0c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002af6:	f7fe fd27 	bl	8001548 <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d901      	bls.n	8002b0c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e0c2      	b.n	8002c92 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b0c:	4b41      	ldr	r3, [pc, #260]	@ (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 8002b0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b10:	f003 0302 	and.w	r3, r3, #2
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d1ee      	bne.n	8002af6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b18:	7dfb      	ldrb	r3, [r7, #23]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d105      	bne.n	8002b2a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b1e:	4b3d      	ldr	r3, [pc, #244]	@ (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 8002b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b22:	4a3c      	ldr	r2, [pc, #240]	@ (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 8002b24:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b28:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	699b      	ldr	r3, [r3, #24]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	f000 80ae 	beq.w	8002c90 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b34:	4b37      	ldr	r3, [pc, #220]	@ (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f003 030c 	and.w	r3, r3, #12
 8002b3c:	2b08      	cmp	r3, #8
 8002b3e:	d06d      	beq.n	8002c1c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d14b      	bne.n	8002be0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b48:	4b32      	ldr	r3, [pc, #200]	@ (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a31      	ldr	r2, [pc, #196]	@ (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 8002b4e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b54:	f7fe fcf8 	bl	8001548 <HAL_GetTick>
 8002b58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b5a:	e008      	b.n	8002b6e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b5c:	f7fe fcf4 	bl	8001548 <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d901      	bls.n	8002b6e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e091      	b.n	8002c92 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b6e:	4b29      	ldr	r3, [pc, #164]	@ (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d1f0      	bne.n	8002b5c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	69da      	ldr	r2, [r3, #28]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a1b      	ldr	r3, [r3, #32]
 8002b82:	431a      	orrs	r2, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b88:	019b      	lsls	r3, r3, #6
 8002b8a:	431a      	orrs	r2, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b90:	085b      	lsrs	r3, r3, #1
 8002b92:	3b01      	subs	r3, #1
 8002b94:	041b      	lsls	r3, r3, #16
 8002b96:	431a      	orrs	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b9c:	061b      	lsls	r3, r3, #24
 8002b9e:	431a      	orrs	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ba4:	071b      	lsls	r3, r3, #28
 8002ba6:	491b      	ldr	r1, [pc, #108]	@ (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bac:	4b19      	ldr	r3, [pc, #100]	@ (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a18      	ldr	r2, [pc, #96]	@ (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 8002bb2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002bb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb8:	f7fe fcc6 	bl	8001548 <HAL_GetTick>
 8002bbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bbe:	e008      	b.n	8002bd2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bc0:	f7fe fcc2 	bl	8001548 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e05f      	b.n	8002c92 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bd2:	4b10      	ldr	r3, [pc, #64]	@ (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d0f0      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x47c>
 8002bde:	e057      	b.n	8002c90 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002be0:	4b0c      	ldr	r3, [pc, #48]	@ (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a0b      	ldr	r2, [pc, #44]	@ (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 8002be6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002bea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bec:	f7fe fcac 	bl	8001548 <HAL_GetTick>
 8002bf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bf2:	e008      	b.n	8002c06 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bf4:	f7fe fca8 	bl	8001548 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e045      	b.n	8002c92 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c06:	4b03      	ldr	r3, [pc, #12]	@ (8002c14 <HAL_RCC_OscConfig+0x4d0>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d1f0      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x4b0>
 8002c12:	e03d      	b.n	8002c90 <HAL_RCC_OscConfig+0x54c>
 8002c14:	40023800 	.word	0x40023800
 8002c18:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002c1c:	4b1f      	ldr	r3, [pc, #124]	@ (8002c9c <HAL_RCC_OscConfig+0x558>)
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	699b      	ldr	r3, [r3, #24]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d030      	beq.n	8002c8c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d129      	bne.n	8002c8c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d122      	bne.n	8002c8c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c46:	68fa      	ldr	r2, [r7, #12]
 8002c48:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002c52:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d119      	bne.n	8002c8c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c62:	085b      	lsrs	r3, r3, #1
 8002c64:	3b01      	subs	r3, #1
 8002c66:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d10f      	bne.n	8002c8c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c76:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d107      	bne.n	8002c8c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c86:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d001      	beq.n	8002c90 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e000      	b.n	8002c92 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3718      	adds	r7, #24
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	40023800 	.word	0x40023800

08002ca0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002caa:	2300      	movs	r3, #0
 8002cac:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d101      	bne.n	8002cb8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e0d0      	b.n	8002e5a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cb8:	4b6a      	ldr	r3, [pc, #424]	@ (8002e64 <HAL_RCC_ClockConfig+0x1c4>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 030f 	and.w	r3, r3, #15
 8002cc0:	683a      	ldr	r2, [r7, #0]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d910      	bls.n	8002ce8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cc6:	4b67      	ldr	r3, [pc, #412]	@ (8002e64 <HAL_RCC_ClockConfig+0x1c4>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f023 020f 	bic.w	r2, r3, #15
 8002cce:	4965      	ldr	r1, [pc, #404]	@ (8002e64 <HAL_RCC_ClockConfig+0x1c4>)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cd6:	4b63      	ldr	r3, [pc, #396]	@ (8002e64 <HAL_RCC_ClockConfig+0x1c4>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 030f 	and.w	r3, r3, #15
 8002cde:	683a      	ldr	r2, [r7, #0]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d001      	beq.n	8002ce8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e0b8      	b.n	8002e5a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0302 	and.w	r3, r3, #2
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d020      	beq.n	8002d36 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0304 	and.w	r3, r3, #4
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d005      	beq.n	8002d0c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d00:	4b59      	ldr	r3, [pc, #356]	@ (8002e68 <HAL_RCC_ClockConfig+0x1c8>)
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	4a58      	ldr	r2, [pc, #352]	@ (8002e68 <HAL_RCC_ClockConfig+0x1c8>)
 8002d06:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002d0a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0308 	and.w	r3, r3, #8
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d005      	beq.n	8002d24 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d18:	4b53      	ldr	r3, [pc, #332]	@ (8002e68 <HAL_RCC_ClockConfig+0x1c8>)
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	4a52      	ldr	r2, [pc, #328]	@ (8002e68 <HAL_RCC_ClockConfig+0x1c8>)
 8002d1e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002d22:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d24:	4b50      	ldr	r3, [pc, #320]	@ (8002e68 <HAL_RCC_ClockConfig+0x1c8>)
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	494d      	ldr	r1, [pc, #308]	@ (8002e68 <HAL_RCC_ClockConfig+0x1c8>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0301 	and.w	r3, r3, #1
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d040      	beq.n	8002dc4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d107      	bne.n	8002d5a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d4a:	4b47      	ldr	r3, [pc, #284]	@ (8002e68 <HAL_RCC_ClockConfig+0x1c8>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d115      	bne.n	8002d82 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e07f      	b.n	8002e5a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d107      	bne.n	8002d72 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d62:	4b41      	ldr	r3, [pc, #260]	@ (8002e68 <HAL_RCC_ClockConfig+0x1c8>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d109      	bne.n	8002d82 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e073      	b.n	8002e5a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d72:	4b3d      	ldr	r3, [pc, #244]	@ (8002e68 <HAL_RCC_ClockConfig+0x1c8>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0302 	and.w	r3, r3, #2
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d101      	bne.n	8002d82 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e06b      	b.n	8002e5a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d82:	4b39      	ldr	r3, [pc, #228]	@ (8002e68 <HAL_RCC_ClockConfig+0x1c8>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f023 0203 	bic.w	r2, r3, #3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	4936      	ldr	r1, [pc, #216]	@ (8002e68 <HAL_RCC_ClockConfig+0x1c8>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d94:	f7fe fbd8 	bl	8001548 <HAL_GetTick>
 8002d98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d9a:	e00a      	b.n	8002db2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d9c:	f7fe fbd4 	bl	8001548 <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d901      	bls.n	8002db2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e053      	b.n	8002e5a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002db2:	4b2d      	ldr	r3, [pc, #180]	@ (8002e68 <HAL_RCC_ClockConfig+0x1c8>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f003 020c 	and.w	r2, r3, #12
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d1eb      	bne.n	8002d9c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002dc4:	4b27      	ldr	r3, [pc, #156]	@ (8002e64 <HAL_RCC_ClockConfig+0x1c4>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 030f 	and.w	r3, r3, #15
 8002dcc:	683a      	ldr	r2, [r7, #0]
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d210      	bcs.n	8002df4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dd2:	4b24      	ldr	r3, [pc, #144]	@ (8002e64 <HAL_RCC_ClockConfig+0x1c4>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f023 020f 	bic.w	r2, r3, #15
 8002dda:	4922      	ldr	r1, [pc, #136]	@ (8002e64 <HAL_RCC_ClockConfig+0x1c4>)
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002de2:	4b20      	ldr	r3, [pc, #128]	@ (8002e64 <HAL_RCC_ClockConfig+0x1c4>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 030f 	and.w	r3, r3, #15
 8002dea:	683a      	ldr	r2, [r7, #0]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d001      	beq.n	8002df4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e032      	b.n	8002e5a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0304 	and.w	r3, r3, #4
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d008      	beq.n	8002e12 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e00:	4b19      	ldr	r3, [pc, #100]	@ (8002e68 <HAL_RCC_ClockConfig+0x1c8>)
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	4916      	ldr	r1, [pc, #88]	@ (8002e68 <HAL_RCC_ClockConfig+0x1c8>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0308 	and.w	r3, r3, #8
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d009      	beq.n	8002e32 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e1e:	4b12      	ldr	r3, [pc, #72]	@ (8002e68 <HAL_RCC_ClockConfig+0x1c8>)
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	490e      	ldr	r1, [pc, #56]	@ (8002e68 <HAL_RCC_ClockConfig+0x1c8>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e32:	f000 f821 	bl	8002e78 <HAL_RCC_GetSysClockFreq>
 8002e36:	4602      	mov	r2, r0
 8002e38:	4b0b      	ldr	r3, [pc, #44]	@ (8002e68 <HAL_RCC_ClockConfig+0x1c8>)
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	091b      	lsrs	r3, r3, #4
 8002e3e:	f003 030f 	and.w	r3, r3, #15
 8002e42:	490a      	ldr	r1, [pc, #40]	@ (8002e6c <HAL_RCC_ClockConfig+0x1cc>)
 8002e44:	5ccb      	ldrb	r3, [r1, r3]
 8002e46:	fa22 f303 	lsr.w	r3, r2, r3
 8002e4a:	4a09      	ldr	r2, [pc, #36]	@ (8002e70 <HAL_RCC_ClockConfig+0x1d0>)
 8002e4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e4e:	4b09      	ldr	r3, [pc, #36]	@ (8002e74 <HAL_RCC_ClockConfig+0x1d4>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7fe f9c8 	bl	80011e8 <HAL_InitTick>

  return HAL_OK;
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3710      	adds	r7, #16
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	40023c00 	.word	0x40023c00
 8002e68:	40023800 	.word	0x40023800
 8002e6c:	08009720 	.word	0x08009720
 8002e70:	20000000 	.word	0x20000000
 8002e74:	20000004 	.word	0x20000004

08002e78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e7c:	b094      	sub	sp, #80	@ 0x50
 8002e7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002e80:	2300      	movs	r3, #0
 8002e82:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e84:	2300      	movs	r3, #0
 8002e86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e88:	2300      	movs	r3, #0
 8002e8a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e90:	4b79      	ldr	r3, [pc, #484]	@ (8003078 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	f003 030c 	and.w	r3, r3, #12
 8002e98:	2b08      	cmp	r3, #8
 8002e9a:	d00d      	beq.n	8002eb8 <HAL_RCC_GetSysClockFreq+0x40>
 8002e9c:	2b08      	cmp	r3, #8
 8002e9e:	f200 80e1 	bhi.w	8003064 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d002      	beq.n	8002eac <HAL_RCC_GetSysClockFreq+0x34>
 8002ea6:	2b04      	cmp	r3, #4
 8002ea8:	d003      	beq.n	8002eb2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002eaa:	e0db      	b.n	8003064 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002eac:	4b73      	ldr	r3, [pc, #460]	@ (800307c <HAL_RCC_GetSysClockFreq+0x204>)
 8002eae:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002eb0:	e0db      	b.n	800306a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002eb2:	4b73      	ldr	r3, [pc, #460]	@ (8003080 <HAL_RCC_GetSysClockFreq+0x208>)
 8002eb4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002eb6:	e0d8      	b.n	800306a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002eb8:	4b6f      	ldr	r3, [pc, #444]	@ (8003078 <HAL_RCC_GetSysClockFreq+0x200>)
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ec0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002ec2:	4b6d      	ldr	r3, [pc, #436]	@ (8003078 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d063      	beq.n	8002f96 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ece:	4b6a      	ldr	r3, [pc, #424]	@ (8003078 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	099b      	lsrs	r3, r3, #6
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002ed8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002eda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002edc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ee0:	633b      	str	r3, [r7, #48]	@ 0x30
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ee6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002eea:	4622      	mov	r2, r4
 8002eec:	462b      	mov	r3, r5
 8002eee:	f04f 0000 	mov.w	r0, #0
 8002ef2:	f04f 0100 	mov.w	r1, #0
 8002ef6:	0159      	lsls	r1, r3, #5
 8002ef8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002efc:	0150      	lsls	r0, r2, #5
 8002efe:	4602      	mov	r2, r0
 8002f00:	460b      	mov	r3, r1
 8002f02:	4621      	mov	r1, r4
 8002f04:	1a51      	subs	r1, r2, r1
 8002f06:	6139      	str	r1, [r7, #16]
 8002f08:	4629      	mov	r1, r5
 8002f0a:	eb63 0301 	sbc.w	r3, r3, r1
 8002f0e:	617b      	str	r3, [r7, #20]
 8002f10:	f04f 0200 	mov.w	r2, #0
 8002f14:	f04f 0300 	mov.w	r3, #0
 8002f18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f1c:	4659      	mov	r1, fp
 8002f1e:	018b      	lsls	r3, r1, #6
 8002f20:	4651      	mov	r1, sl
 8002f22:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f26:	4651      	mov	r1, sl
 8002f28:	018a      	lsls	r2, r1, #6
 8002f2a:	4651      	mov	r1, sl
 8002f2c:	ebb2 0801 	subs.w	r8, r2, r1
 8002f30:	4659      	mov	r1, fp
 8002f32:	eb63 0901 	sbc.w	r9, r3, r1
 8002f36:	f04f 0200 	mov.w	r2, #0
 8002f3a:	f04f 0300 	mov.w	r3, #0
 8002f3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f4a:	4690      	mov	r8, r2
 8002f4c:	4699      	mov	r9, r3
 8002f4e:	4623      	mov	r3, r4
 8002f50:	eb18 0303 	adds.w	r3, r8, r3
 8002f54:	60bb      	str	r3, [r7, #8]
 8002f56:	462b      	mov	r3, r5
 8002f58:	eb49 0303 	adc.w	r3, r9, r3
 8002f5c:	60fb      	str	r3, [r7, #12]
 8002f5e:	f04f 0200 	mov.w	r2, #0
 8002f62:	f04f 0300 	mov.w	r3, #0
 8002f66:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f6a:	4629      	mov	r1, r5
 8002f6c:	024b      	lsls	r3, r1, #9
 8002f6e:	4621      	mov	r1, r4
 8002f70:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f74:	4621      	mov	r1, r4
 8002f76:	024a      	lsls	r2, r1, #9
 8002f78:	4610      	mov	r0, r2
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f7e:	2200      	movs	r2, #0
 8002f80:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f82:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002f84:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002f88:	f7fd f9aa 	bl	80002e0 <__aeabi_uldivmod>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	460b      	mov	r3, r1
 8002f90:	4613      	mov	r3, r2
 8002f92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f94:	e058      	b.n	8003048 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f96:	4b38      	ldr	r3, [pc, #224]	@ (8003078 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	099b      	lsrs	r3, r3, #6
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	4611      	mov	r1, r2
 8002fa2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002fa6:	623b      	str	r3, [r7, #32]
 8002fa8:	2300      	movs	r3, #0
 8002faa:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002fb0:	4642      	mov	r2, r8
 8002fb2:	464b      	mov	r3, r9
 8002fb4:	f04f 0000 	mov.w	r0, #0
 8002fb8:	f04f 0100 	mov.w	r1, #0
 8002fbc:	0159      	lsls	r1, r3, #5
 8002fbe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fc2:	0150      	lsls	r0, r2, #5
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	460b      	mov	r3, r1
 8002fc8:	4641      	mov	r1, r8
 8002fca:	ebb2 0a01 	subs.w	sl, r2, r1
 8002fce:	4649      	mov	r1, r9
 8002fd0:	eb63 0b01 	sbc.w	fp, r3, r1
 8002fd4:	f04f 0200 	mov.w	r2, #0
 8002fd8:	f04f 0300 	mov.w	r3, #0
 8002fdc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002fe0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002fe4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002fe8:	ebb2 040a 	subs.w	r4, r2, sl
 8002fec:	eb63 050b 	sbc.w	r5, r3, fp
 8002ff0:	f04f 0200 	mov.w	r2, #0
 8002ff4:	f04f 0300 	mov.w	r3, #0
 8002ff8:	00eb      	lsls	r3, r5, #3
 8002ffa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ffe:	00e2      	lsls	r2, r4, #3
 8003000:	4614      	mov	r4, r2
 8003002:	461d      	mov	r5, r3
 8003004:	4643      	mov	r3, r8
 8003006:	18e3      	adds	r3, r4, r3
 8003008:	603b      	str	r3, [r7, #0]
 800300a:	464b      	mov	r3, r9
 800300c:	eb45 0303 	adc.w	r3, r5, r3
 8003010:	607b      	str	r3, [r7, #4]
 8003012:	f04f 0200 	mov.w	r2, #0
 8003016:	f04f 0300 	mov.w	r3, #0
 800301a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800301e:	4629      	mov	r1, r5
 8003020:	028b      	lsls	r3, r1, #10
 8003022:	4621      	mov	r1, r4
 8003024:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003028:	4621      	mov	r1, r4
 800302a:	028a      	lsls	r2, r1, #10
 800302c:	4610      	mov	r0, r2
 800302e:	4619      	mov	r1, r3
 8003030:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003032:	2200      	movs	r2, #0
 8003034:	61bb      	str	r3, [r7, #24]
 8003036:	61fa      	str	r2, [r7, #28]
 8003038:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800303c:	f7fd f950 	bl	80002e0 <__aeabi_uldivmod>
 8003040:	4602      	mov	r2, r0
 8003042:	460b      	mov	r3, r1
 8003044:	4613      	mov	r3, r2
 8003046:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003048:	4b0b      	ldr	r3, [pc, #44]	@ (8003078 <HAL_RCC_GetSysClockFreq+0x200>)
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	0c1b      	lsrs	r3, r3, #16
 800304e:	f003 0303 	and.w	r3, r3, #3
 8003052:	3301      	adds	r3, #1
 8003054:	005b      	lsls	r3, r3, #1
 8003056:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003058:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800305a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800305c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003060:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003062:	e002      	b.n	800306a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003064:	4b05      	ldr	r3, [pc, #20]	@ (800307c <HAL_RCC_GetSysClockFreq+0x204>)
 8003066:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003068:	bf00      	nop
    }
  }
  return sysclockfreq;
 800306a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800306c:	4618      	mov	r0, r3
 800306e:	3750      	adds	r7, #80	@ 0x50
 8003070:	46bd      	mov	sp, r7
 8003072:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003076:	bf00      	nop
 8003078:	40023800 	.word	0x40023800
 800307c:	00f42400 	.word	0x00f42400
 8003080:	007a1200 	.word	0x007a1200

08003084 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003084:	b480      	push	{r7}
 8003086:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003088:	4b03      	ldr	r3, [pc, #12]	@ (8003098 <HAL_RCC_GetHCLKFreq+0x14>)
 800308a:	681b      	ldr	r3, [r3, #0]
}
 800308c:	4618      	mov	r0, r3
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr
 8003096:	bf00      	nop
 8003098:	20000000 	.word	0x20000000

0800309c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80030a0:	f7ff fff0 	bl	8003084 <HAL_RCC_GetHCLKFreq>
 80030a4:	4602      	mov	r2, r0
 80030a6:	4b05      	ldr	r3, [pc, #20]	@ (80030bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	0a9b      	lsrs	r3, r3, #10
 80030ac:	f003 0307 	and.w	r3, r3, #7
 80030b0:	4903      	ldr	r1, [pc, #12]	@ (80030c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030b2:	5ccb      	ldrb	r3, [r1, r3]
 80030b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	40023800 	.word	0x40023800
 80030c0:	08009730 	.word	0x08009730

080030c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80030c8:	f7ff ffdc 	bl	8003084 <HAL_RCC_GetHCLKFreq>
 80030cc:	4602      	mov	r2, r0
 80030ce:	4b05      	ldr	r3, [pc, #20]	@ (80030e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	0b5b      	lsrs	r3, r3, #13
 80030d4:	f003 0307 	and.w	r3, r3, #7
 80030d8:	4903      	ldr	r1, [pc, #12]	@ (80030e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030da:	5ccb      	ldrb	r3, [r1, r3]
 80030dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	40023800 	.word	0x40023800
 80030e8:	08009730 	.word	0x08009730

080030ec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	220f      	movs	r2, #15
 80030fa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80030fc:	4b12      	ldr	r3, [pc, #72]	@ (8003148 <HAL_RCC_GetClockConfig+0x5c>)
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f003 0203 	and.w	r2, r3, #3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003108:	4b0f      	ldr	r3, [pc, #60]	@ (8003148 <HAL_RCC_GetClockConfig+0x5c>)
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003114:	4b0c      	ldr	r3, [pc, #48]	@ (8003148 <HAL_RCC_GetClockConfig+0x5c>)
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003120:	4b09      	ldr	r3, [pc, #36]	@ (8003148 <HAL_RCC_GetClockConfig+0x5c>)
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	08db      	lsrs	r3, r3, #3
 8003126:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800312e:	4b07      	ldr	r3, [pc, #28]	@ (800314c <HAL_RCC_GetClockConfig+0x60>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 020f 	and.w	r2, r3, #15
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	601a      	str	r2, [r3, #0]
}
 800313a:	bf00      	nop
 800313c:	370c      	adds	r7, #12
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop
 8003148:	40023800 	.word	0x40023800
 800314c:	40023c00 	.word	0x40023c00

08003150 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b088      	sub	sp, #32
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003158:	2300      	movs	r3, #0
 800315a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800315c:	2300      	movs	r3, #0
 800315e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003160:	2300      	movs	r3, #0
 8003162:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003164:	2300      	movs	r3, #0
 8003166:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003168:	2300      	movs	r3, #0
 800316a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0301 	and.w	r3, r3, #1
 8003174:	2b00      	cmp	r3, #0
 8003176:	d012      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003178:	4b69      	ldr	r3, [pc, #420]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	4a68      	ldr	r2, [pc, #416]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800317e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003182:	6093      	str	r3, [r2, #8]
 8003184:	4b66      	ldr	r3, [pc, #408]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003186:	689a      	ldr	r2, [r3, #8]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800318c:	4964      	ldr	r1, [pc, #400]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800318e:	4313      	orrs	r3, r2
 8003190:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003196:	2b00      	cmp	r3, #0
 8003198:	d101      	bne.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800319a:	2301      	movs	r3, #1
 800319c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d017      	beq.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80031aa:	4b5d      	ldr	r3, [pc, #372]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80031b0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031b8:	4959      	ldr	r1, [pc, #356]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031c4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80031c8:	d101      	bne.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80031ca:	2301      	movs	r3, #1
 80031cc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d101      	bne.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80031d6:	2301      	movs	r3, #1
 80031d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d017      	beq.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80031e6:	4b4e      	ldr	r3, [pc, #312]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80031ec:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f4:	494a      	ldr	r1, [pc, #296]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003200:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003204:	d101      	bne.n	800320a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003206:	2301      	movs	r3, #1
 8003208:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800320e:	2b00      	cmp	r3, #0
 8003210:	d101      	bne.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003212:	2301      	movs	r3, #1
 8003214:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d001      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003222:	2301      	movs	r3, #1
 8003224:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0320 	and.w	r3, r3, #32
 800322e:	2b00      	cmp	r3, #0
 8003230:	f000 808b 	beq.w	800334a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003234:	4b3a      	ldr	r3, [pc, #232]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003238:	4a39      	ldr	r2, [pc, #228]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800323a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800323e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003240:	4b37      	ldr	r3, [pc, #220]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003244:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003248:	60bb      	str	r3, [r7, #8]
 800324a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800324c:	4b35      	ldr	r3, [pc, #212]	@ (8003324 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a34      	ldr	r2, [pc, #208]	@ (8003324 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003252:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003256:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003258:	f7fe f976 	bl	8001548 <HAL_GetTick>
 800325c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800325e:	e008      	b.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003260:	f7fe f972 	bl	8001548 <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b64      	cmp	r3, #100	@ 0x64
 800326c:	d901      	bls.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e38f      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003272:	4b2c      	ldr	r3, [pc, #176]	@ (8003324 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800327a:	2b00      	cmp	r3, #0
 800327c:	d0f0      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800327e:	4b28      	ldr	r3, [pc, #160]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003280:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003282:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003286:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d035      	beq.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003292:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003296:	693a      	ldr	r2, [r7, #16]
 8003298:	429a      	cmp	r2, r3
 800329a:	d02e      	beq.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800329c:	4b20      	ldr	r3, [pc, #128]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800329e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032a4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80032a6:	4b1e      	ldr	r3, [pc, #120]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032aa:	4a1d      	ldr	r2, [pc, #116]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032b0:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032b2:	4b1b      	ldr	r3, [pc, #108]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032b6:	4a1a      	ldr	r2, [pc, #104]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032bc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80032be:	4a18      	ldr	r2, [pc, #96]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80032c4:	4b16      	ldr	r3, [pc, #88]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032c8:	f003 0301 	and.w	r3, r3, #1
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d114      	bne.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d0:	f7fe f93a 	bl	8001548 <HAL_GetTick>
 80032d4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032d6:	e00a      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032d8:	f7fe f936 	bl	8001548 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d901      	bls.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e351      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032ee:	4b0c      	ldr	r3, [pc, #48]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d0ee      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003302:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003306:	d111      	bne.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003308:	4b05      	ldr	r3, [pc, #20]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003314:	4b04      	ldr	r3, [pc, #16]	@ (8003328 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003316:	400b      	ands	r3, r1
 8003318:	4901      	ldr	r1, [pc, #4]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800331a:	4313      	orrs	r3, r2
 800331c:	608b      	str	r3, [r1, #8]
 800331e:	e00b      	b.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003320:	40023800 	.word	0x40023800
 8003324:	40007000 	.word	0x40007000
 8003328:	0ffffcff 	.word	0x0ffffcff
 800332c:	4bac      	ldr	r3, [pc, #688]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	4aab      	ldr	r2, [pc, #684]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003332:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003336:	6093      	str	r3, [r2, #8]
 8003338:	4ba9      	ldr	r3, [pc, #676]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800333a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003340:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003344:	49a6      	ldr	r1, [pc, #664]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003346:	4313      	orrs	r3, r2
 8003348:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0310 	and.w	r3, r3, #16
 8003352:	2b00      	cmp	r3, #0
 8003354:	d010      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003356:	4ba2      	ldr	r3, [pc, #648]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003358:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800335c:	4aa0      	ldr	r2, [pc, #640]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800335e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003362:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003366:	4b9e      	ldr	r3, [pc, #632]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003368:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003370:	499b      	ldr	r1, [pc, #620]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003372:	4313      	orrs	r3, r2
 8003374:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d00a      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003384:	4b96      	ldr	r3, [pc, #600]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003386:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800338a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003392:	4993      	ldr	r1, [pc, #588]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003394:	4313      	orrs	r3, r2
 8003396:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d00a      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80033a6:	4b8e      	ldr	r3, [pc, #568]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033ac:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80033b4:	498a      	ldr	r1, [pc, #552]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d00a      	beq.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80033c8:	4b85      	ldr	r3, [pc, #532]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033ce:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033d6:	4982      	ldr	r1, [pc, #520]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033d8:	4313      	orrs	r3, r2
 80033da:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d00a      	beq.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80033ea:	4b7d      	ldr	r3, [pc, #500]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033f0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033f8:	4979      	ldr	r1, [pc, #484]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033fa:	4313      	orrs	r3, r2
 80033fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003408:	2b00      	cmp	r3, #0
 800340a:	d00a      	beq.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800340c:	4b74      	ldr	r3, [pc, #464]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800340e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003412:	f023 0203 	bic.w	r2, r3, #3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800341a:	4971      	ldr	r1, [pc, #452]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800341c:	4313      	orrs	r3, r2
 800341e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00a      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800342e:	4b6c      	ldr	r3, [pc, #432]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003430:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003434:	f023 020c 	bic.w	r2, r3, #12
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800343c:	4968      	ldr	r1, [pc, #416]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800343e:	4313      	orrs	r3, r2
 8003440:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800344c:	2b00      	cmp	r3, #0
 800344e:	d00a      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003450:	4b63      	ldr	r3, [pc, #396]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003452:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003456:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800345e:	4960      	ldr	r1, [pc, #384]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003460:	4313      	orrs	r3, r2
 8003462:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800346e:	2b00      	cmp	r3, #0
 8003470:	d00a      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003472:	4b5b      	ldr	r3, [pc, #364]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003474:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003478:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003480:	4957      	ldr	r1, [pc, #348]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003482:	4313      	orrs	r3, r2
 8003484:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003490:	2b00      	cmp	r3, #0
 8003492:	d00a      	beq.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003494:	4b52      	ldr	r3, [pc, #328]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003496:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800349a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034a2:	494f      	ldr	r1, [pc, #316]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034a4:	4313      	orrs	r3, r2
 80034a6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d00a      	beq.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80034b6:	4b4a      	ldr	r3, [pc, #296]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034bc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034c4:	4946      	ldr	r1, [pc, #280]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034c6:	4313      	orrs	r3, r2
 80034c8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d00a      	beq.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80034d8:	4b41      	ldr	r3, [pc, #260]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034de:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034e6:	493e      	ldr	r1, [pc, #248]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034e8:	4313      	orrs	r3, r2
 80034ea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d00a      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80034fa:	4b39      	ldr	r3, [pc, #228]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003500:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003508:	4935      	ldr	r1, [pc, #212]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800350a:	4313      	orrs	r3, r2
 800350c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003518:	2b00      	cmp	r3, #0
 800351a:	d00a      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800351c:	4b30      	ldr	r3, [pc, #192]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800351e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003522:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800352a:	492d      	ldr	r1, [pc, #180]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800352c:	4313      	orrs	r3, r2
 800352e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d011      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800353e:	4b28      	ldr	r3, [pc, #160]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003540:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003544:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800354c:	4924      	ldr	r1, [pc, #144]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800354e:	4313      	orrs	r3, r2
 8003550:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003558:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800355c:	d101      	bne.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800355e:	2301      	movs	r3, #1
 8003560:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0308 	and.w	r3, r3, #8
 800356a:	2b00      	cmp	r3, #0
 800356c:	d001      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800356e:	2301      	movs	r3, #1
 8003570:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00a      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800357e:	4b18      	ldr	r3, [pc, #96]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003580:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003584:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800358c:	4914      	ldr	r1, [pc, #80]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800358e:	4313      	orrs	r3, r2
 8003590:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d00b      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80035a0:	4b0f      	ldr	r3, [pc, #60]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035a6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80035b0:	490b      	ldr	r1, [pc, #44]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d00f      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80035c4:	4b06      	ldr	r3, [pc, #24]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035ca:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035d4:	4902      	ldr	r1, [pc, #8]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80035dc:	e002      	b.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80035de:	bf00      	nop
 80035e0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d00b      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80035f0:	4b8a      	ldr	r3, [pc, #552]	@ (800381c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80035f6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003600:	4986      	ldr	r1, [pc, #536]	@ (800381c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003602:	4313      	orrs	r3, r2
 8003604:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d00b      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003614:	4b81      	ldr	r3, [pc, #516]	@ (800381c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003616:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800361a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003624:	497d      	ldr	r1, [pc, #500]	@ (800381c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003626:	4313      	orrs	r3, r2
 8003628:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	2b01      	cmp	r3, #1
 8003630:	d006      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800363a:	2b00      	cmp	r3, #0
 800363c:	f000 80d6 	beq.w	80037ec <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003640:	4b76      	ldr	r3, [pc, #472]	@ (800381c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a75      	ldr	r2, [pc, #468]	@ (800381c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003646:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800364a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800364c:	f7fd ff7c 	bl	8001548 <HAL_GetTick>
 8003650:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003652:	e008      	b.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003654:	f7fd ff78 	bl	8001548 <HAL_GetTick>
 8003658:	4602      	mov	r2, r0
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	2b64      	cmp	r3, #100	@ 0x64
 8003660:	d901      	bls.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e195      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003666:	4b6d      	ldr	r3, [pc, #436]	@ (800381c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d1f0      	bne.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0301 	and.w	r3, r3, #1
 800367a:	2b00      	cmp	r3, #0
 800367c:	d021      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003682:	2b00      	cmp	r3, #0
 8003684:	d11d      	bne.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003686:	4b65      	ldr	r3, [pc, #404]	@ (800381c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003688:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800368c:	0c1b      	lsrs	r3, r3, #16
 800368e:	f003 0303 	and.w	r3, r3, #3
 8003692:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003694:	4b61      	ldr	r3, [pc, #388]	@ (800381c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003696:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800369a:	0e1b      	lsrs	r3, r3, #24
 800369c:	f003 030f 	and.w	r3, r3, #15
 80036a0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	019a      	lsls	r2, r3, #6
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	041b      	lsls	r3, r3, #16
 80036ac:	431a      	orrs	r2, r3
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	061b      	lsls	r3, r3, #24
 80036b2:	431a      	orrs	r2, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	071b      	lsls	r3, r3, #28
 80036ba:	4958      	ldr	r1, [pc, #352]	@ (800381c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d004      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80036d6:	d00a      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d02e      	beq.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80036ec:	d129      	bne.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80036ee:	4b4b      	ldr	r3, [pc, #300]	@ (800381c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036f4:	0c1b      	lsrs	r3, r3, #16
 80036f6:	f003 0303 	and.w	r3, r3, #3
 80036fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80036fc:	4b47      	ldr	r3, [pc, #284]	@ (800381c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003702:	0f1b      	lsrs	r3, r3, #28
 8003704:	f003 0307 	and.w	r3, r3, #7
 8003708:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	019a      	lsls	r2, r3, #6
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	041b      	lsls	r3, r3, #16
 8003714:	431a      	orrs	r2, r3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	061b      	lsls	r3, r3, #24
 800371c:	431a      	orrs	r2, r3
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	071b      	lsls	r3, r3, #28
 8003722:	493e      	ldr	r1, [pc, #248]	@ (800381c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003724:	4313      	orrs	r3, r2
 8003726:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800372a:	4b3c      	ldr	r3, [pc, #240]	@ (800381c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800372c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003730:	f023 021f 	bic.w	r2, r3, #31
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003738:	3b01      	subs	r3, #1
 800373a:	4938      	ldr	r1, [pc, #224]	@ (800381c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800373c:	4313      	orrs	r3, r2
 800373e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d01d      	beq.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800374e:	4b33      	ldr	r3, [pc, #204]	@ (800381c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003750:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003754:	0e1b      	lsrs	r3, r3, #24
 8003756:	f003 030f 	and.w	r3, r3, #15
 800375a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800375c:	4b2f      	ldr	r3, [pc, #188]	@ (800381c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800375e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003762:	0f1b      	lsrs	r3, r3, #28
 8003764:	f003 0307 	and.w	r3, r3, #7
 8003768:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	019a      	lsls	r2, r3, #6
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	691b      	ldr	r3, [r3, #16]
 8003774:	041b      	lsls	r3, r3, #16
 8003776:	431a      	orrs	r2, r3
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	061b      	lsls	r3, r3, #24
 800377c:	431a      	orrs	r2, r3
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	071b      	lsls	r3, r3, #28
 8003782:	4926      	ldr	r1, [pc, #152]	@ (800381c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003784:	4313      	orrs	r3, r2
 8003786:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d011      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	019a      	lsls	r2, r3, #6
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	691b      	ldr	r3, [r3, #16]
 80037a0:	041b      	lsls	r3, r3, #16
 80037a2:	431a      	orrs	r2, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	061b      	lsls	r3, r3, #24
 80037aa:	431a      	orrs	r2, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	071b      	lsls	r3, r3, #28
 80037b2:	491a      	ldr	r1, [pc, #104]	@ (800381c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037b4:	4313      	orrs	r3, r2
 80037b6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80037ba:	4b18      	ldr	r3, [pc, #96]	@ (800381c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a17      	ldr	r2, [pc, #92]	@ (800381c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037c0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80037c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037c6:	f7fd febf 	bl	8001548 <HAL_GetTick>
 80037ca:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80037cc:	e008      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80037ce:	f7fd febb 	bl	8001548 <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	2b64      	cmp	r3, #100	@ 0x64
 80037da:	d901      	bls.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e0d8      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80037e0:	4b0e      	ldr	r3, [pc, #56]	@ (800381c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d0f0      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80037ec:	69bb      	ldr	r3, [r7, #24]
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	f040 80ce 	bne.w	8003990 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80037f4:	4b09      	ldr	r3, [pc, #36]	@ (800381c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a08      	ldr	r2, [pc, #32]	@ (800381c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003800:	f7fd fea2 	bl	8001548 <HAL_GetTick>
 8003804:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003806:	e00b      	b.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003808:	f7fd fe9e 	bl	8001548 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	2b64      	cmp	r3, #100	@ 0x64
 8003814:	d904      	bls.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e0bb      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800381a:	bf00      	nop
 800381c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003820:	4b5e      	ldr	r3, [pc, #376]	@ (800399c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003828:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800382c:	d0ec      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d003      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800383e:	2b00      	cmp	r3, #0
 8003840:	d009      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800384a:	2b00      	cmp	r3, #0
 800384c:	d02e      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003852:	2b00      	cmp	r3, #0
 8003854:	d12a      	bne.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003856:	4b51      	ldr	r3, [pc, #324]	@ (800399c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003858:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800385c:	0c1b      	lsrs	r3, r3, #16
 800385e:	f003 0303 	and.w	r3, r3, #3
 8003862:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003864:	4b4d      	ldr	r3, [pc, #308]	@ (800399c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003866:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800386a:	0f1b      	lsrs	r3, r3, #28
 800386c:	f003 0307 	and.w	r3, r3, #7
 8003870:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	695b      	ldr	r3, [r3, #20]
 8003876:	019a      	lsls	r2, r3, #6
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	041b      	lsls	r3, r3, #16
 800387c:	431a      	orrs	r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	699b      	ldr	r3, [r3, #24]
 8003882:	061b      	lsls	r3, r3, #24
 8003884:	431a      	orrs	r2, r3
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	071b      	lsls	r3, r3, #28
 800388a:	4944      	ldr	r1, [pc, #272]	@ (800399c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800388c:	4313      	orrs	r3, r2
 800388e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003892:	4b42      	ldr	r3, [pc, #264]	@ (800399c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003894:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003898:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038a0:	3b01      	subs	r3, #1
 80038a2:	021b      	lsls	r3, r3, #8
 80038a4:	493d      	ldr	r1, [pc, #244]	@ (800399c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d022      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80038bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80038c0:	d11d      	bne.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80038c2:	4b36      	ldr	r3, [pc, #216]	@ (800399c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038c8:	0e1b      	lsrs	r3, r3, #24
 80038ca:	f003 030f 	and.w	r3, r3, #15
 80038ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80038d0:	4b32      	ldr	r3, [pc, #200]	@ (800399c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038d6:	0f1b      	lsrs	r3, r3, #28
 80038d8:	f003 0307 	and.w	r3, r3, #7
 80038dc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	695b      	ldr	r3, [r3, #20]
 80038e2:	019a      	lsls	r2, r3, #6
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a1b      	ldr	r3, [r3, #32]
 80038e8:	041b      	lsls	r3, r3, #16
 80038ea:	431a      	orrs	r2, r3
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	061b      	lsls	r3, r3, #24
 80038f0:	431a      	orrs	r2, r3
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	071b      	lsls	r3, r3, #28
 80038f6:	4929      	ldr	r1, [pc, #164]	@ (800399c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0308 	and.w	r3, r3, #8
 8003906:	2b00      	cmp	r3, #0
 8003908:	d028      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800390a:	4b24      	ldr	r3, [pc, #144]	@ (800399c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800390c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003910:	0e1b      	lsrs	r3, r3, #24
 8003912:	f003 030f 	and.w	r3, r3, #15
 8003916:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003918:	4b20      	ldr	r3, [pc, #128]	@ (800399c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800391a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800391e:	0c1b      	lsrs	r3, r3, #16
 8003920:	f003 0303 	and.w	r3, r3, #3
 8003924:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	695b      	ldr	r3, [r3, #20]
 800392a:	019a      	lsls	r2, r3, #6
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	041b      	lsls	r3, r3, #16
 8003930:	431a      	orrs	r2, r3
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	061b      	lsls	r3, r3, #24
 8003936:	431a      	orrs	r2, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	69db      	ldr	r3, [r3, #28]
 800393c:	071b      	lsls	r3, r3, #28
 800393e:	4917      	ldr	r1, [pc, #92]	@ (800399c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003940:	4313      	orrs	r3, r2
 8003942:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003946:	4b15      	ldr	r3, [pc, #84]	@ (800399c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003948:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800394c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003954:	4911      	ldr	r1, [pc, #68]	@ (800399c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003956:	4313      	orrs	r3, r2
 8003958:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800395c:	4b0f      	ldr	r3, [pc, #60]	@ (800399c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a0e      	ldr	r2, [pc, #56]	@ (800399c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003962:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003966:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003968:	f7fd fdee 	bl	8001548 <HAL_GetTick>
 800396c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800396e:	e008      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003970:	f7fd fdea 	bl	8001548 <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	2b64      	cmp	r3, #100	@ 0x64
 800397c:	d901      	bls.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e007      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003982:	4b06      	ldr	r3, [pc, #24]	@ (800399c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800398a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800398e:	d1ef      	bne.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	3720      	adds	r7, #32
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	40023800 	.word	0x40023800

080039a0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d101      	bne.n	80039b2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e01c      	b.n	80039ec <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	795b      	ldrb	r3, [r3, #5]
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d105      	bne.n	80039c8 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f7fd fabe 	bl	8000f44 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2202      	movs	r2, #2
 80039cc:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f042 0204 	orr.w	r2, r2, #4
 80039dc:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2201      	movs	r2, #1
 80039e2:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80039ea:	2300      	movs	r3, #0
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3708      	adds	r7, #8
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d101      	bne.n	8003a06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e09d      	b.n	8003b42 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d108      	bne.n	8003a20 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a16:	d009      	beq.n	8003a2c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	61da      	str	r2, [r3, #28]
 8003a1e:	e005      	b.n	8003a2c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d106      	bne.n	8003a4c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f7fd fab0 	bl	8000fac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2202      	movs	r2, #2
 8003a50:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a62:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003a6c:	d902      	bls.n	8003a74 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	60fb      	str	r3, [r7, #12]
 8003a72:	e002      	b.n	8003a7a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003a74:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003a78:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003a82:	d007      	beq.n	8003a94 <HAL_SPI_Init+0xa0>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003a8c:	d002      	beq.n	8003a94 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003aa4:	431a      	orrs	r2, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	691b      	ldr	r3, [r3, #16]
 8003aaa:	f003 0302 	and.w	r3, r3, #2
 8003aae:	431a      	orrs	r2, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	695b      	ldr	r3, [r3, #20]
 8003ab4:	f003 0301 	and.w	r3, r3, #1
 8003ab8:	431a      	orrs	r2, r3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	699b      	ldr	r3, [r3, #24]
 8003abe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ac2:	431a      	orrs	r2, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	69db      	ldr	r3, [r3, #28]
 8003ac8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003acc:	431a      	orrs	r2, r3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a1b      	ldr	r3, [r3, #32]
 8003ad2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ad6:	ea42 0103 	orr.w	r1, r2, r3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ade:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	699b      	ldr	r3, [r3, #24]
 8003aee:	0c1b      	lsrs	r3, r3, #16
 8003af0:	f003 0204 	and.w	r2, r3, #4
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af8:	f003 0310 	and.w	r3, r3, #16
 8003afc:	431a      	orrs	r2, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b02:	f003 0308 	and.w	r3, r3, #8
 8003b06:	431a      	orrs	r2, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003b10:	ea42 0103 	orr.w	r1, r2, r3
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	430a      	orrs	r2, r1
 8003b20:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	69da      	ldr	r2, [r3, #28]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b30:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3710      	adds	r7, #16
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}

08003b4a <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b4a:	b580      	push	{r7, lr}
 8003b4c:	b088      	sub	sp, #32
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	60f8      	str	r0, [r7, #12]
 8003b52:	60b9      	str	r1, [r7, #8]
 8003b54:	603b      	str	r3, [r7, #0]
 8003b56:	4613      	mov	r3, r2
 8003b58:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b5a:	f7fd fcf5 	bl	8001548 <HAL_GetTick>
 8003b5e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003b60:	88fb      	ldrh	r3, [r7, #6]
 8003b62:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d001      	beq.n	8003b74 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003b70:	2302      	movs	r3, #2
 8003b72:	e15c      	b.n	8003e2e <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d002      	beq.n	8003b80 <HAL_SPI_Transmit+0x36>
 8003b7a:	88fb      	ldrh	r3, [r7, #6]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d101      	bne.n	8003b84 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e154      	b.n	8003e2e <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d101      	bne.n	8003b92 <HAL_SPI_Transmit+0x48>
 8003b8e:	2302      	movs	r3, #2
 8003b90:	e14d      	b.n	8003e2e <HAL_SPI_Transmit+0x2e4>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2201      	movs	r2, #1
 8003b96:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2203      	movs	r2, #3
 8003b9e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	68ba      	ldr	r2, [r7, #8]
 8003bac:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	88fa      	ldrh	r2, [r7, #6]
 8003bb2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	88fa      	ldrh	r2, [r7, #6]
 8003bb8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003be4:	d10f      	bne.n	8003c06 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003bf4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003c04:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c10:	2b40      	cmp	r3, #64	@ 0x40
 8003c12:	d007      	beq.n	8003c24 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003c22:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003c2c:	d952      	bls.n	8003cd4 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d002      	beq.n	8003c3c <HAL_SPI_Transmit+0xf2>
 8003c36:	8b7b      	ldrh	r3, [r7, #26]
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d145      	bne.n	8003cc8 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c40:	881a      	ldrh	r2, [r3, #0]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c4c:	1c9a      	adds	r2, r3, #2
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	3b01      	subs	r3, #1
 8003c5a:	b29a      	uxth	r2, r3
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003c60:	e032      	b.n	8003cc8 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	f003 0302 	and.w	r3, r3, #2
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d112      	bne.n	8003c96 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c74:	881a      	ldrh	r2, [r3, #0]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c80:	1c9a      	adds	r2, r3, #2
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	3b01      	subs	r3, #1
 8003c8e:	b29a      	uxth	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003c94:	e018      	b.n	8003cc8 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c96:	f7fd fc57 	bl	8001548 <HAL_GetTick>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	683a      	ldr	r2, [r7, #0]
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d803      	bhi.n	8003cae <HAL_SPI_Transmit+0x164>
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cac:	d102      	bne.n	8003cb4 <HAL_SPI_Transmit+0x16a>
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d109      	bne.n	8003cc8 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	e0b2      	b.n	8003e2e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d1c7      	bne.n	8003c62 <HAL_SPI_Transmit+0x118>
 8003cd2:	e083      	b.n	8003ddc <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d002      	beq.n	8003ce2 <HAL_SPI_Transmit+0x198>
 8003cdc:	8b7b      	ldrh	r3, [r7, #26]
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d177      	bne.n	8003dd2 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d912      	bls.n	8003d12 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cf0:	881a      	ldrh	r2, [r3, #0]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cfc:	1c9a      	adds	r2, r3, #2
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	3b02      	subs	r3, #2
 8003d0a:	b29a      	uxth	r2, r3
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003d10:	e05f      	b.n	8003dd2 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	330c      	adds	r3, #12
 8003d1c:	7812      	ldrb	r2, [r2, #0]
 8003d1e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d24:	1c5a      	adds	r2, r3, #1
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	3b01      	subs	r3, #1
 8003d32:	b29a      	uxth	r2, r3
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003d38:	e04b      	b.n	8003dd2 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	f003 0302 	and.w	r3, r3, #2
 8003d44:	2b02      	cmp	r3, #2
 8003d46:	d12b      	bne.n	8003da0 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d912      	bls.n	8003d78 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d56:	881a      	ldrh	r2, [r3, #0]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d62:	1c9a      	adds	r2, r3, #2
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	3b02      	subs	r3, #2
 8003d70:	b29a      	uxth	r2, r3
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003d76:	e02c      	b.n	8003dd2 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	330c      	adds	r3, #12
 8003d82:	7812      	ldrb	r2, [r2, #0]
 8003d84:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d8a:	1c5a      	adds	r2, r3, #1
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	3b01      	subs	r3, #1
 8003d98:	b29a      	uxth	r2, r3
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003d9e:	e018      	b.n	8003dd2 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003da0:	f7fd fbd2 	bl	8001548 <HAL_GetTick>
 8003da4:	4602      	mov	r2, r0
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	683a      	ldr	r2, [r7, #0]
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d803      	bhi.n	8003db8 <HAL_SPI_Transmit+0x26e>
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003db6:	d102      	bne.n	8003dbe <HAL_SPI_Transmit+0x274>
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d109      	bne.n	8003dd2 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e02d      	b.n	8003e2e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d1ae      	bne.n	8003d3a <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ddc:	69fa      	ldr	r2, [r7, #28]
 8003dde:	6839      	ldr	r1, [r7, #0]
 8003de0:	68f8      	ldr	r0, [r7, #12]
 8003de2:	f000 f947 	bl	8004074 <SPI_EndRxTxTransaction>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d002      	beq.n	8003df2 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2220      	movs	r2, #32
 8003df0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d10a      	bne.n	8003e10 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	617b      	str	r3, [r7, #20]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	617b      	str	r3, [r7, #20]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	617b      	str	r3, [r7, #20]
 8003e0e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d001      	beq.n	8003e2c <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e000      	b.n	8003e2e <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8003e2c:	2300      	movs	r3, #0
  }
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3720      	adds	r7, #32
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
	...

08003e38 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b088      	sub	sp, #32
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	603b      	str	r3, [r7, #0]
 8003e44:	4613      	mov	r3, r2
 8003e46:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003e48:	f7fd fb7e 	bl	8001548 <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e50:	1a9b      	subs	r3, r3, r2
 8003e52:	683a      	ldr	r2, [r7, #0]
 8003e54:	4413      	add	r3, r2
 8003e56:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003e58:	f7fd fb76 	bl	8001548 <HAL_GetTick>
 8003e5c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003e5e:	4b39      	ldr	r3, [pc, #228]	@ (8003f44 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	015b      	lsls	r3, r3, #5
 8003e64:	0d1b      	lsrs	r3, r3, #20
 8003e66:	69fa      	ldr	r2, [r7, #28]
 8003e68:	fb02 f303 	mul.w	r3, r2, r3
 8003e6c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e6e:	e055      	b.n	8003f1c <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e76:	d051      	beq.n	8003f1c <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003e78:	f7fd fb66 	bl	8001548 <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	69fa      	ldr	r2, [r7, #28]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d902      	bls.n	8003e8e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d13d      	bne.n	8003f0a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	685a      	ldr	r2, [r3, #4]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003e9c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ea6:	d111      	bne.n	8003ecc <SPI_WaitFlagStateUntilTimeout+0x94>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003eb0:	d004      	beq.n	8003ebc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003eba:	d107      	bne.n	8003ecc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003eca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ed0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ed4:	d10f      	bne.n	8003ef6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003ee4:	601a      	str	r2, [r3, #0]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003ef4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2201      	movs	r2, #1
 8003efa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e018      	b.n	8003f3c <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d102      	bne.n	8003f16 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8003f10:	2300      	movs	r3, #0
 8003f12:	61fb      	str	r3, [r7, #28]
 8003f14:	e002      	b.n	8003f1c <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	3b01      	subs	r3, #1
 8003f1a:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	689a      	ldr	r2, [r3, #8]
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	4013      	ands	r3, r2
 8003f26:	68ba      	ldr	r2, [r7, #8]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	bf0c      	ite	eq
 8003f2c:	2301      	moveq	r3, #1
 8003f2e:	2300      	movne	r3, #0
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	461a      	mov	r2, r3
 8003f34:	79fb      	ldrb	r3, [r7, #7]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d19a      	bne.n	8003e70 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8003f3a:	2300      	movs	r3, #0
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3720      	adds	r7, #32
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	20000000 	.word	0x20000000

08003f48 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b08a      	sub	sp, #40	@ 0x28
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	60b9      	str	r1, [r7, #8]
 8003f52:	607a      	str	r2, [r7, #4]
 8003f54:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003f56:	2300      	movs	r3, #0
 8003f58:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003f5a:	f7fd faf5 	bl	8001548 <HAL_GetTick>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f62:	1a9b      	subs	r3, r3, r2
 8003f64:	683a      	ldr	r2, [r7, #0]
 8003f66:	4413      	add	r3, r2
 8003f68:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003f6a:	f7fd faed 	bl	8001548 <HAL_GetTick>
 8003f6e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	330c      	adds	r3, #12
 8003f76:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003f78:	4b3d      	ldr	r3, [pc, #244]	@ (8004070 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	4413      	add	r3, r2
 8003f82:	00da      	lsls	r2, r3, #3
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	0d1b      	lsrs	r3, r3, #20
 8003f88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f8a:	fb02 f303 	mul.w	r3, r2, r3
 8003f8e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003f90:	e061      	b.n	8004056 <SPI_WaitFifoStateUntilTimeout+0x10e>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003f98:	d107      	bne.n	8003faa <SPI_WaitFifoStateUntilTimeout+0x62>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d104      	bne.n	8003faa <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003fa8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fb0:	d051      	beq.n	8004056 <SPI_WaitFifoStateUntilTimeout+0x10e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003fb2:	f7fd fac9 	bl	8001548 <HAL_GetTick>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	6a3b      	ldr	r3, [r7, #32]
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d902      	bls.n	8003fc8 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d13d      	bne.n	8004044 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	685a      	ldr	r2, [r3, #4]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003fd6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003fe0:	d111      	bne.n	8004006 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fea:	d004      	beq.n	8003ff6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ff4:	d107      	bne.n	8004006 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004004:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800400a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800400e:	d10f      	bne.n	8004030 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800401e:	601a      	str	r2, [r3, #0]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800402e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2200      	movs	r2, #0
 800403c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004040:	2303      	movs	r3, #3
 8004042:	e011      	b.n	8004068 <SPI_WaitFifoStateUntilTimeout+0x120>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d102      	bne.n	8004050 <SPI_WaitFifoStateUntilTimeout+0x108>
      {
        tmp_timeout = 0U;
 800404a:	2300      	movs	r3, #0
 800404c:	627b      	str	r3, [r7, #36]	@ 0x24
 800404e:	e002      	b.n	8004056 <SPI_WaitFifoStateUntilTimeout+0x10e>
      }
      else
      {
        count--;
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	3b01      	subs	r3, #1
 8004054:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	689a      	ldr	r2, [r3, #8]
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	4013      	ands	r3, r2
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	429a      	cmp	r2, r3
 8004064:	d195      	bne.n	8003f92 <SPI_WaitFifoStateUntilTimeout+0x4a>
      }
    }
  }

  return HAL_OK;
 8004066:	2300      	movs	r3, #0
}
 8004068:	4618      	mov	r0, r3
 800406a:	3728      	adds	r7, #40	@ 0x28
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}
 8004070:	20000000 	.word	0x20000000

08004074 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b088      	sub	sp, #32
 8004078:	af02      	add	r7, sp, #8
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	60b9      	str	r1, [r7, #8]
 800407e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	9300      	str	r3, [sp, #0]
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	2200      	movs	r2, #0
 8004088:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800408c:	68f8      	ldr	r0, [r7, #12]
 800408e:	f7ff ff5b 	bl	8003f48 <SPI_WaitFifoStateUntilTimeout>
 8004092:	4603      	mov	r3, r0
 8004094:	2b00      	cmp	r3, #0
 8004096:	d007      	beq.n	80040a8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800409c:	f043 0220 	orr.w	r2, r3, #32
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
 80040a6:	e046      	b.n	8004136 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80040a8:	4b25      	ldr	r3, [pc, #148]	@ (8004140 <SPI_EndRxTxTransaction+0xcc>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a25      	ldr	r2, [pc, #148]	@ (8004144 <SPI_EndRxTxTransaction+0xd0>)
 80040ae:	fba2 2303 	umull	r2, r3, r2, r3
 80040b2:	0d5b      	lsrs	r3, r3, #21
 80040b4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80040b8:	fb02 f303 	mul.w	r3, r2, r3
 80040bc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80040c6:	d112      	bne.n	80040ee <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	9300      	str	r3, [sp, #0]
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	2200      	movs	r2, #0
 80040d0:	2180      	movs	r1, #128	@ 0x80
 80040d2:	68f8      	ldr	r0, [r7, #12]
 80040d4:	f7ff feb0 	bl	8003e38 <SPI_WaitFlagStateUntilTimeout>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d016      	beq.n	800410c <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040e2:	f043 0220 	orr.w	r2, r3, #32
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e023      	b.n	8004136 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00a      	beq.n	800410a <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	3b01      	subs	r3, #1
 80040f8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004104:	2b80      	cmp	r3, #128	@ 0x80
 8004106:	d0f2      	beq.n	80040ee <SPI_EndRxTxTransaction+0x7a>
 8004108:	e000      	b.n	800410c <SPI_EndRxTxTransaction+0x98>
        break;
 800410a:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	9300      	str	r3, [sp, #0]
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	2200      	movs	r2, #0
 8004114:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004118:	68f8      	ldr	r0, [r7, #12]
 800411a:	f7ff ff15 	bl	8003f48 <SPI_WaitFifoStateUntilTimeout>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d007      	beq.n	8004134 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004128:	f043 0220 	orr.w	r2, r3, #32
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004130:	2303      	movs	r3, #3
 8004132:	e000      	b.n	8004136 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	3718      	adds	r7, #24
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	20000000 	.word	0x20000000
 8004144:	165e9f81 	.word	0x165e9f81

08004148 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d101      	bne.n	800415a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e049      	b.n	80041ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004160:	b2db      	uxtb	r3, r3
 8004162:	2b00      	cmp	r3, #0
 8004164:	d106      	bne.n	8004174 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 f841 	bl	80041f6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2202      	movs	r2, #2
 8004178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	3304      	adds	r3, #4
 8004184:	4619      	mov	r1, r3
 8004186:	4610      	mov	r0, r2
 8004188:	f000 f9e8 	bl	800455c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3708      	adds	r7, #8
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}

080041f6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80041f6:	b480      	push	{r7}
 80041f8:	b083      	sub	sp, #12
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80041fe:	bf00      	nop
 8004200:	370c      	adds	r7, #12
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr
	...

0800420c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800420c:	b480      	push	{r7}
 800420e:	b085      	sub	sp, #20
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800421a:	b2db      	uxtb	r3, r3
 800421c:	2b01      	cmp	r3, #1
 800421e:	d001      	beq.n	8004224 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e054      	b.n	80042ce <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2202      	movs	r2, #2
 8004228:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68da      	ldr	r2, [r3, #12]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f042 0201 	orr.w	r2, r2, #1
 800423a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a26      	ldr	r2, [pc, #152]	@ (80042dc <HAL_TIM_Base_Start_IT+0xd0>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d022      	beq.n	800428c <HAL_TIM_Base_Start_IT+0x80>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800424e:	d01d      	beq.n	800428c <HAL_TIM_Base_Start_IT+0x80>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a22      	ldr	r2, [pc, #136]	@ (80042e0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d018      	beq.n	800428c <HAL_TIM_Base_Start_IT+0x80>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a21      	ldr	r2, [pc, #132]	@ (80042e4 <HAL_TIM_Base_Start_IT+0xd8>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d013      	beq.n	800428c <HAL_TIM_Base_Start_IT+0x80>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a1f      	ldr	r2, [pc, #124]	@ (80042e8 <HAL_TIM_Base_Start_IT+0xdc>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d00e      	beq.n	800428c <HAL_TIM_Base_Start_IT+0x80>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a1e      	ldr	r2, [pc, #120]	@ (80042ec <HAL_TIM_Base_Start_IT+0xe0>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d009      	beq.n	800428c <HAL_TIM_Base_Start_IT+0x80>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a1c      	ldr	r2, [pc, #112]	@ (80042f0 <HAL_TIM_Base_Start_IT+0xe4>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d004      	beq.n	800428c <HAL_TIM_Base_Start_IT+0x80>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a1b      	ldr	r2, [pc, #108]	@ (80042f4 <HAL_TIM_Base_Start_IT+0xe8>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d115      	bne.n	80042b8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	689a      	ldr	r2, [r3, #8]
 8004292:	4b19      	ldr	r3, [pc, #100]	@ (80042f8 <HAL_TIM_Base_Start_IT+0xec>)
 8004294:	4013      	ands	r3, r2
 8004296:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2b06      	cmp	r3, #6
 800429c:	d015      	beq.n	80042ca <HAL_TIM_Base_Start_IT+0xbe>
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042a4:	d011      	beq.n	80042ca <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f042 0201 	orr.w	r2, r2, #1
 80042b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042b6:	e008      	b.n	80042ca <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f042 0201 	orr.w	r2, r2, #1
 80042c6:	601a      	str	r2, [r3, #0]
 80042c8:	e000      	b.n	80042cc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042ca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3714      	adds	r7, #20
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	40010000 	.word	0x40010000
 80042e0:	40000400 	.word	0x40000400
 80042e4:	40000800 	.word	0x40000800
 80042e8:	40000c00 	.word	0x40000c00
 80042ec:	40010400 	.word	0x40010400
 80042f0:	40014000 	.word	0x40014000
 80042f4:	40001800 	.word	0x40001800
 80042f8:	00010007 	.word	0x00010007

080042fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	f003 0302 	and.w	r3, r3, #2
 800431a:	2b00      	cmp	r3, #0
 800431c:	d020      	beq.n	8004360 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f003 0302 	and.w	r3, r3, #2
 8004324:	2b00      	cmp	r3, #0
 8004326:	d01b      	beq.n	8004360 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f06f 0202 	mvn.w	r2, #2
 8004330:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2201      	movs	r2, #1
 8004336:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	699b      	ldr	r3, [r3, #24]
 800433e:	f003 0303 	and.w	r3, r3, #3
 8004342:	2b00      	cmp	r3, #0
 8004344:	d003      	beq.n	800434e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 f8e9 	bl	800451e <HAL_TIM_IC_CaptureCallback>
 800434c:	e005      	b.n	800435a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 f8db 	bl	800450a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f000 f8ec 	bl	8004532 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	f003 0304 	and.w	r3, r3, #4
 8004366:	2b00      	cmp	r3, #0
 8004368:	d020      	beq.n	80043ac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f003 0304 	and.w	r3, r3, #4
 8004370:	2b00      	cmp	r3, #0
 8004372:	d01b      	beq.n	80043ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f06f 0204 	mvn.w	r2, #4
 800437c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2202      	movs	r2, #2
 8004382:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	699b      	ldr	r3, [r3, #24]
 800438a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800438e:	2b00      	cmp	r3, #0
 8004390:	d003      	beq.n	800439a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f000 f8c3 	bl	800451e <HAL_TIM_IC_CaptureCallback>
 8004398:	e005      	b.n	80043a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 f8b5 	bl	800450a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f000 f8c6 	bl	8004532 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	f003 0308 	and.w	r3, r3, #8
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d020      	beq.n	80043f8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f003 0308 	and.w	r3, r3, #8
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d01b      	beq.n	80043f8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f06f 0208 	mvn.w	r2, #8
 80043c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2204      	movs	r2, #4
 80043ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	69db      	ldr	r3, [r3, #28]
 80043d6:	f003 0303 	and.w	r3, r3, #3
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d003      	beq.n	80043e6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f000 f89d 	bl	800451e <HAL_TIM_IC_CaptureCallback>
 80043e4:	e005      	b.n	80043f2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f000 f88f 	bl	800450a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f000 f8a0 	bl	8004532 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	f003 0310 	and.w	r3, r3, #16
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d020      	beq.n	8004444 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	f003 0310 	and.w	r3, r3, #16
 8004408:	2b00      	cmp	r3, #0
 800440a:	d01b      	beq.n	8004444 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f06f 0210 	mvn.w	r2, #16
 8004414:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2208      	movs	r2, #8
 800441a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	69db      	ldr	r3, [r3, #28]
 8004422:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004426:	2b00      	cmp	r3, #0
 8004428:	d003      	beq.n	8004432 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 f877 	bl	800451e <HAL_TIM_IC_CaptureCallback>
 8004430:	e005      	b.n	800443e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f000 f869 	bl	800450a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f000 f87a 	bl	8004532 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	f003 0301 	and.w	r3, r3, #1
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00c      	beq.n	8004468 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f003 0301 	and.w	r3, r3, #1
 8004454:	2b00      	cmp	r3, #0
 8004456:	d007      	beq.n	8004468 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f06f 0201 	mvn.w	r2, #1
 8004460:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f7fc fc76 	bl	8000d54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800446e:	2b00      	cmp	r3, #0
 8004470:	d104      	bne.n	800447c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004478:	2b00      	cmp	r3, #0
 800447a:	d00c      	beq.n	8004496 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004482:	2b00      	cmp	r3, #0
 8004484:	d007      	beq.n	8004496 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800448e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f000 f913 	bl	80046bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800449c:	2b00      	cmp	r3, #0
 800449e:	d00c      	beq.n	80044ba <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d007      	beq.n	80044ba <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80044b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f000 f90b 	bl	80046d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d00c      	beq.n	80044de <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d007      	beq.n	80044de <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80044d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f000 f834 	bl	8004546 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	f003 0320 	and.w	r3, r3, #32
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d00c      	beq.n	8004502 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f003 0320 	and.w	r3, r3, #32
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d007      	beq.n	8004502 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f06f 0220 	mvn.w	r2, #32
 80044fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f000 f8d3 	bl	80046a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004502:	bf00      	nop
 8004504:	3710      	adds	r7, #16
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}

0800450a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800450a:	b480      	push	{r7}
 800450c:	b083      	sub	sp, #12
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004512:	bf00      	nop
 8004514:	370c      	adds	r7, #12
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr

0800451e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800451e:	b480      	push	{r7}
 8004520:	b083      	sub	sp, #12
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004526:	bf00      	nop
 8004528:	370c      	adds	r7, #12
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr

08004532 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004532:	b480      	push	{r7}
 8004534:	b083      	sub	sp, #12
 8004536:	af00      	add	r7, sp, #0
 8004538:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800453a:	bf00      	nop
 800453c:	370c      	adds	r7, #12
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr

08004546 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004546:	b480      	push	{r7}
 8004548:	b083      	sub	sp, #12
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800454e:	bf00      	nop
 8004550:	370c      	adds	r7, #12
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr
	...

0800455c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800455c:	b480      	push	{r7}
 800455e:	b085      	sub	sp, #20
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4a43      	ldr	r2, [pc, #268]	@ (800467c <TIM_Base_SetConfig+0x120>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d013      	beq.n	800459c <TIM_Base_SetConfig+0x40>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800457a:	d00f      	beq.n	800459c <TIM_Base_SetConfig+0x40>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	4a40      	ldr	r2, [pc, #256]	@ (8004680 <TIM_Base_SetConfig+0x124>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d00b      	beq.n	800459c <TIM_Base_SetConfig+0x40>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4a3f      	ldr	r2, [pc, #252]	@ (8004684 <TIM_Base_SetConfig+0x128>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d007      	beq.n	800459c <TIM_Base_SetConfig+0x40>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4a3e      	ldr	r2, [pc, #248]	@ (8004688 <TIM_Base_SetConfig+0x12c>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d003      	beq.n	800459c <TIM_Base_SetConfig+0x40>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4a3d      	ldr	r2, [pc, #244]	@ (800468c <TIM_Base_SetConfig+0x130>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d108      	bne.n	80045ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	68fa      	ldr	r2, [r7, #12]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a32      	ldr	r2, [pc, #200]	@ (800467c <TIM_Base_SetConfig+0x120>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d02b      	beq.n	800460e <TIM_Base_SetConfig+0xb2>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045bc:	d027      	beq.n	800460e <TIM_Base_SetConfig+0xb2>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a2f      	ldr	r2, [pc, #188]	@ (8004680 <TIM_Base_SetConfig+0x124>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d023      	beq.n	800460e <TIM_Base_SetConfig+0xb2>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a2e      	ldr	r2, [pc, #184]	@ (8004684 <TIM_Base_SetConfig+0x128>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d01f      	beq.n	800460e <TIM_Base_SetConfig+0xb2>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4a2d      	ldr	r2, [pc, #180]	@ (8004688 <TIM_Base_SetConfig+0x12c>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d01b      	beq.n	800460e <TIM_Base_SetConfig+0xb2>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4a2c      	ldr	r2, [pc, #176]	@ (800468c <TIM_Base_SetConfig+0x130>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d017      	beq.n	800460e <TIM_Base_SetConfig+0xb2>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4a2b      	ldr	r2, [pc, #172]	@ (8004690 <TIM_Base_SetConfig+0x134>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d013      	beq.n	800460e <TIM_Base_SetConfig+0xb2>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a2a      	ldr	r2, [pc, #168]	@ (8004694 <TIM_Base_SetConfig+0x138>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d00f      	beq.n	800460e <TIM_Base_SetConfig+0xb2>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4a29      	ldr	r2, [pc, #164]	@ (8004698 <TIM_Base_SetConfig+0x13c>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d00b      	beq.n	800460e <TIM_Base_SetConfig+0xb2>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4a28      	ldr	r2, [pc, #160]	@ (800469c <TIM_Base_SetConfig+0x140>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d007      	beq.n	800460e <TIM_Base_SetConfig+0xb2>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a27      	ldr	r2, [pc, #156]	@ (80046a0 <TIM_Base_SetConfig+0x144>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d003      	beq.n	800460e <TIM_Base_SetConfig+0xb2>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4a26      	ldr	r2, [pc, #152]	@ (80046a4 <TIM_Base_SetConfig+0x148>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d108      	bne.n	8004620 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004614:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	68db      	ldr	r3, [r3, #12]
 800461a:	68fa      	ldr	r2, [r7, #12]
 800461c:	4313      	orrs	r3, r2
 800461e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	695b      	ldr	r3, [r3, #20]
 800462a:	4313      	orrs	r3, r2
 800462c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	689a      	ldr	r2, [r3, #8]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a0e      	ldr	r2, [pc, #56]	@ (800467c <TIM_Base_SetConfig+0x120>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d003      	beq.n	800464e <TIM_Base_SetConfig+0xf2>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a10      	ldr	r2, [pc, #64]	@ (800468c <TIM_Base_SetConfig+0x130>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d103      	bne.n	8004656 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	691a      	ldr	r2, [r3, #16]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f043 0204 	orr.w	r2, r3, #4
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2201      	movs	r2, #1
 8004666:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	68fa      	ldr	r2, [r7, #12]
 800466c:	601a      	str	r2, [r3, #0]
}
 800466e:	bf00      	nop
 8004670:	3714      	adds	r7, #20
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr
 800467a:	bf00      	nop
 800467c:	40010000 	.word	0x40010000
 8004680:	40000400 	.word	0x40000400
 8004684:	40000800 	.word	0x40000800
 8004688:	40000c00 	.word	0x40000c00
 800468c:	40010400 	.word	0x40010400
 8004690:	40014000 	.word	0x40014000
 8004694:	40014400 	.word	0x40014400
 8004698:	40014800 	.word	0x40014800
 800469c:	40001800 	.word	0x40001800
 80046a0:	40001c00 	.word	0x40001c00
 80046a4:	40002000 	.word	0x40002000

080046a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b083      	sub	sp, #12
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046b0:	bf00      	nop
 80046b2:	370c      	adds	r7, #12
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr

080046bc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046bc:	b480      	push	{r7}
 80046be:	b083      	sub	sp, #12
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046c4:	bf00      	nop
 80046c6:	370c      	adds	r7, #12
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80046d8:	bf00      	nop
 80046da:	370c      	adds	r7, #12
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b082      	sub	sp, #8
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d101      	bne.n	80046f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e040      	b.n	8004778 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d106      	bne.n	800470c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f7fc fc94 	bl	8001034 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2224      	movs	r2, #36	@ 0x24
 8004710:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f022 0201 	bic.w	r2, r2, #1
 8004720:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004726:	2b00      	cmp	r3, #0
 8004728:	d002      	beq.n	8004730 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 fb16 	bl	8004d5c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f000 f8af 	bl	8004894 <UART_SetConfig>
 8004736:	4603      	mov	r3, r0
 8004738:	2b01      	cmp	r3, #1
 800473a:	d101      	bne.n	8004740 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	e01b      	b.n	8004778 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	685a      	ldr	r2, [r3, #4]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800474e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	689a      	ldr	r2, [r3, #8]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800475e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f042 0201 	orr.w	r2, r2, #1
 800476e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f000 fb95 	bl	8004ea0 <UART_CheckIdleState>
 8004776:	4603      	mov	r3, r0
}
 8004778:	4618      	mov	r0, r3
 800477a:	3708      	adds	r7, #8
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b08a      	sub	sp, #40	@ 0x28
 8004784:	af02      	add	r7, sp, #8
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	60b9      	str	r1, [r7, #8]
 800478a:	603b      	str	r3, [r7, #0]
 800478c:	4613      	mov	r3, r2
 800478e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004794:	2b20      	cmp	r3, #32
 8004796:	d177      	bne.n	8004888 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d002      	beq.n	80047a4 <HAL_UART_Transmit+0x24>
 800479e:	88fb      	ldrh	r3, [r7, #6]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d101      	bne.n	80047a8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e070      	b.n	800488a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2200      	movs	r2, #0
 80047ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2221      	movs	r2, #33	@ 0x21
 80047b4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047b6:	f7fc fec7 	bl	8001548 <HAL_GetTick>
 80047ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	88fa      	ldrh	r2, [r7, #6]
 80047c0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	88fa      	ldrh	r2, [r7, #6]
 80047c8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047d4:	d108      	bne.n	80047e8 <HAL_UART_Transmit+0x68>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	691b      	ldr	r3, [r3, #16]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d104      	bne.n	80047e8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80047de:	2300      	movs	r3, #0
 80047e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	61bb      	str	r3, [r7, #24]
 80047e6:	e003      	b.n	80047f0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80047ec:	2300      	movs	r3, #0
 80047ee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80047f0:	e02f      	b.n	8004852 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	9300      	str	r3, [sp, #0]
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	2200      	movs	r2, #0
 80047fa:	2180      	movs	r1, #128	@ 0x80
 80047fc:	68f8      	ldr	r0, [r7, #12]
 80047fe:	f000 fbf7 	bl	8004ff0 <UART_WaitOnFlagUntilTimeout>
 8004802:	4603      	mov	r3, r0
 8004804:	2b00      	cmp	r3, #0
 8004806:	d004      	beq.n	8004812 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2220      	movs	r2, #32
 800480c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	e03b      	b.n	800488a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004812:	69fb      	ldr	r3, [r7, #28]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d10b      	bne.n	8004830 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	881b      	ldrh	r3, [r3, #0]
 800481c:	461a      	mov	r2, r3
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004826:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004828:	69bb      	ldr	r3, [r7, #24]
 800482a:	3302      	adds	r3, #2
 800482c:	61bb      	str	r3, [r7, #24]
 800482e:	e007      	b.n	8004840 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	781a      	ldrb	r2, [r3, #0]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	3301      	adds	r3, #1
 800483e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004846:	b29b      	uxth	r3, r3
 8004848:	3b01      	subs	r3, #1
 800484a:	b29a      	uxth	r2, r3
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004858:	b29b      	uxth	r3, r3
 800485a:	2b00      	cmp	r3, #0
 800485c:	d1c9      	bne.n	80047f2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	9300      	str	r3, [sp, #0]
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	2200      	movs	r2, #0
 8004866:	2140      	movs	r1, #64	@ 0x40
 8004868:	68f8      	ldr	r0, [r7, #12]
 800486a:	f000 fbc1 	bl	8004ff0 <UART_WaitOnFlagUntilTimeout>
 800486e:	4603      	mov	r3, r0
 8004870:	2b00      	cmp	r3, #0
 8004872:	d004      	beq.n	800487e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2220      	movs	r2, #32
 8004878:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	e005      	b.n	800488a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2220      	movs	r2, #32
 8004882:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004884:	2300      	movs	r3, #0
 8004886:	e000      	b.n	800488a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004888:	2302      	movs	r3, #2
  }
}
 800488a:	4618      	mov	r0, r3
 800488c:	3720      	adds	r7, #32
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
	...

08004894 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b088      	sub	sp, #32
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800489c:	2300      	movs	r3, #0
 800489e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	689a      	ldr	r2, [r3, #8]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	691b      	ldr	r3, [r3, #16]
 80048a8:	431a      	orrs	r2, r3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	431a      	orrs	r2, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	69db      	ldr	r3, [r3, #28]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	4ba6      	ldr	r3, [pc, #664]	@ (8004b58 <UART_SetConfig+0x2c4>)
 80048c0:	4013      	ands	r3, r2
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	6812      	ldr	r2, [r2, #0]
 80048c6:	6979      	ldr	r1, [r7, #20]
 80048c8:	430b      	orrs	r3, r1
 80048ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	68da      	ldr	r2, [r3, #12]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	430a      	orrs	r2, r1
 80048e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	699b      	ldr	r3, [r3, #24]
 80048e6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6a1b      	ldr	r3, [r3, #32]
 80048ec:	697a      	ldr	r2, [r7, #20]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	697a      	ldr	r2, [r7, #20]
 8004902:	430a      	orrs	r2, r1
 8004904:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a94      	ldr	r2, [pc, #592]	@ (8004b5c <UART_SetConfig+0x2c8>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d120      	bne.n	8004952 <UART_SetConfig+0xbe>
 8004910:	4b93      	ldr	r3, [pc, #588]	@ (8004b60 <UART_SetConfig+0x2cc>)
 8004912:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004916:	f003 0303 	and.w	r3, r3, #3
 800491a:	2b03      	cmp	r3, #3
 800491c:	d816      	bhi.n	800494c <UART_SetConfig+0xb8>
 800491e:	a201      	add	r2, pc, #4	@ (adr r2, 8004924 <UART_SetConfig+0x90>)
 8004920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004924:	08004935 	.word	0x08004935
 8004928:	08004941 	.word	0x08004941
 800492c:	0800493b 	.word	0x0800493b
 8004930:	08004947 	.word	0x08004947
 8004934:	2301      	movs	r3, #1
 8004936:	77fb      	strb	r3, [r7, #31]
 8004938:	e150      	b.n	8004bdc <UART_SetConfig+0x348>
 800493a:	2302      	movs	r3, #2
 800493c:	77fb      	strb	r3, [r7, #31]
 800493e:	e14d      	b.n	8004bdc <UART_SetConfig+0x348>
 8004940:	2304      	movs	r3, #4
 8004942:	77fb      	strb	r3, [r7, #31]
 8004944:	e14a      	b.n	8004bdc <UART_SetConfig+0x348>
 8004946:	2308      	movs	r3, #8
 8004948:	77fb      	strb	r3, [r7, #31]
 800494a:	e147      	b.n	8004bdc <UART_SetConfig+0x348>
 800494c:	2310      	movs	r3, #16
 800494e:	77fb      	strb	r3, [r7, #31]
 8004950:	e144      	b.n	8004bdc <UART_SetConfig+0x348>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a83      	ldr	r2, [pc, #524]	@ (8004b64 <UART_SetConfig+0x2d0>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d132      	bne.n	80049c2 <UART_SetConfig+0x12e>
 800495c:	4b80      	ldr	r3, [pc, #512]	@ (8004b60 <UART_SetConfig+0x2cc>)
 800495e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004962:	f003 030c 	and.w	r3, r3, #12
 8004966:	2b0c      	cmp	r3, #12
 8004968:	d828      	bhi.n	80049bc <UART_SetConfig+0x128>
 800496a:	a201      	add	r2, pc, #4	@ (adr r2, 8004970 <UART_SetConfig+0xdc>)
 800496c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004970:	080049a5 	.word	0x080049a5
 8004974:	080049bd 	.word	0x080049bd
 8004978:	080049bd 	.word	0x080049bd
 800497c:	080049bd 	.word	0x080049bd
 8004980:	080049b1 	.word	0x080049b1
 8004984:	080049bd 	.word	0x080049bd
 8004988:	080049bd 	.word	0x080049bd
 800498c:	080049bd 	.word	0x080049bd
 8004990:	080049ab 	.word	0x080049ab
 8004994:	080049bd 	.word	0x080049bd
 8004998:	080049bd 	.word	0x080049bd
 800499c:	080049bd 	.word	0x080049bd
 80049a0:	080049b7 	.word	0x080049b7
 80049a4:	2300      	movs	r3, #0
 80049a6:	77fb      	strb	r3, [r7, #31]
 80049a8:	e118      	b.n	8004bdc <UART_SetConfig+0x348>
 80049aa:	2302      	movs	r3, #2
 80049ac:	77fb      	strb	r3, [r7, #31]
 80049ae:	e115      	b.n	8004bdc <UART_SetConfig+0x348>
 80049b0:	2304      	movs	r3, #4
 80049b2:	77fb      	strb	r3, [r7, #31]
 80049b4:	e112      	b.n	8004bdc <UART_SetConfig+0x348>
 80049b6:	2308      	movs	r3, #8
 80049b8:	77fb      	strb	r3, [r7, #31]
 80049ba:	e10f      	b.n	8004bdc <UART_SetConfig+0x348>
 80049bc:	2310      	movs	r3, #16
 80049be:	77fb      	strb	r3, [r7, #31]
 80049c0:	e10c      	b.n	8004bdc <UART_SetConfig+0x348>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a68      	ldr	r2, [pc, #416]	@ (8004b68 <UART_SetConfig+0x2d4>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d120      	bne.n	8004a0e <UART_SetConfig+0x17a>
 80049cc:	4b64      	ldr	r3, [pc, #400]	@ (8004b60 <UART_SetConfig+0x2cc>)
 80049ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049d2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80049d6:	2b30      	cmp	r3, #48	@ 0x30
 80049d8:	d013      	beq.n	8004a02 <UART_SetConfig+0x16e>
 80049da:	2b30      	cmp	r3, #48	@ 0x30
 80049dc:	d814      	bhi.n	8004a08 <UART_SetConfig+0x174>
 80049de:	2b20      	cmp	r3, #32
 80049e0:	d009      	beq.n	80049f6 <UART_SetConfig+0x162>
 80049e2:	2b20      	cmp	r3, #32
 80049e4:	d810      	bhi.n	8004a08 <UART_SetConfig+0x174>
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d002      	beq.n	80049f0 <UART_SetConfig+0x15c>
 80049ea:	2b10      	cmp	r3, #16
 80049ec:	d006      	beq.n	80049fc <UART_SetConfig+0x168>
 80049ee:	e00b      	b.n	8004a08 <UART_SetConfig+0x174>
 80049f0:	2300      	movs	r3, #0
 80049f2:	77fb      	strb	r3, [r7, #31]
 80049f4:	e0f2      	b.n	8004bdc <UART_SetConfig+0x348>
 80049f6:	2302      	movs	r3, #2
 80049f8:	77fb      	strb	r3, [r7, #31]
 80049fa:	e0ef      	b.n	8004bdc <UART_SetConfig+0x348>
 80049fc:	2304      	movs	r3, #4
 80049fe:	77fb      	strb	r3, [r7, #31]
 8004a00:	e0ec      	b.n	8004bdc <UART_SetConfig+0x348>
 8004a02:	2308      	movs	r3, #8
 8004a04:	77fb      	strb	r3, [r7, #31]
 8004a06:	e0e9      	b.n	8004bdc <UART_SetConfig+0x348>
 8004a08:	2310      	movs	r3, #16
 8004a0a:	77fb      	strb	r3, [r7, #31]
 8004a0c:	e0e6      	b.n	8004bdc <UART_SetConfig+0x348>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a56      	ldr	r2, [pc, #344]	@ (8004b6c <UART_SetConfig+0x2d8>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d120      	bne.n	8004a5a <UART_SetConfig+0x1c6>
 8004a18:	4b51      	ldr	r3, [pc, #324]	@ (8004b60 <UART_SetConfig+0x2cc>)
 8004a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a1e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004a22:	2bc0      	cmp	r3, #192	@ 0xc0
 8004a24:	d013      	beq.n	8004a4e <UART_SetConfig+0x1ba>
 8004a26:	2bc0      	cmp	r3, #192	@ 0xc0
 8004a28:	d814      	bhi.n	8004a54 <UART_SetConfig+0x1c0>
 8004a2a:	2b80      	cmp	r3, #128	@ 0x80
 8004a2c:	d009      	beq.n	8004a42 <UART_SetConfig+0x1ae>
 8004a2e:	2b80      	cmp	r3, #128	@ 0x80
 8004a30:	d810      	bhi.n	8004a54 <UART_SetConfig+0x1c0>
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d002      	beq.n	8004a3c <UART_SetConfig+0x1a8>
 8004a36:	2b40      	cmp	r3, #64	@ 0x40
 8004a38:	d006      	beq.n	8004a48 <UART_SetConfig+0x1b4>
 8004a3a:	e00b      	b.n	8004a54 <UART_SetConfig+0x1c0>
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	77fb      	strb	r3, [r7, #31]
 8004a40:	e0cc      	b.n	8004bdc <UART_SetConfig+0x348>
 8004a42:	2302      	movs	r3, #2
 8004a44:	77fb      	strb	r3, [r7, #31]
 8004a46:	e0c9      	b.n	8004bdc <UART_SetConfig+0x348>
 8004a48:	2304      	movs	r3, #4
 8004a4a:	77fb      	strb	r3, [r7, #31]
 8004a4c:	e0c6      	b.n	8004bdc <UART_SetConfig+0x348>
 8004a4e:	2308      	movs	r3, #8
 8004a50:	77fb      	strb	r3, [r7, #31]
 8004a52:	e0c3      	b.n	8004bdc <UART_SetConfig+0x348>
 8004a54:	2310      	movs	r3, #16
 8004a56:	77fb      	strb	r3, [r7, #31]
 8004a58:	e0c0      	b.n	8004bdc <UART_SetConfig+0x348>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a44      	ldr	r2, [pc, #272]	@ (8004b70 <UART_SetConfig+0x2dc>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d125      	bne.n	8004ab0 <UART_SetConfig+0x21c>
 8004a64:	4b3e      	ldr	r3, [pc, #248]	@ (8004b60 <UART_SetConfig+0x2cc>)
 8004a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a6e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a72:	d017      	beq.n	8004aa4 <UART_SetConfig+0x210>
 8004a74:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a78:	d817      	bhi.n	8004aaa <UART_SetConfig+0x216>
 8004a7a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a7e:	d00b      	beq.n	8004a98 <UART_SetConfig+0x204>
 8004a80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a84:	d811      	bhi.n	8004aaa <UART_SetConfig+0x216>
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d003      	beq.n	8004a92 <UART_SetConfig+0x1fe>
 8004a8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a8e:	d006      	beq.n	8004a9e <UART_SetConfig+0x20a>
 8004a90:	e00b      	b.n	8004aaa <UART_SetConfig+0x216>
 8004a92:	2300      	movs	r3, #0
 8004a94:	77fb      	strb	r3, [r7, #31]
 8004a96:	e0a1      	b.n	8004bdc <UART_SetConfig+0x348>
 8004a98:	2302      	movs	r3, #2
 8004a9a:	77fb      	strb	r3, [r7, #31]
 8004a9c:	e09e      	b.n	8004bdc <UART_SetConfig+0x348>
 8004a9e:	2304      	movs	r3, #4
 8004aa0:	77fb      	strb	r3, [r7, #31]
 8004aa2:	e09b      	b.n	8004bdc <UART_SetConfig+0x348>
 8004aa4:	2308      	movs	r3, #8
 8004aa6:	77fb      	strb	r3, [r7, #31]
 8004aa8:	e098      	b.n	8004bdc <UART_SetConfig+0x348>
 8004aaa:	2310      	movs	r3, #16
 8004aac:	77fb      	strb	r3, [r7, #31]
 8004aae:	e095      	b.n	8004bdc <UART_SetConfig+0x348>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a2f      	ldr	r2, [pc, #188]	@ (8004b74 <UART_SetConfig+0x2e0>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d125      	bne.n	8004b06 <UART_SetConfig+0x272>
 8004aba:	4b29      	ldr	r3, [pc, #164]	@ (8004b60 <UART_SetConfig+0x2cc>)
 8004abc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ac0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004ac4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004ac8:	d017      	beq.n	8004afa <UART_SetConfig+0x266>
 8004aca:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004ace:	d817      	bhi.n	8004b00 <UART_SetConfig+0x26c>
 8004ad0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ad4:	d00b      	beq.n	8004aee <UART_SetConfig+0x25a>
 8004ad6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ada:	d811      	bhi.n	8004b00 <UART_SetConfig+0x26c>
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d003      	beq.n	8004ae8 <UART_SetConfig+0x254>
 8004ae0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ae4:	d006      	beq.n	8004af4 <UART_SetConfig+0x260>
 8004ae6:	e00b      	b.n	8004b00 <UART_SetConfig+0x26c>
 8004ae8:	2301      	movs	r3, #1
 8004aea:	77fb      	strb	r3, [r7, #31]
 8004aec:	e076      	b.n	8004bdc <UART_SetConfig+0x348>
 8004aee:	2302      	movs	r3, #2
 8004af0:	77fb      	strb	r3, [r7, #31]
 8004af2:	e073      	b.n	8004bdc <UART_SetConfig+0x348>
 8004af4:	2304      	movs	r3, #4
 8004af6:	77fb      	strb	r3, [r7, #31]
 8004af8:	e070      	b.n	8004bdc <UART_SetConfig+0x348>
 8004afa:	2308      	movs	r3, #8
 8004afc:	77fb      	strb	r3, [r7, #31]
 8004afe:	e06d      	b.n	8004bdc <UART_SetConfig+0x348>
 8004b00:	2310      	movs	r3, #16
 8004b02:	77fb      	strb	r3, [r7, #31]
 8004b04:	e06a      	b.n	8004bdc <UART_SetConfig+0x348>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a1b      	ldr	r2, [pc, #108]	@ (8004b78 <UART_SetConfig+0x2e4>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d138      	bne.n	8004b82 <UART_SetConfig+0x2ee>
 8004b10:	4b13      	ldr	r3, [pc, #76]	@ (8004b60 <UART_SetConfig+0x2cc>)
 8004b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b16:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004b1a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004b1e:	d017      	beq.n	8004b50 <UART_SetConfig+0x2bc>
 8004b20:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004b24:	d82a      	bhi.n	8004b7c <UART_SetConfig+0x2e8>
 8004b26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b2a:	d00b      	beq.n	8004b44 <UART_SetConfig+0x2b0>
 8004b2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b30:	d824      	bhi.n	8004b7c <UART_SetConfig+0x2e8>
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d003      	beq.n	8004b3e <UART_SetConfig+0x2aa>
 8004b36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b3a:	d006      	beq.n	8004b4a <UART_SetConfig+0x2b6>
 8004b3c:	e01e      	b.n	8004b7c <UART_SetConfig+0x2e8>
 8004b3e:	2300      	movs	r3, #0
 8004b40:	77fb      	strb	r3, [r7, #31]
 8004b42:	e04b      	b.n	8004bdc <UART_SetConfig+0x348>
 8004b44:	2302      	movs	r3, #2
 8004b46:	77fb      	strb	r3, [r7, #31]
 8004b48:	e048      	b.n	8004bdc <UART_SetConfig+0x348>
 8004b4a:	2304      	movs	r3, #4
 8004b4c:	77fb      	strb	r3, [r7, #31]
 8004b4e:	e045      	b.n	8004bdc <UART_SetConfig+0x348>
 8004b50:	2308      	movs	r3, #8
 8004b52:	77fb      	strb	r3, [r7, #31]
 8004b54:	e042      	b.n	8004bdc <UART_SetConfig+0x348>
 8004b56:	bf00      	nop
 8004b58:	efff69f3 	.word	0xefff69f3
 8004b5c:	40011000 	.word	0x40011000
 8004b60:	40023800 	.word	0x40023800
 8004b64:	40004400 	.word	0x40004400
 8004b68:	40004800 	.word	0x40004800
 8004b6c:	40004c00 	.word	0x40004c00
 8004b70:	40005000 	.word	0x40005000
 8004b74:	40011400 	.word	0x40011400
 8004b78:	40007800 	.word	0x40007800
 8004b7c:	2310      	movs	r3, #16
 8004b7e:	77fb      	strb	r3, [r7, #31]
 8004b80:	e02c      	b.n	8004bdc <UART_SetConfig+0x348>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a72      	ldr	r2, [pc, #456]	@ (8004d50 <UART_SetConfig+0x4bc>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d125      	bne.n	8004bd8 <UART_SetConfig+0x344>
 8004b8c:	4b71      	ldr	r3, [pc, #452]	@ (8004d54 <UART_SetConfig+0x4c0>)
 8004b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b92:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004b96:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004b9a:	d017      	beq.n	8004bcc <UART_SetConfig+0x338>
 8004b9c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004ba0:	d817      	bhi.n	8004bd2 <UART_SetConfig+0x33e>
 8004ba2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ba6:	d00b      	beq.n	8004bc0 <UART_SetConfig+0x32c>
 8004ba8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004bac:	d811      	bhi.n	8004bd2 <UART_SetConfig+0x33e>
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d003      	beq.n	8004bba <UART_SetConfig+0x326>
 8004bb2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004bb6:	d006      	beq.n	8004bc6 <UART_SetConfig+0x332>
 8004bb8:	e00b      	b.n	8004bd2 <UART_SetConfig+0x33e>
 8004bba:	2300      	movs	r3, #0
 8004bbc:	77fb      	strb	r3, [r7, #31]
 8004bbe:	e00d      	b.n	8004bdc <UART_SetConfig+0x348>
 8004bc0:	2302      	movs	r3, #2
 8004bc2:	77fb      	strb	r3, [r7, #31]
 8004bc4:	e00a      	b.n	8004bdc <UART_SetConfig+0x348>
 8004bc6:	2304      	movs	r3, #4
 8004bc8:	77fb      	strb	r3, [r7, #31]
 8004bca:	e007      	b.n	8004bdc <UART_SetConfig+0x348>
 8004bcc:	2308      	movs	r3, #8
 8004bce:	77fb      	strb	r3, [r7, #31]
 8004bd0:	e004      	b.n	8004bdc <UART_SetConfig+0x348>
 8004bd2:	2310      	movs	r3, #16
 8004bd4:	77fb      	strb	r3, [r7, #31]
 8004bd6:	e001      	b.n	8004bdc <UART_SetConfig+0x348>
 8004bd8:	2310      	movs	r3, #16
 8004bda:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	69db      	ldr	r3, [r3, #28]
 8004be0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004be4:	d15b      	bne.n	8004c9e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004be6:	7ffb      	ldrb	r3, [r7, #31]
 8004be8:	2b08      	cmp	r3, #8
 8004bea:	d828      	bhi.n	8004c3e <UART_SetConfig+0x3aa>
 8004bec:	a201      	add	r2, pc, #4	@ (adr r2, 8004bf4 <UART_SetConfig+0x360>)
 8004bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bf2:	bf00      	nop
 8004bf4:	08004c19 	.word	0x08004c19
 8004bf8:	08004c21 	.word	0x08004c21
 8004bfc:	08004c29 	.word	0x08004c29
 8004c00:	08004c3f 	.word	0x08004c3f
 8004c04:	08004c2f 	.word	0x08004c2f
 8004c08:	08004c3f 	.word	0x08004c3f
 8004c0c:	08004c3f 	.word	0x08004c3f
 8004c10:	08004c3f 	.word	0x08004c3f
 8004c14:	08004c37 	.word	0x08004c37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c18:	f7fe fa40 	bl	800309c <HAL_RCC_GetPCLK1Freq>
 8004c1c:	61b8      	str	r0, [r7, #24]
        break;
 8004c1e:	e013      	b.n	8004c48 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c20:	f7fe fa50 	bl	80030c4 <HAL_RCC_GetPCLK2Freq>
 8004c24:	61b8      	str	r0, [r7, #24]
        break;
 8004c26:	e00f      	b.n	8004c48 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c28:	4b4b      	ldr	r3, [pc, #300]	@ (8004d58 <UART_SetConfig+0x4c4>)
 8004c2a:	61bb      	str	r3, [r7, #24]
        break;
 8004c2c:	e00c      	b.n	8004c48 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c2e:	f7fe f923 	bl	8002e78 <HAL_RCC_GetSysClockFreq>
 8004c32:	61b8      	str	r0, [r7, #24]
        break;
 8004c34:	e008      	b.n	8004c48 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c3a:	61bb      	str	r3, [r7, #24]
        break;
 8004c3c:	e004      	b.n	8004c48 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	77bb      	strb	r3, [r7, #30]
        break;
 8004c46:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c48:	69bb      	ldr	r3, [r7, #24]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d074      	beq.n	8004d38 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c4e:	69bb      	ldr	r3, [r7, #24]
 8004c50:	005a      	lsls	r2, r3, #1
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	085b      	lsrs	r3, r3, #1
 8004c58:	441a      	add	r2, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c62:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	2b0f      	cmp	r3, #15
 8004c68:	d916      	bls.n	8004c98 <UART_SetConfig+0x404>
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c70:	d212      	bcs.n	8004c98 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	f023 030f 	bic.w	r3, r3, #15
 8004c7a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	085b      	lsrs	r3, r3, #1
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	f003 0307 	and.w	r3, r3, #7
 8004c86:	b29a      	uxth	r2, r3
 8004c88:	89fb      	ldrh	r3, [r7, #14]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	89fa      	ldrh	r2, [r7, #14]
 8004c94:	60da      	str	r2, [r3, #12]
 8004c96:	e04f      	b.n	8004d38 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	77bb      	strb	r3, [r7, #30]
 8004c9c:	e04c      	b.n	8004d38 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c9e:	7ffb      	ldrb	r3, [r7, #31]
 8004ca0:	2b08      	cmp	r3, #8
 8004ca2:	d828      	bhi.n	8004cf6 <UART_SetConfig+0x462>
 8004ca4:	a201      	add	r2, pc, #4	@ (adr r2, 8004cac <UART_SetConfig+0x418>)
 8004ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004caa:	bf00      	nop
 8004cac:	08004cd1 	.word	0x08004cd1
 8004cb0:	08004cd9 	.word	0x08004cd9
 8004cb4:	08004ce1 	.word	0x08004ce1
 8004cb8:	08004cf7 	.word	0x08004cf7
 8004cbc:	08004ce7 	.word	0x08004ce7
 8004cc0:	08004cf7 	.word	0x08004cf7
 8004cc4:	08004cf7 	.word	0x08004cf7
 8004cc8:	08004cf7 	.word	0x08004cf7
 8004ccc:	08004cef 	.word	0x08004cef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cd0:	f7fe f9e4 	bl	800309c <HAL_RCC_GetPCLK1Freq>
 8004cd4:	61b8      	str	r0, [r7, #24]
        break;
 8004cd6:	e013      	b.n	8004d00 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004cd8:	f7fe f9f4 	bl	80030c4 <HAL_RCC_GetPCLK2Freq>
 8004cdc:	61b8      	str	r0, [r7, #24]
        break;
 8004cde:	e00f      	b.n	8004d00 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ce0:	4b1d      	ldr	r3, [pc, #116]	@ (8004d58 <UART_SetConfig+0x4c4>)
 8004ce2:	61bb      	str	r3, [r7, #24]
        break;
 8004ce4:	e00c      	b.n	8004d00 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ce6:	f7fe f8c7 	bl	8002e78 <HAL_RCC_GetSysClockFreq>
 8004cea:	61b8      	str	r0, [r7, #24]
        break;
 8004cec:	e008      	b.n	8004d00 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004cf2:	61bb      	str	r3, [r7, #24]
        break;
 8004cf4:	e004      	b.n	8004d00 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	77bb      	strb	r3, [r7, #30]
        break;
 8004cfe:	bf00      	nop
    }

    if (pclk != 0U)
 8004d00:	69bb      	ldr	r3, [r7, #24]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d018      	beq.n	8004d38 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	085a      	lsrs	r2, r3, #1
 8004d0c:	69bb      	ldr	r3, [r7, #24]
 8004d0e:	441a      	add	r2, r3
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d18:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	2b0f      	cmp	r3, #15
 8004d1e:	d909      	bls.n	8004d34 <UART_SetConfig+0x4a0>
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d26:	d205      	bcs.n	8004d34 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	b29a      	uxth	r2, r3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	60da      	str	r2, [r3, #12]
 8004d32:	e001      	b.n	8004d38 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2200      	movs	r2, #0
 8004d42:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004d44:	7fbb      	ldrb	r3, [r7, #30]
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3720      	adds	r7, #32
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	40007c00 	.word	0x40007c00
 8004d54:	40023800 	.word	0x40023800
 8004d58:	00f42400 	.word	0x00f42400

08004d5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d68:	f003 0308 	and.w	r3, r3, #8
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d00a      	beq.n	8004d86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	430a      	orrs	r2, r1
 8004d84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d8a:	f003 0301 	and.w	r3, r3, #1
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d00a      	beq.n	8004da8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	430a      	orrs	r2, r1
 8004da6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dac:	f003 0302 	and.w	r3, r3, #2
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d00a      	beq.n	8004dca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	430a      	orrs	r2, r1
 8004dc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dce:	f003 0304 	and.w	r3, r3, #4
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d00a      	beq.n	8004dec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	430a      	orrs	r2, r1
 8004dea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004df0:	f003 0310 	and.w	r3, r3, #16
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d00a      	beq.n	8004e0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	430a      	orrs	r2, r1
 8004e0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e12:	f003 0320 	and.w	r3, r3, #32
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d00a      	beq.n	8004e30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	430a      	orrs	r2, r1
 8004e2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d01a      	beq.n	8004e72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	430a      	orrs	r2, r1
 8004e50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e5a:	d10a      	bne.n	8004e72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	430a      	orrs	r2, r1
 8004e70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d00a      	beq.n	8004e94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	430a      	orrs	r2, r1
 8004e92:	605a      	str	r2, [r3, #4]
  }
}
 8004e94:	bf00      	nop
 8004e96:	370c      	adds	r7, #12
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr

08004ea0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b098      	sub	sp, #96	@ 0x60
 8004ea4:	af02      	add	r7, sp, #8
 8004ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004eb0:	f7fc fb4a 	bl	8001548 <HAL_GetTick>
 8004eb4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0308 	and.w	r3, r3, #8
 8004ec0:	2b08      	cmp	r3, #8
 8004ec2:	d12e      	bne.n	8004f22 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ec4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004ec8:	9300      	str	r3, [sp, #0]
 8004eca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f000 f88c 	bl	8004ff0 <UART_WaitOnFlagUntilTimeout>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d021      	beq.n	8004f22 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ee6:	e853 3f00 	ldrex	r3, [r3]
 8004eea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004eec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004eee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ef2:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	461a      	mov	r2, r3
 8004efa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004efc:	647b      	str	r3, [r7, #68]	@ 0x44
 8004efe:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f00:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004f02:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f04:	e841 2300 	strex	r3, r2, [r1]
 8004f08:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004f0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d1e6      	bne.n	8004ede <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2220      	movs	r2, #32
 8004f14:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	e062      	b.n	8004fe8 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 0304 	and.w	r3, r3, #4
 8004f2c:	2b04      	cmp	r3, #4
 8004f2e:	d149      	bne.n	8004fc4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f30:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004f34:	9300      	str	r3, [sp, #0]
 8004f36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f000 f856 	bl	8004ff0 <UART_WaitOnFlagUntilTimeout>
 8004f44:	4603      	mov	r3, r0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d03c      	beq.n	8004fc4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f52:	e853 3f00 	ldrex	r3, [r3]
 8004f56:	623b      	str	r3, [r7, #32]
   return(result);
 8004f58:	6a3b      	ldr	r3, [r7, #32]
 8004f5a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	461a      	mov	r2, r3
 8004f66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f68:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f6c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f70:	e841 2300 	strex	r3, r2, [r1]
 8004f74:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d1e6      	bne.n	8004f4a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	3308      	adds	r3, #8
 8004f82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	e853 3f00 	ldrex	r3, [r3]
 8004f8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f023 0301 	bic.w	r3, r3, #1
 8004f92:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	3308      	adds	r3, #8
 8004f9a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f9c:	61fa      	str	r2, [r7, #28]
 8004f9e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa0:	69b9      	ldr	r1, [r7, #24]
 8004fa2:	69fa      	ldr	r2, [r7, #28]
 8004fa4:	e841 2300 	strex	r3, r2, [r1]
 8004fa8:	617b      	str	r3, [r7, #20]
   return(result);
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d1e5      	bne.n	8004f7c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2220      	movs	r2, #32
 8004fb4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004fc0:	2303      	movs	r3, #3
 8004fc2:	e011      	b.n	8004fe8 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2220      	movs	r2, #32
 8004fc8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2220      	movs	r2, #32
 8004fce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004fe6:	2300      	movs	r3, #0
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3758      	adds	r7, #88	@ 0x58
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	60b9      	str	r1, [r7, #8]
 8004ffa:	603b      	str	r3, [r7, #0]
 8004ffc:	4613      	mov	r3, r2
 8004ffe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005000:	e04f      	b.n	80050a2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005002:	69bb      	ldr	r3, [r7, #24]
 8005004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005008:	d04b      	beq.n	80050a2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800500a:	f7fc fa9d 	bl	8001548 <HAL_GetTick>
 800500e:	4602      	mov	r2, r0
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	1ad3      	subs	r3, r2, r3
 8005014:	69ba      	ldr	r2, [r7, #24]
 8005016:	429a      	cmp	r2, r3
 8005018:	d302      	bcc.n	8005020 <UART_WaitOnFlagUntilTimeout+0x30>
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d101      	bne.n	8005024 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005020:	2303      	movs	r3, #3
 8005022:	e04e      	b.n	80050c2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 0304 	and.w	r3, r3, #4
 800502e:	2b00      	cmp	r3, #0
 8005030:	d037      	beq.n	80050a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	2b80      	cmp	r3, #128	@ 0x80
 8005036:	d034      	beq.n	80050a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	2b40      	cmp	r3, #64	@ 0x40
 800503c:	d031      	beq.n	80050a2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	69db      	ldr	r3, [r3, #28]
 8005044:	f003 0308 	and.w	r3, r3, #8
 8005048:	2b08      	cmp	r3, #8
 800504a:	d110      	bne.n	800506e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	2208      	movs	r2, #8
 8005052:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005054:	68f8      	ldr	r0, [r7, #12]
 8005056:	f000 f838 	bl	80050ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2208      	movs	r2, #8
 800505e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2200      	movs	r2, #0
 8005066:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	e029      	b.n	80050c2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	69db      	ldr	r3, [r3, #28]
 8005074:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005078:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800507c:	d111      	bne.n	80050a2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005086:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005088:	68f8      	ldr	r0, [r7, #12]
 800508a:	f000 f81e 	bl	80050ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2220      	movs	r2, #32
 8005092:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2200      	movs	r2, #0
 800509a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800509e:	2303      	movs	r3, #3
 80050a0:	e00f      	b.n	80050c2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	69da      	ldr	r2, [r3, #28]
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	4013      	ands	r3, r2
 80050ac:	68ba      	ldr	r2, [r7, #8]
 80050ae:	429a      	cmp	r2, r3
 80050b0:	bf0c      	ite	eq
 80050b2:	2301      	moveq	r3, #1
 80050b4:	2300      	movne	r3, #0
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	461a      	mov	r2, r3
 80050ba:	79fb      	ldrb	r3, [r7, #7]
 80050bc:	429a      	cmp	r2, r3
 80050be:	d0a0      	beq.n	8005002 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80050c0:	2300      	movs	r3, #0
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3710      	adds	r7, #16
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}

080050ca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050ca:	b480      	push	{r7}
 80050cc:	b095      	sub	sp, #84	@ 0x54
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050da:	e853 3f00 	ldrex	r3, [r3]
 80050de:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80050e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050e2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80050e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	461a      	mov	r2, r3
 80050ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80050f2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80050f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80050f8:	e841 2300 	strex	r3, r2, [r1]
 80050fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80050fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005100:	2b00      	cmp	r3, #0
 8005102:	d1e6      	bne.n	80050d2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	3308      	adds	r3, #8
 800510a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800510c:	6a3b      	ldr	r3, [r7, #32]
 800510e:	e853 3f00 	ldrex	r3, [r3]
 8005112:	61fb      	str	r3, [r7, #28]
   return(result);
 8005114:	69fb      	ldr	r3, [r7, #28]
 8005116:	f023 0301 	bic.w	r3, r3, #1
 800511a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	3308      	adds	r3, #8
 8005122:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005124:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005126:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005128:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800512a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800512c:	e841 2300 	strex	r3, r2, [r1]
 8005130:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005134:	2b00      	cmp	r3, #0
 8005136:	d1e5      	bne.n	8005104 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800513c:	2b01      	cmp	r3, #1
 800513e:	d118      	bne.n	8005172 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	e853 3f00 	ldrex	r3, [r3]
 800514c:	60bb      	str	r3, [r7, #8]
   return(result);
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	f023 0310 	bic.w	r3, r3, #16
 8005154:	647b      	str	r3, [r7, #68]	@ 0x44
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	461a      	mov	r2, r3
 800515c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800515e:	61bb      	str	r3, [r7, #24]
 8005160:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005162:	6979      	ldr	r1, [r7, #20]
 8005164:	69ba      	ldr	r2, [r7, #24]
 8005166:	e841 2300 	strex	r3, r2, [r1]
 800516a:	613b      	str	r3, [r7, #16]
   return(result);
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d1e6      	bne.n	8005140 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2220      	movs	r2, #32
 8005176:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2200      	movs	r2, #0
 8005184:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005186:	bf00      	nop
 8005188:	3754      	adds	r7, #84	@ 0x54
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr
	...

08005194 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005194:	b084      	sub	sp, #16
 8005196:	b580      	push	{r7, lr}
 8005198:	b084      	sub	sp, #16
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]
 800519e:	f107 001c 	add.w	r0, r7, #28
 80051a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80051a6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d121      	bne.n	80051f2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051b2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	68da      	ldr	r2, [r3, #12]
 80051be:	4b21      	ldr	r3, [pc, #132]	@ (8005244 <USB_CoreInit+0xb0>)
 80051c0:	4013      	ands	r3, r2
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80051d2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d105      	bne.n	80051e6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	68db      	ldr	r3, [r3, #12]
 80051de:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 fa92 	bl	8005710 <USB_CoreReset>
 80051ec:	4603      	mov	r3, r0
 80051ee:	73fb      	strb	r3, [r7, #15]
 80051f0:	e010      	b.n	8005214 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 fa86 	bl	8005710 <USB_CoreReset>
 8005204:	4603      	mov	r3, r0
 8005206:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800520c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8005214:	7fbb      	ldrb	r3, [r7, #30]
 8005216:	2b01      	cmp	r3, #1
 8005218:	d10b      	bne.n	8005232 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	f043 0206 	orr.w	r2, r3, #6
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	f043 0220 	orr.w	r2, r3, #32
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005232:	7bfb      	ldrb	r3, [r7, #15]
}
 8005234:	4618      	mov	r0, r3
 8005236:	3710      	adds	r7, #16
 8005238:	46bd      	mov	sp, r7
 800523a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800523e:	b004      	add	sp, #16
 8005240:	4770      	bx	lr
 8005242:	bf00      	nop
 8005244:	ffbdffbf 	.word	0xffbdffbf

08005248 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005248:	b480      	push	{r7}
 800524a:	b083      	sub	sp, #12
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	f023 0201 	bic.w	r2, r3, #1
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800525c:	2300      	movs	r3, #0
}
 800525e:	4618      	mov	r0, r3
 8005260:	370c      	adds	r7, #12
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr

0800526a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800526a:	b580      	push	{r7, lr}
 800526c:	b084      	sub	sp, #16
 800526e:	af00      	add	r7, sp, #0
 8005270:	6078      	str	r0, [r7, #4]
 8005272:	460b      	mov	r3, r1
 8005274:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005276:	2300      	movs	r3, #0
 8005278:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005286:	78fb      	ldrb	r3, [r7, #3]
 8005288:	2b01      	cmp	r3, #1
 800528a:	d115      	bne.n	80052b8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005298:	200a      	movs	r0, #10
 800529a:	f7fc f961 	bl	8001560 <HAL_Delay>
      ms += 10U;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	330a      	adds	r3, #10
 80052a2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f000 fa25 	bl	80056f4 <USB_GetMode>
 80052aa:	4603      	mov	r3, r0
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d01e      	beq.n	80052ee <USB_SetCurrentMode+0x84>
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2bc7      	cmp	r3, #199	@ 0xc7
 80052b4:	d9f0      	bls.n	8005298 <USB_SetCurrentMode+0x2e>
 80052b6:	e01a      	b.n	80052ee <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80052b8:	78fb      	ldrb	r3, [r7, #3]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d115      	bne.n	80052ea <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80052ca:	200a      	movs	r0, #10
 80052cc:	f7fc f948 	bl	8001560 <HAL_Delay>
      ms += 10U;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	330a      	adds	r3, #10
 80052d4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f000 fa0c 	bl	80056f4 <USB_GetMode>
 80052dc:	4603      	mov	r3, r0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d005      	beq.n	80052ee <USB_SetCurrentMode+0x84>
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2bc7      	cmp	r3, #199	@ 0xc7
 80052e6:	d9f0      	bls.n	80052ca <USB_SetCurrentMode+0x60>
 80052e8:	e001      	b.n	80052ee <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e005      	b.n	80052fa <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2bc8      	cmp	r3, #200	@ 0xc8
 80052f2:	d101      	bne.n	80052f8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	e000      	b.n	80052fa <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80052f8:	2300      	movs	r3, #0
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3710      	adds	r7, #16
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
	...

08005304 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005304:	b084      	sub	sp, #16
 8005306:	b580      	push	{r7, lr}
 8005308:	b086      	sub	sp, #24
 800530a:	af00      	add	r7, sp, #0
 800530c:	6078      	str	r0, [r7, #4]
 800530e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005312:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005316:	2300      	movs	r3, #0
 8005318:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800531e:	2300      	movs	r3, #0
 8005320:	613b      	str	r3, [r7, #16]
 8005322:	e009      	b.n	8005338 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	3340      	adds	r3, #64	@ 0x40
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	4413      	add	r3, r2
 800532e:	2200      	movs	r2, #0
 8005330:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	3301      	adds	r3, #1
 8005336:	613b      	str	r3, [r7, #16]
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	2b0e      	cmp	r3, #14
 800533c:	d9f2      	bls.n	8005324 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800533e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005342:	2b00      	cmp	r3, #0
 8005344:	d11c      	bne.n	8005380 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	68fa      	ldr	r2, [r7, #12]
 8005350:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005354:	f043 0302 	orr.w	r3, r3, #2
 8005358:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800535e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	601a      	str	r2, [r3, #0]
 800537e:	e005      	b.n	800538c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005384:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005392:	461a      	mov	r2, r3
 8005394:	2300      	movs	r3, #0
 8005396:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005398:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800539c:	2b01      	cmp	r3, #1
 800539e:	d10d      	bne.n	80053bc <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80053a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d104      	bne.n	80053b2 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80053a8:	2100      	movs	r1, #0
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 f968 	bl	8005680 <USB_SetDevSpeed>
 80053b0:	e008      	b.n	80053c4 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80053b2:	2101      	movs	r1, #1
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f000 f963 	bl	8005680 <USB_SetDevSpeed>
 80053ba:	e003      	b.n	80053c4 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80053bc:	2103      	movs	r1, #3
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f000 f95e 	bl	8005680 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80053c4:	2110      	movs	r1, #16
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f000 f8fa 	bl	80055c0 <USB_FlushTxFifo>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d001      	beq.n	80053d6 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 f924 	bl	8005624 <USB_FlushRxFifo>
 80053dc:	4603      	mov	r3, r0
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d001      	beq.n	80053e6 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053ec:	461a      	mov	r2, r3
 80053ee:	2300      	movs	r3, #0
 80053f0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053f8:	461a      	mov	r2, r3
 80053fa:	2300      	movs	r3, #0
 80053fc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005404:	461a      	mov	r2, r3
 8005406:	2300      	movs	r3, #0
 8005408:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800540a:	2300      	movs	r3, #0
 800540c:	613b      	str	r3, [r7, #16]
 800540e:	e043      	b.n	8005498 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	015a      	lsls	r2, r3, #5
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	4413      	add	r3, r2
 8005418:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005422:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005426:	d118      	bne.n	800545a <USB_DevInit+0x156>
    {
      if (i == 0U)
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d10a      	bne.n	8005444 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	015a      	lsls	r2, r3, #5
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	4413      	add	r3, r2
 8005436:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800543a:	461a      	mov	r2, r3
 800543c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005440:	6013      	str	r3, [r2, #0]
 8005442:	e013      	b.n	800546c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	015a      	lsls	r2, r3, #5
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	4413      	add	r3, r2
 800544c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005450:	461a      	mov	r2, r3
 8005452:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005456:	6013      	str	r3, [r2, #0]
 8005458:	e008      	b.n	800546c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	015a      	lsls	r2, r3, #5
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	4413      	add	r3, r2
 8005462:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005466:	461a      	mov	r2, r3
 8005468:	2300      	movs	r3, #0
 800546a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	015a      	lsls	r2, r3, #5
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	4413      	add	r3, r2
 8005474:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005478:	461a      	mov	r2, r3
 800547a:	2300      	movs	r3, #0
 800547c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	015a      	lsls	r2, r3, #5
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	4413      	add	r3, r2
 8005486:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800548a:	461a      	mov	r2, r3
 800548c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005490:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	3301      	adds	r3, #1
 8005496:	613b      	str	r3, [r7, #16]
 8005498:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800549c:	461a      	mov	r2, r3
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d3b5      	bcc.n	8005410 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054a4:	2300      	movs	r3, #0
 80054a6:	613b      	str	r3, [r7, #16]
 80054a8:	e043      	b.n	8005532 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	015a      	lsls	r2, r3, #5
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	4413      	add	r3, r2
 80054b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80054bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80054c0:	d118      	bne.n	80054f4 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d10a      	bne.n	80054de <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	015a      	lsls	r2, r3, #5
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	4413      	add	r3, r2
 80054d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054d4:	461a      	mov	r2, r3
 80054d6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80054da:	6013      	str	r3, [r2, #0]
 80054dc:	e013      	b.n	8005506 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	015a      	lsls	r2, r3, #5
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	4413      	add	r3, r2
 80054e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054ea:	461a      	mov	r2, r3
 80054ec:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80054f0:	6013      	str	r3, [r2, #0]
 80054f2:	e008      	b.n	8005506 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	015a      	lsls	r2, r3, #5
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	4413      	add	r3, r2
 80054fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005500:	461a      	mov	r2, r3
 8005502:	2300      	movs	r3, #0
 8005504:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	015a      	lsls	r2, r3, #5
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	4413      	add	r3, r2
 800550e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005512:	461a      	mov	r2, r3
 8005514:	2300      	movs	r3, #0
 8005516:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	015a      	lsls	r2, r3, #5
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	4413      	add	r3, r2
 8005520:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005524:	461a      	mov	r2, r3
 8005526:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800552a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	3301      	adds	r3, #1
 8005530:	613b      	str	r3, [r7, #16]
 8005532:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005536:	461a      	mov	r2, r3
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	4293      	cmp	r3, r2
 800553c:	d3b5      	bcc.n	80054aa <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005544:	691b      	ldr	r3, [r3, #16]
 8005546:	68fa      	ldr	r2, [r7, #12]
 8005548:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800554c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005550:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800555e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005560:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005564:	2b00      	cmp	r3, #0
 8005566:	d105      	bne.n	8005574 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	699b      	ldr	r3, [r3, #24]
 800556c:	f043 0210 	orr.w	r2, r3, #16
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	699a      	ldr	r2, [r3, #24]
 8005578:	4b0f      	ldr	r3, [pc, #60]	@ (80055b8 <USB_DevInit+0x2b4>)
 800557a:	4313      	orrs	r3, r2
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005580:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005584:	2b00      	cmp	r3, #0
 8005586:	d005      	beq.n	8005594 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	699b      	ldr	r3, [r3, #24]
 800558c:	f043 0208 	orr.w	r2, r3, #8
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005594:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005598:	2b01      	cmp	r3, #1
 800559a:	d105      	bne.n	80055a8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	699a      	ldr	r2, [r3, #24]
 80055a0:	4b06      	ldr	r3, [pc, #24]	@ (80055bc <USB_DevInit+0x2b8>)
 80055a2:	4313      	orrs	r3, r2
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80055a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3718      	adds	r7, #24
 80055ae:	46bd      	mov	sp, r7
 80055b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80055b4:	b004      	add	sp, #16
 80055b6:	4770      	bx	lr
 80055b8:	803c3800 	.word	0x803c3800
 80055bc:	40000004 	.word	0x40000004

080055c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b085      	sub	sp, #20
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80055ca:	2300      	movs	r3, #0
 80055cc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	3301      	adds	r3, #1
 80055d2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80055da:	d901      	bls.n	80055e0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80055dc:	2303      	movs	r3, #3
 80055de:	e01b      	b.n	8005618 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	691b      	ldr	r3, [r3, #16]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	daf2      	bge.n	80055ce <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80055e8:	2300      	movs	r3, #0
 80055ea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	019b      	lsls	r3, r3, #6
 80055f0:	f043 0220 	orr.w	r2, r3, #32
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	3301      	adds	r3, #1
 80055fc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005604:	d901      	bls.n	800560a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005606:	2303      	movs	r3, #3
 8005608:	e006      	b.n	8005618 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	691b      	ldr	r3, [r3, #16]
 800560e:	f003 0320 	and.w	r3, r3, #32
 8005612:	2b20      	cmp	r3, #32
 8005614:	d0f0      	beq.n	80055f8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005616:	2300      	movs	r3, #0
}
 8005618:	4618      	mov	r0, r3
 800561a:	3714      	adds	r7, #20
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr

08005624 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005624:	b480      	push	{r7}
 8005626:	b085      	sub	sp, #20
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800562c:	2300      	movs	r3, #0
 800562e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	3301      	adds	r3, #1
 8005634:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800563c:	d901      	bls.n	8005642 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800563e:	2303      	movs	r3, #3
 8005640:	e018      	b.n	8005674 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	691b      	ldr	r3, [r3, #16]
 8005646:	2b00      	cmp	r3, #0
 8005648:	daf2      	bge.n	8005630 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800564a:	2300      	movs	r3, #0
 800564c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2210      	movs	r2, #16
 8005652:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	3301      	adds	r3, #1
 8005658:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005660:	d901      	bls.n	8005666 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005662:	2303      	movs	r3, #3
 8005664:	e006      	b.n	8005674 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	f003 0310 	and.w	r3, r3, #16
 800566e:	2b10      	cmp	r3, #16
 8005670:	d0f0      	beq.n	8005654 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005672:	2300      	movs	r3, #0
}
 8005674:	4618      	mov	r0, r3
 8005676:	3714      	adds	r7, #20
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr

08005680 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005680:	b480      	push	{r7}
 8005682:	b085      	sub	sp, #20
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	460b      	mov	r3, r1
 800568a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	78fb      	ldrb	r3, [r7, #3]
 800569a:	68f9      	ldr	r1, [r7, #12]
 800569c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80056a0:	4313      	orrs	r3, r2
 80056a2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80056a4:	2300      	movs	r3, #0
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3714      	adds	r7, #20
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr

080056b2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80056b2:	b480      	push	{r7}
 80056b4:	b085      	sub	sp, #20
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	68fa      	ldr	r2, [r7, #12]
 80056c8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80056cc:	f023 0303 	bic.w	r3, r3, #3
 80056d0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	68fa      	ldr	r2, [r7, #12]
 80056dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80056e0:	f043 0302 	orr.w	r3, r3, #2
 80056e4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80056e6:	2300      	movs	r3, #0
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3714      	adds	r7, #20
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b083      	sub	sp, #12
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	695b      	ldr	r3, [r3, #20]
 8005700:	f003 0301 	and.w	r3, r3, #1
}
 8005704:	4618      	mov	r0, r3
 8005706:	370c      	adds	r7, #12
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr

08005710 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005710:	b480      	push	{r7}
 8005712:	b085      	sub	sp, #20
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005718:	2300      	movs	r3, #0
 800571a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	3301      	adds	r3, #1
 8005720:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005728:	d901      	bls.n	800572e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800572a:	2303      	movs	r3, #3
 800572c:	e022      	b.n	8005774 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	691b      	ldr	r3, [r3, #16]
 8005732:	2b00      	cmp	r3, #0
 8005734:	daf2      	bge.n	800571c <USB_CoreReset+0xc>

  count = 10U;
 8005736:	230a      	movs	r3, #10
 8005738:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800573a:	e002      	b.n	8005742 <USB_CoreReset+0x32>
  {
    count--;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	3b01      	subs	r3, #1
 8005740:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d1f9      	bne.n	800573c <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	691b      	ldr	r3, [r3, #16]
 800574c:	f043 0201 	orr.w	r2, r3, #1
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	3301      	adds	r3, #1
 8005758:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005760:	d901      	bls.n	8005766 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8005762:	2303      	movs	r3, #3
 8005764:	e006      	b.n	8005774 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	691b      	ldr	r3, [r3, #16]
 800576a:	f003 0301 	and.w	r3, r3, #1
 800576e:	2b01      	cmp	r3, #1
 8005770:	d0f0      	beq.n	8005754 <USB_CoreReset+0x44>

  return HAL_OK;
 8005772:	2300      	movs	r3, #0
}
 8005774:	4618      	mov	r0, r3
 8005776:	3714      	adds	r7, #20
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr

08005780 <ETH_IRQHandler>:
/*                              IRQ Handlers                                 */
/*===========================================================================*/
/*---------------------------------------------------------------------------*/

void ETH_IRQHandler( void )
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b082      	sub	sp, #8
 8005784:	af00      	add	r7, sp, #0
    traceISR_ENTER();

    ETH_HandleTypeDef * pxEthHandle = &xEthHandle;
 8005786:	4b0c      	ldr	r3, [pc, #48]	@ (80057b8 <ETH_IRQHandler+0x38>)
 8005788:	607b      	str	r3, [r7, #4]

    xSwitchRequired = pdFALSE;
 800578a:	4b0c      	ldr	r3, [pc, #48]	@ (80057bc <ETH_IRQHandler+0x3c>)
 800578c:	2200      	movs	r2, #0
 800578e:	601a      	str	r2, [r3, #0]
    HAL_ETH_IRQHandler( pxEthHandle );
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f7fc f8fd 	bl	8001990 <HAL_ETH_IRQHandler>

    portYIELD_FROM_ISR( xSwitchRequired );
 8005796:	4b09      	ldr	r3, [pc, #36]	@ (80057bc <ETH_IRQHandler+0x3c>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d007      	beq.n	80057ae <ETH_IRQHandler+0x2e>
 800579e:	4b08      	ldr	r3, [pc, #32]	@ (80057c0 <ETH_IRQHandler+0x40>)
 80057a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057a4:	601a      	str	r2, [r3, #0]
 80057a6:	f3bf 8f4f 	dsb	sy
 80057aa:	f3bf 8f6f 	isb	sy
}
 80057ae:	bf00      	nop
 80057b0:	3708      	adds	r7, #8
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}
 80057b6:	bf00      	nop
 80057b8:	200007ac 	.word	0x200007ac
 80057bc:	20000860 	.word	0x20000860
 80057c0:	e000ed04 	.word	0xe000ed04

080057c4 <HAL_ETH_ErrorCallback>:

/*---------------------------------------------------------------------------*/

void HAL_ETH_ErrorCallback( ETH_HandleTypeDef * pxEthHandle )
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b088      	sub	sp, #32
 80057c8:	af02      	add	r7, sp, #8
 80057ca:	6078      	str	r0, [r7, #4]
    eMAC_IF_EVENT eErrorEvents = eMacEventNone;
 80057cc:	2300      	movs	r3, #0
 80057ce:	75fb      	strb	r3, [r7, #23]

    if( pxEthHandle->gState == HAL_ETH_STATE_ERROR )
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80057d6:	2be0      	cmp	r3, #224	@ 0xe0
 80057d8:	d103      	bne.n	80057e2 <HAL_ETH_ErrorCallback+0x1e>
    {
        /* Fatal bus error occurred */
        eErrorEvents |= eMacEventErrEth;
 80057da:	7dfb      	ldrb	r3, [r7, #23]
 80057dc:	f043 0320 	orr.w	r3, r3, #32
 80057e0:	75fb      	strb	r3, [r7, #23]
    }

    if( ( pxEthHandle->ErrorCode & HAL_ETH_ERROR_DMA ) != 0 )
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057e8:	f003 0308 	and.w	r3, r3, #8
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d019      	beq.n	8005824 <HAL_ETH_ErrorCallback+0x60>
    {
        eErrorEvents |= eMacEventErrDma;
 80057f0:	7dfb      	ldrb	r3, [r7, #23]
 80057f2:	f043 0310 	orr.w	r3, r3, #16
 80057f6:	75fb      	strb	r3, [r7, #23]
        const uint32_t ulDmaError = pxEthHandle->DMAErrorCode;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80057fe:	613b      	str	r3, [r7, #16]

        if( ( ulDmaError & ETH_DMA_TX_BUFFER_UNAVAILABLE_FLAG ) != 0 )
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	f003 0304 	and.w	r3, r3, #4
 8005806:	2b00      	cmp	r3, #0
 8005808:	d003      	beq.n	8005812 <HAL_ETH_ErrorCallback+0x4e>
        {
            eErrorEvents |= eMacEventErrTx;
 800580a:	7dfb      	ldrb	r3, [r7, #23]
 800580c:	f043 0308 	orr.w	r3, r3, #8
 8005810:	75fb      	strb	r3, [r7, #23]
        }

        if( ( ulDmaError & ETH_DMA_RX_BUFFER_UNAVAILABLE_FLAG ) != 0 )
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005818:	2b00      	cmp	r3, #0
 800581a:	d003      	beq.n	8005824 <HAL_ETH_ErrorCallback+0x60>
        {
            eErrorEvents |= eMacEventErrRx;
 800581c:	7dfb      	ldrb	r3, [r7, #23]
 800581e:	f043 0304 	orr.w	r3, r3, #4
 8005822:	75fb      	strb	r3, [r7, #23]
        }
    }

    if( ( pxEthHandle->ErrorCode & HAL_ETH_ERROR_MAC ) != 0 )
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800582a:	f003 0310 	and.w	r3, r3, #16
 800582e:	2b00      	cmp	r3, #0
 8005830:	d003      	beq.n	800583a <HAL_ETH_ErrorCallback+0x76>
    {
        eErrorEvents |= eMacEventErrMac;
 8005832:	7dfb      	ldrb	r3, [r7, #23]
 8005834:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005838:	75fb      	strb	r3, [r7, #23]
    }

    if( ( xEMACTaskHandle != NULL ) && ( eErrorEvents != eMacEventNone ) )
 800583a:	4b0e      	ldr	r3, [pc, #56]	@ (8005874 <HAL_ETH_ErrorCallback+0xb0>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d014      	beq.n	800586c <HAL_ETH_ErrorCallback+0xa8>
 8005842:	7dfb      	ldrb	r3, [r7, #23]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d011      	beq.n	800586c <HAL_ETH_ErrorCallback+0xa8>
    {
        BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8005848:	2300      	movs	r3, #0
 800584a:	60fb      	str	r3, [r7, #12]
        ( void ) xTaskNotifyFromISR( xEMACTaskHandle, eErrorEvents, eSetBits, &xHigherPriorityTaskWoken );
 800584c:	4b09      	ldr	r3, [pc, #36]	@ (8005874 <HAL_ETH_ErrorCallback+0xb0>)
 800584e:	6818      	ldr	r0, [r3, #0]
 8005850:	7df9      	ldrb	r1, [r7, #23]
 8005852:	f107 030c 	add.w	r3, r7, #12
 8005856:	9300      	str	r3, [sp, #0]
 8005858:	2300      	movs	r3, #0
 800585a:	2201      	movs	r2, #1
 800585c:	f001 fec0 	bl	80075e0 <xTaskGenericNotifyFromISR>
        xSwitchRequired |= xHigherPriorityTaskWoken;
 8005860:	4b05      	ldr	r3, [pc, #20]	@ (8005878 <HAL_ETH_ErrorCallback+0xb4>)
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	4313      	orrs	r3, r2
 8005868:	4a03      	ldr	r2, [pc, #12]	@ (8005878 <HAL_ETH_ErrorCallback+0xb4>)
 800586a:	6013      	str	r3, [r2, #0]
    }
}
 800586c:	bf00      	nop
 800586e:	3718      	adds	r7, #24
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}
 8005874:	2000085c 	.word	0x2000085c
 8005878:	20000860 	.word	0x20000860

0800587c <HAL_ETH_RxCpltCallback>:

/*---------------------------------------------------------------------------*/

void HAL_ETH_RxCpltCallback( ETH_HandleTypeDef * pxEthHandle )
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b086      	sub	sp, #24
 8005880:	af02      	add	r7, sp, #8
 8005882:	6078      	str	r0, [r7, #4]
    static size_t uxMostRXDescsUsed = 0U;

    const size_t uxRxUsed = pxEthHandle->RxDescList.RxDescCnt;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005888:	60fb      	str	r3, [r7, #12]

    if( uxMostRXDescsUsed < uxRxUsed )
 800588a:	4b11      	ldr	r3, [pc, #68]	@ (80058d0 <HAL_ETH_RxCpltCallback+0x54>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	68fa      	ldr	r2, [r7, #12]
 8005890:	429a      	cmp	r2, r3
 8005892:	d902      	bls.n	800589a <HAL_ETH_RxCpltCallback+0x1e>
    {
        uxMostRXDescsUsed = uxRxUsed;
 8005894:	4a0e      	ldr	r2, [pc, #56]	@ (80058d0 <HAL_ETH_RxCpltCallback+0x54>)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	6013      	str	r3, [r2, #0]
    }

    iptraceNETWORK_INTERFACE_RECEIVE();

    if( xEMACTaskHandle != NULL )
 800589a:	4b0e      	ldr	r3, [pc, #56]	@ (80058d4 <HAL_ETH_RxCpltCallback+0x58>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d011      	beq.n	80058c6 <HAL_ETH_RxCpltCallback+0x4a>
    {
        BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80058a2:	2300      	movs	r3, #0
 80058a4:	60bb      	str	r3, [r7, #8]
        ( void ) xTaskNotifyFromISR( xEMACTaskHandle, eMacEventRx, eSetBits, &xHigherPriorityTaskWoken );
 80058a6:	4b0b      	ldr	r3, [pc, #44]	@ (80058d4 <HAL_ETH_RxCpltCallback+0x58>)
 80058a8:	6818      	ldr	r0, [r3, #0]
 80058aa:	f107 0308 	add.w	r3, r7, #8
 80058ae:	9300      	str	r3, [sp, #0]
 80058b0:	2300      	movs	r3, #0
 80058b2:	2201      	movs	r2, #1
 80058b4:	2101      	movs	r1, #1
 80058b6:	f001 fe93 	bl	80075e0 <xTaskGenericNotifyFromISR>
        xSwitchRequired |= xHigherPriorityTaskWoken;
 80058ba:	4b07      	ldr	r3, [pc, #28]	@ (80058d8 <HAL_ETH_RxCpltCallback+0x5c>)
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	4313      	orrs	r3, r2
 80058c2:	4a05      	ldr	r2, [pc, #20]	@ (80058d8 <HAL_ETH_RxCpltCallback+0x5c>)
 80058c4:	6013      	str	r3, [r2, #0]
    }
}
 80058c6:	bf00      	nop
 80058c8:	3710      	adds	r7, #16
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
 80058ce:	bf00      	nop
 80058d0:	20000864 	.word	0x20000864
 80058d4:	2000085c 	.word	0x2000085c
 80058d8:	20000860 	.word	0x20000860

080058dc <HAL_ETH_TxCpltCallback>:

/*---------------------------------------------------------------------------*/

void HAL_ETH_TxCpltCallback( ETH_HandleTypeDef * pxEthHandle )
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b086      	sub	sp, #24
 80058e0:	af02      	add	r7, sp, #8
 80058e2:	6078      	str	r0, [r7, #4]
    static size_t uxMostTXDescsUsed = 0U;

    const size_t uxTxUsed = pxEthHandle->TxDescList.BuffersInUse;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058e8:	60fb      	str	r3, [r7, #12]

    if( uxMostTXDescsUsed < uxTxUsed )
 80058ea:	4b11      	ldr	r3, [pc, #68]	@ (8005930 <HAL_ETH_TxCpltCallback+0x54>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	68fa      	ldr	r2, [r7, #12]
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d902      	bls.n	80058fa <HAL_ETH_TxCpltCallback+0x1e>
    {
        uxMostTXDescsUsed = uxTxUsed;
 80058f4:	4a0e      	ldr	r2, [pc, #56]	@ (8005930 <HAL_ETH_TxCpltCallback+0x54>)
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	6013      	str	r3, [r2, #0]
    }

    iptraceNETWORK_INTERFACE_TRANSMIT();

    if( xEMACTaskHandle != NULL )
 80058fa:	4b0e      	ldr	r3, [pc, #56]	@ (8005934 <HAL_ETH_TxCpltCallback+0x58>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d011      	beq.n	8005926 <HAL_ETH_TxCpltCallback+0x4a>
    {
        BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8005902:	2300      	movs	r3, #0
 8005904:	60bb      	str	r3, [r7, #8]
        ( void ) xTaskNotifyFromISR( xEMACTaskHandle, eMacEventTx, eSetBits, &xHigherPriorityTaskWoken );
 8005906:	4b0b      	ldr	r3, [pc, #44]	@ (8005934 <HAL_ETH_TxCpltCallback+0x58>)
 8005908:	6818      	ldr	r0, [r3, #0]
 800590a:	f107 0308 	add.w	r3, r7, #8
 800590e:	9300      	str	r3, [sp, #0]
 8005910:	2300      	movs	r3, #0
 8005912:	2201      	movs	r2, #1
 8005914:	2102      	movs	r1, #2
 8005916:	f001 fe63 	bl	80075e0 <xTaskGenericNotifyFromISR>
        xSwitchRequired |= xHigherPriorityTaskWoken;
 800591a:	4b07      	ldr	r3, [pc, #28]	@ (8005938 <HAL_ETH_TxCpltCallback+0x5c>)
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	4313      	orrs	r3, r2
 8005922:	4a05      	ldr	r2, [pc, #20]	@ (8005938 <HAL_ETH_TxCpltCallback+0x5c>)
 8005924:	6013      	str	r3, [r2, #0]
    }
}
 8005926:	bf00      	nop
 8005928:	3710      	adds	r7, #16
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop
 8005930:	20000868 	.word	0x20000868
 8005934:	2000085c 	.word	0x2000085c
 8005938:	20000860 	.word	0x20000860

0800593c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800593c:	b480      	push	{r7}
 800593e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8005940:	bf00      	nop
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr
	...

0800594c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800594c:	b480      	push	{r7}
 800594e:	b085      	sub	sp, #20
 8005950:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005952:	f3ef 8305 	mrs	r3, IPSR
 8005956:	60bb      	str	r3, [r7, #8]
  return(result);
 8005958:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800595a:	2b00      	cmp	r3, #0
 800595c:	d10f      	bne.n	800597e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800595e:	f3ef 8310 	mrs	r3, PRIMASK
 8005962:	607b      	str	r3, [r7, #4]
  return(result);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d105      	bne.n	8005976 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800596a:	f3ef 8311 	mrs	r3, BASEPRI
 800596e:	603b      	str	r3, [r7, #0]
  return(result);
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d007      	beq.n	8005986 <osKernelInitialize+0x3a>
 8005976:	4b0e      	ldr	r3, [pc, #56]	@ (80059b0 <osKernelInitialize+0x64>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	2b02      	cmp	r3, #2
 800597c:	d103      	bne.n	8005986 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800597e:	f06f 0305 	mvn.w	r3, #5
 8005982:	60fb      	str	r3, [r7, #12]
 8005984:	e00c      	b.n	80059a0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005986:	4b0a      	ldr	r3, [pc, #40]	@ (80059b0 <osKernelInitialize+0x64>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d105      	bne.n	800599a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800598e:	4b08      	ldr	r3, [pc, #32]	@ (80059b0 <osKernelInitialize+0x64>)
 8005990:	2201      	movs	r2, #1
 8005992:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005994:	2300      	movs	r3, #0
 8005996:	60fb      	str	r3, [r7, #12]
 8005998:	e002      	b.n	80059a0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800599a:	f04f 33ff 	mov.w	r3, #4294967295
 800599e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80059a0:	68fb      	ldr	r3, [r7, #12]
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3714      	adds	r7, #20
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr
 80059ae:	bf00      	nop
 80059b0:	2000086c 	.word	0x2000086c

080059b4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b084      	sub	sp, #16
 80059b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059ba:	f3ef 8305 	mrs	r3, IPSR
 80059be:	60bb      	str	r3, [r7, #8]
  return(result);
 80059c0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d10f      	bne.n	80059e6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059c6:	f3ef 8310 	mrs	r3, PRIMASK
 80059ca:	607b      	str	r3, [r7, #4]
  return(result);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d105      	bne.n	80059de <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80059d2:	f3ef 8311 	mrs	r3, BASEPRI
 80059d6:	603b      	str	r3, [r7, #0]
  return(result);
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d007      	beq.n	80059ee <osKernelStart+0x3a>
 80059de:	4b0f      	ldr	r3, [pc, #60]	@ (8005a1c <osKernelStart+0x68>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	2b02      	cmp	r3, #2
 80059e4:	d103      	bne.n	80059ee <osKernelStart+0x3a>
    stat = osErrorISR;
 80059e6:	f06f 0305 	mvn.w	r3, #5
 80059ea:	60fb      	str	r3, [r7, #12]
 80059ec:	e010      	b.n	8005a10 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80059ee:	4b0b      	ldr	r3, [pc, #44]	@ (8005a1c <osKernelStart+0x68>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d109      	bne.n	8005a0a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80059f6:	f7ff ffa1 	bl	800593c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80059fa:	4b08      	ldr	r3, [pc, #32]	@ (8005a1c <osKernelStart+0x68>)
 80059fc:	2202      	movs	r2, #2
 80059fe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005a00:	f001 f8e2 	bl	8006bc8 <vTaskStartScheduler>
      stat = osOK;
 8005a04:	2300      	movs	r3, #0
 8005a06:	60fb      	str	r3, [r7, #12]
 8005a08:	e002      	b.n	8005a10 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8005a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8005a0e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005a10:	68fb      	ldr	r3, [r7, #12]
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3710      	adds	r7, #16
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}
 8005a1a:	bf00      	nop
 8005a1c:	2000086c 	.word	0x2000086c

08005a20 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b090      	sub	sp, #64	@ 0x40
 8005a24:	af04      	add	r7, sp, #16
 8005a26:	60f8      	str	r0, [r7, #12]
 8005a28:	60b9      	str	r1, [r7, #8]
 8005a2a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a30:	f3ef 8305 	mrs	r3, IPSR
 8005a34:	61fb      	str	r3, [r7, #28]
  return(result);
 8005a36:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	f040 8090 	bne.w	8005b5e <osThreadNew+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a3e:	f3ef 8310 	mrs	r3, PRIMASK
 8005a42:	61bb      	str	r3, [r7, #24]
  return(result);
 8005a44:	69bb      	ldr	r3, [r7, #24]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d105      	bne.n	8005a56 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005a4a:	f3ef 8311 	mrs	r3, BASEPRI
 8005a4e:	617b      	str	r3, [r7, #20]
  return(result);
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d003      	beq.n	8005a5e <osThreadNew+0x3e>
 8005a56:	4b44      	ldr	r3, [pc, #272]	@ (8005b68 <osThreadNew+0x148>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	2b02      	cmp	r3, #2
 8005a5c:	d07f      	beq.n	8005b5e <osThreadNew+0x13e>
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d07c      	beq.n	8005b5e <osThreadNew+0x13e>
    stack = configMINIMAL_STACK_SIZE;
 8005a64:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005a68:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8005a6a:	2318      	movs	r3, #24
 8005a6c:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 8005a72:	f04f 33ff 	mov.w	r3, #4294967295
 8005a76:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d045      	beq.n	8005b0a <osThreadNew+0xea>
      if (attr->name != NULL) {
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d002      	beq.n	8005a8c <osThreadNew+0x6c>
        name = attr->name;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	699b      	ldr	r3, [r3, #24]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d002      	beq.n	8005a9a <osThreadNew+0x7a>
        prio = (UBaseType_t)attr->priority;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	699b      	ldr	r3, [r3, #24]
 8005a98:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d008      	beq.n	8005ab2 <osThreadNew+0x92>
 8005aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aa2:	2b38      	cmp	r3, #56	@ 0x38
 8005aa4:	d805      	bhi.n	8005ab2 <osThreadNew+0x92>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	f003 0301 	and.w	r3, r3, #1
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d001      	beq.n	8005ab6 <osThreadNew+0x96>
        return (NULL);
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	e054      	b.n	8005b60 <osThreadNew+0x140>
      }

      if (attr->stack_size > 0U) {
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	695b      	ldr	r3, [r3, #20]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d003      	beq.n	8005ac6 <osThreadNew+0xa6>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	695b      	ldr	r3, [r3, #20]
 8005ac2:	089b      	lsrs	r3, r3, #2
 8005ac4:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d00e      	beq.n	8005aec <osThreadNew+0xcc>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	68db      	ldr	r3, [r3, #12]
 8005ad2:	2ba7      	cmp	r3, #167	@ 0xa7
 8005ad4:	d90a      	bls.n	8005aec <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d006      	beq.n	8005aec <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	695b      	ldr	r3, [r3, #20]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d002      	beq.n	8005aec <osThreadNew+0xcc>
        mem = 1;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	623b      	str	r3, [r7, #32]
 8005aea:	e010      	b.n	8005b0e <osThreadNew+0xee>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d10c      	bne.n	8005b0e <osThreadNew+0xee>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d108      	bne.n	8005b0e <osThreadNew+0xee>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	691b      	ldr	r3, [r3, #16]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d104      	bne.n	8005b0e <osThreadNew+0xee>
          mem = 0;
 8005b04:	2300      	movs	r3, #0
 8005b06:	623b      	str	r3, [r7, #32]
 8005b08:	e001      	b.n	8005b0e <osThreadNew+0xee>
        }
      }
    }
    else {
      mem = 0;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005b0e:	6a3b      	ldr	r3, [r7, #32]
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d110      	bne.n	8005b36 <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005b1c:	9202      	str	r2, [sp, #8]
 8005b1e:	9301      	str	r3, [sp, #4]
 8005b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b22:	9300      	str	r3, [sp, #0]
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b28:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b2a:	68f8      	ldr	r0, [r7, #12]
 8005b2c:	f000 fe4e 	bl	80067cc <xTaskCreateStatic>
 8005b30:	4603      	mov	r3, r0
 8005b32:	613b      	str	r3, [r7, #16]
 8005b34:	e013      	b.n	8005b5e <osThreadNew+0x13e>
    }
    else {
      if (mem == 0) {
 8005b36:	6a3b      	ldr	r3, [r7, #32]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d110      	bne.n	8005b5e <osThreadNew+0x13e>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005b3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b3e:	b29a      	uxth	r2, r3
 8005b40:	f107 0310 	add.w	r3, r7, #16
 8005b44:	9301      	str	r3, [sp, #4]
 8005b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b48:	9300      	str	r3, [sp, #0]
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b4e:	68f8      	ldr	r0, [r7, #12]
 8005b50:	f000 fea2 	bl	8006898 <xTaskCreate>
 8005b54:	4603      	mov	r3, r0
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d001      	beq.n	8005b5e <osThreadNew+0x13e>
          hTask = NULL;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005b5e:	693b      	ldr	r3, [r7, #16]
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3730      	adds	r7, #48	@ 0x30
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}
 8005b68:	2000086c 	.word	0x2000086c

08005b6c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b086      	sub	sp, #24
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b74:	f3ef 8305 	mrs	r3, IPSR
 8005b78:	613b      	str	r3, [r7, #16]
  return(result);
 8005b7a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d10f      	bne.n	8005ba0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b80:	f3ef 8310 	mrs	r3, PRIMASK
 8005b84:	60fb      	str	r3, [r7, #12]
  return(result);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d105      	bne.n	8005b98 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005b8c:	f3ef 8311 	mrs	r3, BASEPRI
 8005b90:	60bb      	str	r3, [r7, #8]
  return(result);
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d007      	beq.n	8005ba8 <osDelay+0x3c>
 8005b98:	4b0a      	ldr	r3, [pc, #40]	@ (8005bc4 <osDelay+0x58>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	2b02      	cmp	r3, #2
 8005b9e:	d103      	bne.n	8005ba8 <osDelay+0x3c>
    stat = osErrorISR;
 8005ba0:	f06f 0305 	mvn.w	r3, #5
 8005ba4:	617b      	str	r3, [r7, #20]
 8005ba6:	e007      	b.n	8005bb8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d002      	beq.n	8005bb8 <osDelay+0x4c>
      vTaskDelay(ticks);
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f000 ffd0 	bl	8006b58 <vTaskDelay>
    }
  }

  return (stat);
 8005bb8:	697b      	ldr	r3, [r7, #20]
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3718      	adds	r7, #24
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}
 8005bc2:	bf00      	nop
 8005bc4:	2000086c 	.word	0x2000086c

08005bc8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005bc8:	b480      	push	{r7}
 8005bca:	b085      	sub	sp, #20
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	60f8      	str	r0, [r7, #12]
 8005bd0:	60b9      	str	r1, [r7, #8]
 8005bd2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	4a07      	ldr	r2, [pc, #28]	@ (8005bf4 <vApplicationGetIdleTaskMemory+0x2c>)
 8005bd8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	4a06      	ldr	r2, [pc, #24]	@ (8005bf8 <vApplicationGetIdleTaskMemory+0x30>)
 8005bde:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005be6:	601a      	str	r2, [r3, #0]
}
 8005be8:	bf00      	nop
 8005bea:	3714      	adds	r7, #20
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr
 8005bf4:	20000870 	.word	0x20000870
 8005bf8:	20000918 	.word	0x20000918

08005bfc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005bfc:	b480      	push	{r7}
 8005bfe:	b085      	sub	sp, #20
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	60f8      	str	r0, [r7, #12]
 8005c04:	60b9      	str	r1, [r7, #8]
 8005c06:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	4a07      	ldr	r2, [pc, #28]	@ (8005c28 <vApplicationGetTimerTaskMemory+0x2c>)
 8005c0c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	4a06      	ldr	r2, [pc, #24]	@ (8005c2c <vApplicationGetTimerTaskMemory+0x30>)
 8005c12:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c1a:	601a      	str	r2, [r3, #0]
}
 8005c1c:	bf00      	nop
 8005c1e:	3714      	adds	r7, #20
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr
 8005c28:	20000d18 	.word	0x20000d18
 8005c2c:	20000dc0 	.word	0x20000dc0

08005c30 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005c30:	b480      	push	{r7}
 8005c32:	b083      	sub	sp, #12
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f103 0208 	add.w	r2, r3, #8
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f04f 32ff 	mov.w	r2, #4294967295
 8005c48:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f103 0208 	add.w	r2, r3, #8
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f103 0208 	add.w	r2, r3, #8
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005c64:	bf00      	nop
 8005c66:	370c      	adds	r7, #12
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr

08005c70 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005c70:	b480      	push	{r7}
 8005c72:	b083      	sub	sp, #12
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005c7e:	bf00      	nop
 8005c80:	370c      	adds	r7, #12
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr

08005c8a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005c8a:	b480      	push	{r7}
 8005c8c:	b085      	sub	sp, #20
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	6078      	str	r0, [r7, #4]
 8005c92:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	68fa      	ldr	r2, [r7, #12]
 8005c9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	689a      	ldr	r2, [r3, #8]
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	683a      	ldr	r2, [r7, #0]
 8005cae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	683a      	ldr	r2, [r7, #0]
 8005cb4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	687a      	ldr	r2, [r7, #4]
 8005cba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	1c5a      	adds	r2, r3, #1
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	601a      	str	r2, [r3, #0]
}
 8005cc6:	bf00      	nop
 8005cc8:	3714      	adds	r7, #20
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr

08005cd2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005cd2:	b480      	push	{r7}
 8005cd4:	b085      	sub	sp, #20
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	6078      	str	r0, [r7, #4]
 8005cda:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ce8:	d103      	bne.n	8005cf2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	691b      	ldr	r3, [r3, #16]
 8005cee:	60fb      	str	r3, [r7, #12]
 8005cf0:	e00c      	b.n	8005d0c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	3308      	adds	r3, #8
 8005cf6:	60fb      	str	r3, [r7, #12]
 8005cf8:	e002      	b.n	8005d00 <vListInsert+0x2e>
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	60fb      	str	r3, [r7, #12]
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	68ba      	ldr	r2, [r7, #8]
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d2f6      	bcs.n	8005cfa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	685a      	ldr	r2, [r3, #4]
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	683a      	ldr	r2, [r7, #0]
 8005d1a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	68fa      	ldr	r2, [r7, #12]
 8005d20:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	683a      	ldr	r2, [r7, #0]
 8005d26:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	1c5a      	adds	r2, r3, #1
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	601a      	str	r2, [r3, #0]
}
 8005d38:	bf00      	nop
 8005d3a:	3714      	adds	r7, #20
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr

08005d44 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005d44:	b480      	push	{r7}
 8005d46:	b085      	sub	sp, #20
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	691b      	ldr	r3, [r3, #16]
 8005d50:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	6892      	ldr	r2, [r2, #8]
 8005d5a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	6852      	ldr	r2, [r2, #4]
 8005d64:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	687a      	ldr	r2, [r7, #4]
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d103      	bne.n	8005d78 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	689a      	ldr	r2, [r3, #8]
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	1e5a      	subs	r2, r3, #1
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3714      	adds	r7, #20
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr

08005d98 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b084      	sub	sp, #16
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d10d      	bne.n	8005dc8 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005dac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005db0:	b672      	cpsid	i
 8005db2:	f383 8811 	msr	BASEPRI, r3
 8005db6:	f3bf 8f6f 	isb	sy
 8005dba:	f3bf 8f4f 	dsb	sy
 8005dbe:	b662      	cpsie	i
 8005dc0:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005dc2:	bf00      	nop
 8005dc4:	bf00      	nop
 8005dc6:	e7fd      	b.n	8005dc4 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8005dc8:	f002 f9c0 	bl	800814c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dd4:	68f9      	ldr	r1, [r7, #12]
 8005dd6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005dd8:	fb01 f303 	mul.w	r3, r1, r3
 8005ddc:	441a      	add	r2, r3
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2200      	movs	r2, #0
 8005de6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005df8:	3b01      	subs	r3, #1
 8005dfa:	68f9      	ldr	r1, [r7, #12]
 8005dfc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005dfe:	fb01 f303 	mul.w	r3, r1, r3
 8005e02:	441a      	add	r2, r3
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	22ff      	movs	r2, #255	@ 0xff
 8005e0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	22ff      	movs	r2, #255	@ 0xff
 8005e14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d114      	bne.n	8005e48 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	691b      	ldr	r3, [r3, #16]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d01a      	beq.n	8005e5c <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	3310      	adds	r3, #16
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f001 f978 	bl	8007120 <xTaskRemoveFromEventList>
 8005e30:	4603      	mov	r3, r0
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d012      	beq.n	8005e5c <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005e36:	4b0d      	ldr	r3, [pc, #52]	@ (8005e6c <xQueueGenericReset+0xd4>)
 8005e38:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e3c:	601a      	str	r2, [r3, #0]
 8005e3e:	f3bf 8f4f 	dsb	sy
 8005e42:	f3bf 8f6f 	isb	sy
 8005e46:	e009      	b.n	8005e5c <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	3310      	adds	r3, #16
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f7ff feef 	bl	8005c30 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	3324      	adds	r3, #36	@ 0x24
 8005e56:	4618      	mov	r0, r3
 8005e58:	f7ff feea 	bl	8005c30 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005e5c:	f002 f9ac 	bl	80081b8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005e60:	2301      	movs	r3, #1
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3710      	adds	r7, #16
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}
 8005e6a:	bf00      	nop
 8005e6c:	e000ed04 	.word	0xe000ed04

08005e70 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b08e      	sub	sp, #56	@ 0x38
 8005e74:	af02      	add	r7, sp, #8
 8005e76:	60f8      	str	r0, [r7, #12]
 8005e78:	60b9      	str	r1, [r7, #8]
 8005e7a:	607a      	str	r2, [r7, #4]
 8005e7c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d10d      	bne.n	8005ea0 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8005e84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e88:	b672      	cpsid	i
 8005e8a:	f383 8811 	msr	BASEPRI, r3
 8005e8e:	f3bf 8f6f 	isb	sy
 8005e92:	f3bf 8f4f 	dsb	sy
 8005e96:	b662      	cpsie	i
 8005e98:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005e9a:	bf00      	nop
 8005e9c:	bf00      	nop
 8005e9e:	e7fd      	b.n	8005e9c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d10d      	bne.n	8005ec2 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8005ea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eaa:	b672      	cpsid	i
 8005eac:	f383 8811 	msr	BASEPRI, r3
 8005eb0:	f3bf 8f6f 	isb	sy
 8005eb4:	f3bf 8f4f 	dsb	sy
 8005eb8:	b662      	cpsie	i
 8005eba:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005ebc:	bf00      	nop
 8005ebe:	bf00      	nop
 8005ec0:	e7fd      	b.n	8005ebe <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d002      	beq.n	8005ece <xQueueGenericCreateStatic+0x5e>
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d001      	beq.n	8005ed2 <xQueueGenericCreateStatic+0x62>
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e000      	b.n	8005ed4 <xQueueGenericCreateStatic+0x64>
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d10d      	bne.n	8005ef4 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8005ed8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005edc:	b672      	cpsid	i
 8005ede:	f383 8811 	msr	BASEPRI, r3
 8005ee2:	f3bf 8f6f 	isb	sy
 8005ee6:	f3bf 8f4f 	dsb	sy
 8005eea:	b662      	cpsie	i
 8005eec:	623b      	str	r3, [r7, #32]
}
 8005eee:	bf00      	nop
 8005ef0:	bf00      	nop
 8005ef2:	e7fd      	b.n	8005ef0 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d102      	bne.n	8005f00 <xQueueGenericCreateStatic+0x90>
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d101      	bne.n	8005f04 <xQueueGenericCreateStatic+0x94>
 8005f00:	2301      	movs	r3, #1
 8005f02:	e000      	b.n	8005f06 <xQueueGenericCreateStatic+0x96>
 8005f04:	2300      	movs	r3, #0
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d10d      	bne.n	8005f26 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8005f0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f0e:	b672      	cpsid	i
 8005f10:	f383 8811 	msr	BASEPRI, r3
 8005f14:	f3bf 8f6f 	isb	sy
 8005f18:	f3bf 8f4f 	dsb	sy
 8005f1c:	b662      	cpsie	i
 8005f1e:	61fb      	str	r3, [r7, #28]
}
 8005f20:	bf00      	nop
 8005f22:	bf00      	nop
 8005f24:	e7fd      	b.n	8005f22 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005f26:	2350      	movs	r3, #80	@ 0x50
 8005f28:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	2b50      	cmp	r3, #80	@ 0x50
 8005f2e:	d00d      	beq.n	8005f4c <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8005f30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f34:	b672      	cpsid	i
 8005f36:	f383 8811 	msr	BASEPRI, r3
 8005f3a:	f3bf 8f6f 	isb	sy
 8005f3e:	f3bf 8f4f 	dsb	sy
 8005f42:	b662      	cpsie	i
 8005f44:	61bb      	str	r3, [r7, #24]
}
 8005f46:	bf00      	nop
 8005f48:	bf00      	nop
 8005f4a:	e7fd      	b.n	8005f48 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005f4c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005f52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d00d      	beq.n	8005f74 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005f58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005f60:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005f64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f66:	9300      	str	r3, [sp, #0]
 8005f68:	4613      	mov	r3, r2
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	68b9      	ldr	r1, [r7, #8]
 8005f6e:	68f8      	ldr	r0, [r7, #12]
 8005f70:	f000 f805 	bl	8005f7e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005f74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3730      	adds	r7, #48	@ 0x30
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}

08005f7e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005f7e:	b580      	push	{r7, lr}
 8005f80:	b084      	sub	sp, #16
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	60f8      	str	r0, [r7, #12]
 8005f86:	60b9      	str	r1, [r7, #8]
 8005f88:	607a      	str	r2, [r7, #4]
 8005f8a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d103      	bne.n	8005f9a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005f92:	69bb      	ldr	r3, [r7, #24]
 8005f94:	69ba      	ldr	r2, [r7, #24]
 8005f96:	601a      	str	r2, [r3, #0]
 8005f98:	e002      	b.n	8005fa0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005f9a:	69bb      	ldr	r3, [r7, #24]
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005fa0:	69bb      	ldr	r3, [r7, #24]
 8005fa2:	68fa      	ldr	r2, [r7, #12]
 8005fa4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005fa6:	69bb      	ldr	r3, [r7, #24]
 8005fa8:	68ba      	ldr	r2, [r7, #8]
 8005faa:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005fac:	2101      	movs	r1, #1
 8005fae:	69b8      	ldr	r0, [r7, #24]
 8005fb0:	f7ff fef2 	bl	8005d98 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005fb4:	69bb      	ldr	r3, [r7, #24]
 8005fb6:	78fa      	ldrb	r2, [r7, #3]
 8005fb8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005fbc:	bf00      	nop
 8005fbe:	3710      	adds	r7, #16
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}

08005fc4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b08e      	sub	sp, #56	@ 0x38
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	60f8      	str	r0, [r7, #12]
 8005fcc:	60b9      	str	r1, [r7, #8]
 8005fce:	607a      	str	r2, [r7, #4]
 8005fd0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d10d      	bne.n	8005ffc <xQueueGenericSend+0x38>
	__asm volatile
 8005fe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fe4:	b672      	cpsid	i
 8005fe6:	f383 8811 	msr	BASEPRI, r3
 8005fea:	f3bf 8f6f 	isb	sy
 8005fee:	f3bf 8f4f 	dsb	sy
 8005ff2:	b662      	cpsie	i
 8005ff4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005ff6:	bf00      	nop
 8005ff8:	bf00      	nop
 8005ffa:	e7fd      	b.n	8005ff8 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d103      	bne.n	800600a <xQueueGenericSend+0x46>
 8006002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006006:	2b00      	cmp	r3, #0
 8006008:	d101      	bne.n	800600e <xQueueGenericSend+0x4a>
 800600a:	2301      	movs	r3, #1
 800600c:	e000      	b.n	8006010 <xQueueGenericSend+0x4c>
 800600e:	2300      	movs	r3, #0
 8006010:	2b00      	cmp	r3, #0
 8006012:	d10d      	bne.n	8006030 <xQueueGenericSend+0x6c>
	__asm volatile
 8006014:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006018:	b672      	cpsid	i
 800601a:	f383 8811 	msr	BASEPRI, r3
 800601e:	f3bf 8f6f 	isb	sy
 8006022:	f3bf 8f4f 	dsb	sy
 8006026:	b662      	cpsie	i
 8006028:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800602a:	bf00      	nop
 800602c:	bf00      	nop
 800602e:	e7fd      	b.n	800602c <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	2b02      	cmp	r3, #2
 8006034:	d103      	bne.n	800603e <xQueueGenericSend+0x7a>
 8006036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006038:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800603a:	2b01      	cmp	r3, #1
 800603c:	d101      	bne.n	8006042 <xQueueGenericSend+0x7e>
 800603e:	2301      	movs	r3, #1
 8006040:	e000      	b.n	8006044 <xQueueGenericSend+0x80>
 8006042:	2300      	movs	r3, #0
 8006044:	2b00      	cmp	r3, #0
 8006046:	d10d      	bne.n	8006064 <xQueueGenericSend+0xa0>
	__asm volatile
 8006048:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800604c:	b672      	cpsid	i
 800604e:	f383 8811 	msr	BASEPRI, r3
 8006052:	f3bf 8f6f 	isb	sy
 8006056:	f3bf 8f4f 	dsb	sy
 800605a:	b662      	cpsie	i
 800605c:	623b      	str	r3, [r7, #32]
}
 800605e:	bf00      	nop
 8006060:	bf00      	nop
 8006062:	e7fd      	b.n	8006060 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006064:	f001 fa2a 	bl	80074bc <xTaskGetSchedulerState>
 8006068:	4603      	mov	r3, r0
 800606a:	2b00      	cmp	r3, #0
 800606c:	d102      	bne.n	8006074 <xQueueGenericSend+0xb0>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d101      	bne.n	8006078 <xQueueGenericSend+0xb4>
 8006074:	2301      	movs	r3, #1
 8006076:	e000      	b.n	800607a <xQueueGenericSend+0xb6>
 8006078:	2300      	movs	r3, #0
 800607a:	2b00      	cmp	r3, #0
 800607c:	d10d      	bne.n	800609a <xQueueGenericSend+0xd6>
	__asm volatile
 800607e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006082:	b672      	cpsid	i
 8006084:	f383 8811 	msr	BASEPRI, r3
 8006088:	f3bf 8f6f 	isb	sy
 800608c:	f3bf 8f4f 	dsb	sy
 8006090:	b662      	cpsie	i
 8006092:	61fb      	str	r3, [r7, #28]
}
 8006094:	bf00      	nop
 8006096:	bf00      	nop
 8006098:	e7fd      	b.n	8006096 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800609a:	f002 f857 	bl	800814c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800609e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80060a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d302      	bcc.n	80060b0 <xQueueGenericSend+0xec>
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	2b02      	cmp	r3, #2
 80060ae:	d129      	bne.n	8006104 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80060b0:	683a      	ldr	r2, [r7, #0]
 80060b2:	68b9      	ldr	r1, [r7, #8]
 80060b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80060b6:	f000 fa1b 	bl	80064f0 <prvCopyDataToQueue>
 80060ba:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80060bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d010      	beq.n	80060e6 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80060c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060c6:	3324      	adds	r3, #36	@ 0x24
 80060c8:	4618      	mov	r0, r3
 80060ca:	f001 f829 	bl	8007120 <xTaskRemoveFromEventList>
 80060ce:	4603      	mov	r3, r0
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d013      	beq.n	80060fc <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80060d4:	4b3f      	ldr	r3, [pc, #252]	@ (80061d4 <xQueueGenericSend+0x210>)
 80060d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060da:	601a      	str	r2, [r3, #0]
 80060dc:	f3bf 8f4f 	dsb	sy
 80060e0:	f3bf 8f6f 	isb	sy
 80060e4:	e00a      	b.n	80060fc <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80060e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d007      	beq.n	80060fc <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80060ec:	4b39      	ldr	r3, [pc, #228]	@ (80061d4 <xQueueGenericSend+0x210>)
 80060ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060f2:	601a      	str	r2, [r3, #0]
 80060f4:	f3bf 8f4f 	dsb	sy
 80060f8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80060fc:	f002 f85c 	bl	80081b8 <vPortExitCritical>
				return pdPASS;
 8006100:	2301      	movs	r3, #1
 8006102:	e063      	b.n	80061cc <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d103      	bne.n	8006112 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800610a:	f002 f855 	bl	80081b8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800610e:	2300      	movs	r3, #0
 8006110:	e05c      	b.n	80061cc <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006112:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006114:	2b00      	cmp	r3, #0
 8006116:	d106      	bne.n	8006126 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006118:	f107 0314 	add.w	r3, r7, #20
 800611c:	4618      	mov	r0, r3
 800611e:	f001 f865 	bl	80071ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006122:	2301      	movs	r3, #1
 8006124:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006126:	f002 f847 	bl	80081b8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800612a:	f000 fdc1 	bl	8006cb0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800612e:	f002 f80d 	bl	800814c <vPortEnterCritical>
 8006132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006134:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006138:	b25b      	sxtb	r3, r3
 800613a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800613e:	d103      	bne.n	8006148 <xQueueGenericSend+0x184>
 8006140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006142:	2200      	movs	r2, #0
 8006144:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800614a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800614e:	b25b      	sxtb	r3, r3
 8006150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006154:	d103      	bne.n	800615e <xQueueGenericSend+0x19a>
 8006156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006158:	2200      	movs	r2, #0
 800615a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800615e:	f002 f82b 	bl	80081b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006162:	1d3a      	adds	r2, r7, #4
 8006164:	f107 0314 	add.w	r3, r7, #20
 8006168:	4611      	mov	r1, r2
 800616a:	4618      	mov	r0, r3
 800616c:	f001 f854 	bl	8007218 <xTaskCheckForTimeOut>
 8006170:	4603      	mov	r3, r0
 8006172:	2b00      	cmp	r3, #0
 8006174:	d124      	bne.n	80061c0 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006176:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006178:	f000 fab2 	bl	80066e0 <prvIsQueueFull>
 800617c:	4603      	mov	r3, r0
 800617e:	2b00      	cmp	r3, #0
 8006180:	d018      	beq.n	80061b4 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006184:	3310      	adds	r3, #16
 8006186:	687a      	ldr	r2, [r7, #4]
 8006188:	4611      	mov	r1, r2
 800618a:	4618      	mov	r0, r3
 800618c:	f000 ff72 	bl	8007074 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006190:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006192:	f000 fa3d 	bl	8006610 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006196:	f000 fd99 	bl	8006ccc <xTaskResumeAll>
 800619a:	4603      	mov	r3, r0
 800619c:	2b00      	cmp	r3, #0
 800619e:	f47f af7c 	bne.w	800609a <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 80061a2:	4b0c      	ldr	r3, [pc, #48]	@ (80061d4 <xQueueGenericSend+0x210>)
 80061a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061a8:	601a      	str	r2, [r3, #0]
 80061aa:	f3bf 8f4f 	dsb	sy
 80061ae:	f3bf 8f6f 	isb	sy
 80061b2:	e772      	b.n	800609a <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80061b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80061b6:	f000 fa2b 	bl	8006610 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80061ba:	f000 fd87 	bl	8006ccc <xTaskResumeAll>
 80061be:	e76c      	b.n	800609a <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80061c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80061c2:	f000 fa25 	bl	8006610 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80061c6:	f000 fd81 	bl	8006ccc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80061ca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3738      	adds	r7, #56	@ 0x38
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}
 80061d4:	e000ed04 	.word	0xe000ed04

080061d8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b08e      	sub	sp, #56	@ 0x38
 80061dc:	af00      	add	r7, sp, #0
 80061de:	60f8      	str	r0, [r7, #12]
 80061e0:	60b9      	str	r1, [r7, #8]
 80061e2:	607a      	str	r2, [r7, #4]
 80061e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80061ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d10d      	bne.n	800620c <xQueueGenericSendFromISR+0x34>
	__asm volatile
 80061f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061f4:	b672      	cpsid	i
 80061f6:	f383 8811 	msr	BASEPRI, r3
 80061fa:	f3bf 8f6f 	isb	sy
 80061fe:	f3bf 8f4f 	dsb	sy
 8006202:	b662      	cpsie	i
 8006204:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006206:	bf00      	nop
 8006208:	bf00      	nop
 800620a:	e7fd      	b.n	8006208 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d103      	bne.n	800621a <xQueueGenericSendFromISR+0x42>
 8006212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006216:	2b00      	cmp	r3, #0
 8006218:	d101      	bne.n	800621e <xQueueGenericSendFromISR+0x46>
 800621a:	2301      	movs	r3, #1
 800621c:	e000      	b.n	8006220 <xQueueGenericSendFromISR+0x48>
 800621e:	2300      	movs	r3, #0
 8006220:	2b00      	cmp	r3, #0
 8006222:	d10d      	bne.n	8006240 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8006224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006228:	b672      	cpsid	i
 800622a:	f383 8811 	msr	BASEPRI, r3
 800622e:	f3bf 8f6f 	isb	sy
 8006232:	f3bf 8f4f 	dsb	sy
 8006236:	b662      	cpsie	i
 8006238:	623b      	str	r3, [r7, #32]
}
 800623a:	bf00      	nop
 800623c:	bf00      	nop
 800623e:	e7fd      	b.n	800623c <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	2b02      	cmp	r3, #2
 8006244:	d103      	bne.n	800624e <xQueueGenericSendFromISR+0x76>
 8006246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006248:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800624a:	2b01      	cmp	r3, #1
 800624c:	d101      	bne.n	8006252 <xQueueGenericSendFromISR+0x7a>
 800624e:	2301      	movs	r3, #1
 8006250:	e000      	b.n	8006254 <xQueueGenericSendFromISR+0x7c>
 8006252:	2300      	movs	r3, #0
 8006254:	2b00      	cmp	r3, #0
 8006256:	d10d      	bne.n	8006274 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8006258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800625c:	b672      	cpsid	i
 800625e:	f383 8811 	msr	BASEPRI, r3
 8006262:	f3bf 8f6f 	isb	sy
 8006266:	f3bf 8f4f 	dsb	sy
 800626a:	b662      	cpsie	i
 800626c:	61fb      	str	r3, [r7, #28]
}
 800626e:	bf00      	nop
 8006270:	bf00      	nop
 8006272:	e7fd      	b.n	8006270 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006274:	f002 f852 	bl	800831c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006278:	f3ef 8211 	mrs	r2, BASEPRI
 800627c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006280:	b672      	cpsid	i
 8006282:	f383 8811 	msr	BASEPRI, r3
 8006286:	f3bf 8f6f 	isb	sy
 800628a:	f3bf 8f4f 	dsb	sy
 800628e:	b662      	cpsie	i
 8006290:	61ba      	str	r2, [r7, #24]
 8006292:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006294:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006296:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800629a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800629c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800629e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d302      	bcc.n	80062aa <xQueueGenericSendFromISR+0xd2>
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	2b02      	cmp	r3, #2
 80062a8:	d12c      	bne.n	8006304 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80062aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062ac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80062b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80062b4:	683a      	ldr	r2, [r7, #0]
 80062b6:	68b9      	ldr	r1, [r7, #8]
 80062b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80062ba:	f000 f919 	bl	80064f0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80062be:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80062c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062c6:	d112      	bne.n	80062ee <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80062c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d016      	beq.n	80062fe <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80062d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062d2:	3324      	adds	r3, #36	@ 0x24
 80062d4:	4618      	mov	r0, r3
 80062d6:	f000 ff23 	bl	8007120 <xTaskRemoveFromEventList>
 80062da:	4603      	mov	r3, r0
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d00e      	beq.n	80062fe <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d00b      	beq.n	80062fe <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2201      	movs	r2, #1
 80062ea:	601a      	str	r2, [r3, #0]
 80062ec:	e007      	b.n	80062fe <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80062ee:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80062f2:	3301      	adds	r3, #1
 80062f4:	b2db      	uxtb	r3, r3
 80062f6:	b25a      	sxtb	r2, r3
 80062f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80062fe:	2301      	movs	r3, #1
 8006300:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8006302:	e001      	b.n	8006308 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006304:	2300      	movs	r3, #0
 8006306:	637b      	str	r3, [r7, #52]	@ 0x34
 8006308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800630a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006312:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006314:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006316:	4618      	mov	r0, r3
 8006318:	3738      	adds	r7, #56	@ 0x38
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
	...

08006320 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b08c      	sub	sp, #48	@ 0x30
 8006324:	af00      	add	r7, sp, #0
 8006326:	60f8      	str	r0, [r7, #12]
 8006328:	60b9      	str	r1, [r7, #8]
 800632a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800632c:	2300      	movs	r3, #0
 800632e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006336:	2b00      	cmp	r3, #0
 8006338:	d10d      	bne.n	8006356 <xQueueReceive+0x36>
	__asm volatile
 800633a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800633e:	b672      	cpsid	i
 8006340:	f383 8811 	msr	BASEPRI, r3
 8006344:	f3bf 8f6f 	isb	sy
 8006348:	f3bf 8f4f 	dsb	sy
 800634c:	b662      	cpsie	i
 800634e:	623b      	str	r3, [r7, #32]
}
 8006350:	bf00      	nop
 8006352:	bf00      	nop
 8006354:	e7fd      	b.n	8006352 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d103      	bne.n	8006364 <xQueueReceive+0x44>
 800635c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800635e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006360:	2b00      	cmp	r3, #0
 8006362:	d101      	bne.n	8006368 <xQueueReceive+0x48>
 8006364:	2301      	movs	r3, #1
 8006366:	e000      	b.n	800636a <xQueueReceive+0x4a>
 8006368:	2300      	movs	r3, #0
 800636a:	2b00      	cmp	r3, #0
 800636c:	d10d      	bne.n	800638a <xQueueReceive+0x6a>
	__asm volatile
 800636e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006372:	b672      	cpsid	i
 8006374:	f383 8811 	msr	BASEPRI, r3
 8006378:	f3bf 8f6f 	isb	sy
 800637c:	f3bf 8f4f 	dsb	sy
 8006380:	b662      	cpsie	i
 8006382:	61fb      	str	r3, [r7, #28]
}
 8006384:	bf00      	nop
 8006386:	bf00      	nop
 8006388:	e7fd      	b.n	8006386 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800638a:	f001 f897 	bl	80074bc <xTaskGetSchedulerState>
 800638e:	4603      	mov	r3, r0
 8006390:	2b00      	cmp	r3, #0
 8006392:	d102      	bne.n	800639a <xQueueReceive+0x7a>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d101      	bne.n	800639e <xQueueReceive+0x7e>
 800639a:	2301      	movs	r3, #1
 800639c:	e000      	b.n	80063a0 <xQueueReceive+0x80>
 800639e:	2300      	movs	r3, #0
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d10d      	bne.n	80063c0 <xQueueReceive+0xa0>
	__asm volatile
 80063a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063a8:	b672      	cpsid	i
 80063aa:	f383 8811 	msr	BASEPRI, r3
 80063ae:	f3bf 8f6f 	isb	sy
 80063b2:	f3bf 8f4f 	dsb	sy
 80063b6:	b662      	cpsie	i
 80063b8:	61bb      	str	r3, [r7, #24]
}
 80063ba:	bf00      	nop
 80063bc:	bf00      	nop
 80063be:	e7fd      	b.n	80063bc <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80063c0:	f001 fec4 	bl	800814c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80063c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063c8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80063ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d01f      	beq.n	8006410 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80063d0:	68b9      	ldr	r1, [r7, #8]
 80063d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80063d4:	f000 f8f6 	bl	80065c4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80063d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063da:	1e5a      	subs	r2, r3, #1
 80063dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063de:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80063e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063e2:	691b      	ldr	r3, [r3, #16]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d00f      	beq.n	8006408 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80063e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063ea:	3310      	adds	r3, #16
 80063ec:	4618      	mov	r0, r3
 80063ee:	f000 fe97 	bl	8007120 <xTaskRemoveFromEventList>
 80063f2:	4603      	mov	r3, r0
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d007      	beq.n	8006408 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80063f8:	4b3c      	ldr	r3, [pc, #240]	@ (80064ec <xQueueReceive+0x1cc>)
 80063fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063fe:	601a      	str	r2, [r3, #0]
 8006400:	f3bf 8f4f 	dsb	sy
 8006404:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006408:	f001 fed6 	bl	80081b8 <vPortExitCritical>
				return pdPASS;
 800640c:	2301      	movs	r3, #1
 800640e:	e069      	b.n	80064e4 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d103      	bne.n	800641e <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006416:	f001 fecf 	bl	80081b8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800641a:	2300      	movs	r3, #0
 800641c:	e062      	b.n	80064e4 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800641e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006420:	2b00      	cmp	r3, #0
 8006422:	d106      	bne.n	8006432 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006424:	f107 0310 	add.w	r3, r7, #16
 8006428:	4618      	mov	r0, r3
 800642a:	f000 fedf 	bl	80071ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800642e:	2301      	movs	r3, #1
 8006430:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006432:	f001 fec1 	bl	80081b8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006436:	f000 fc3b 	bl	8006cb0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800643a:	f001 fe87 	bl	800814c <vPortEnterCritical>
 800643e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006440:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006444:	b25b      	sxtb	r3, r3
 8006446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800644a:	d103      	bne.n	8006454 <xQueueReceive+0x134>
 800644c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800644e:	2200      	movs	r2, #0
 8006450:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006456:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800645a:	b25b      	sxtb	r3, r3
 800645c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006460:	d103      	bne.n	800646a <xQueueReceive+0x14a>
 8006462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006464:	2200      	movs	r2, #0
 8006466:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800646a:	f001 fea5 	bl	80081b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800646e:	1d3a      	adds	r2, r7, #4
 8006470:	f107 0310 	add.w	r3, r7, #16
 8006474:	4611      	mov	r1, r2
 8006476:	4618      	mov	r0, r3
 8006478:	f000 fece 	bl	8007218 <xTaskCheckForTimeOut>
 800647c:	4603      	mov	r3, r0
 800647e:	2b00      	cmp	r3, #0
 8006480:	d123      	bne.n	80064ca <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006482:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006484:	f000 f916 	bl	80066b4 <prvIsQueueEmpty>
 8006488:	4603      	mov	r3, r0
 800648a:	2b00      	cmp	r3, #0
 800648c:	d017      	beq.n	80064be <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800648e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006490:	3324      	adds	r3, #36	@ 0x24
 8006492:	687a      	ldr	r2, [r7, #4]
 8006494:	4611      	mov	r1, r2
 8006496:	4618      	mov	r0, r3
 8006498:	f000 fdec 	bl	8007074 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800649c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800649e:	f000 f8b7 	bl	8006610 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80064a2:	f000 fc13 	bl	8006ccc <xTaskResumeAll>
 80064a6:	4603      	mov	r3, r0
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d189      	bne.n	80063c0 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 80064ac:	4b0f      	ldr	r3, [pc, #60]	@ (80064ec <xQueueReceive+0x1cc>)
 80064ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064b2:	601a      	str	r2, [r3, #0]
 80064b4:	f3bf 8f4f 	dsb	sy
 80064b8:	f3bf 8f6f 	isb	sy
 80064bc:	e780      	b.n	80063c0 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80064be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80064c0:	f000 f8a6 	bl	8006610 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80064c4:	f000 fc02 	bl	8006ccc <xTaskResumeAll>
 80064c8:	e77a      	b.n	80063c0 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80064ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80064cc:	f000 f8a0 	bl	8006610 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80064d0:	f000 fbfc 	bl	8006ccc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80064d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80064d6:	f000 f8ed 	bl	80066b4 <prvIsQueueEmpty>
 80064da:	4603      	mov	r3, r0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	f43f af6f 	beq.w	80063c0 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80064e2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3730      	adds	r7, #48	@ 0x30
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}
 80064ec:	e000ed04 	.word	0xe000ed04

080064f0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b086      	sub	sp, #24
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	60f8      	str	r0, [r7, #12]
 80064f8:	60b9      	str	r1, [r7, #8]
 80064fa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80064fc:	2300      	movs	r3, #0
 80064fe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006504:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800650a:	2b00      	cmp	r3, #0
 800650c:	d10d      	bne.n	800652a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d14d      	bne.n	80065b2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	4618      	mov	r0, r3
 800651c:	f000 ffec 	bl	80074f8 <xTaskPriorityDisinherit>
 8006520:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2200      	movs	r2, #0
 8006526:	609a      	str	r2, [r3, #8]
 8006528:	e043      	b.n	80065b2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d119      	bne.n	8006564 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	6858      	ldr	r0, [r3, #4]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006538:	461a      	mov	r2, r3
 800653a:	68b9      	ldr	r1, [r7, #8]
 800653c:	f002 fb0f 	bl	8008b5e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	685a      	ldr	r2, [r3, #4]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006548:	441a      	add	r2, r3
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	685a      	ldr	r2, [r3, #4]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	429a      	cmp	r2, r3
 8006558:	d32b      	bcc.n	80065b2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681a      	ldr	r2, [r3, #0]
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	605a      	str	r2, [r3, #4]
 8006562:	e026      	b.n	80065b2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	68d8      	ldr	r0, [r3, #12]
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800656c:	461a      	mov	r2, r3
 800656e:	68b9      	ldr	r1, [r7, #8]
 8006570:	f002 faf5 	bl	8008b5e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	68da      	ldr	r2, [r3, #12]
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800657c:	425b      	negs	r3, r3
 800657e:	441a      	add	r2, r3
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	68da      	ldr	r2, [r3, #12]
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	429a      	cmp	r2, r3
 800658e:	d207      	bcs.n	80065a0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	689a      	ldr	r2, [r3, #8]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006598:	425b      	negs	r3, r3
 800659a:	441a      	add	r2, r3
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2b02      	cmp	r3, #2
 80065a4:	d105      	bne.n	80065b2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d002      	beq.n	80065b2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	3b01      	subs	r3, #1
 80065b0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	1c5a      	adds	r2, r3, #1
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80065ba:	697b      	ldr	r3, [r7, #20]
}
 80065bc:	4618      	mov	r0, r3
 80065be:	3718      	adds	r7, #24
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}

080065c4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b082      	sub	sp, #8
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d018      	beq.n	8006608 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	68da      	ldr	r2, [r3, #12]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065de:	441a      	add	r2, r3
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	68da      	ldr	r2, [r3, #12]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d303      	bcc.n	80065f8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	68d9      	ldr	r1, [r3, #12]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006600:	461a      	mov	r2, r3
 8006602:	6838      	ldr	r0, [r7, #0]
 8006604:	f002 faab 	bl	8008b5e <memcpy>
	}
}
 8006608:	bf00      	nop
 800660a:	3708      	adds	r7, #8
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}

08006610 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b084      	sub	sp, #16
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006618:	f001 fd98 	bl	800814c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006622:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006624:	e011      	b.n	800664a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800662a:	2b00      	cmp	r3, #0
 800662c:	d012      	beq.n	8006654 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	3324      	adds	r3, #36	@ 0x24
 8006632:	4618      	mov	r0, r3
 8006634:	f000 fd74 	bl	8007120 <xTaskRemoveFromEventList>
 8006638:	4603      	mov	r3, r0
 800663a:	2b00      	cmp	r3, #0
 800663c:	d001      	beq.n	8006642 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800663e:	f000 fe53 	bl	80072e8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006642:	7bfb      	ldrb	r3, [r7, #15]
 8006644:	3b01      	subs	r3, #1
 8006646:	b2db      	uxtb	r3, r3
 8006648:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800664a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800664e:	2b00      	cmp	r3, #0
 8006650:	dce9      	bgt.n	8006626 <prvUnlockQueue+0x16>
 8006652:	e000      	b.n	8006656 <prvUnlockQueue+0x46>
					break;
 8006654:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	22ff      	movs	r2, #255	@ 0xff
 800665a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800665e:	f001 fdab 	bl	80081b8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006662:	f001 fd73 	bl	800814c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800666c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800666e:	e011      	b.n	8006694 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	691b      	ldr	r3, [r3, #16]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d012      	beq.n	800669e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	3310      	adds	r3, #16
 800667c:	4618      	mov	r0, r3
 800667e:	f000 fd4f 	bl	8007120 <xTaskRemoveFromEventList>
 8006682:	4603      	mov	r3, r0
 8006684:	2b00      	cmp	r3, #0
 8006686:	d001      	beq.n	800668c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006688:	f000 fe2e 	bl	80072e8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800668c:	7bbb      	ldrb	r3, [r7, #14]
 800668e:	3b01      	subs	r3, #1
 8006690:	b2db      	uxtb	r3, r3
 8006692:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006694:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006698:	2b00      	cmp	r3, #0
 800669a:	dce9      	bgt.n	8006670 <prvUnlockQueue+0x60>
 800669c:	e000      	b.n	80066a0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800669e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	22ff      	movs	r2, #255	@ 0xff
 80066a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80066a8:	f001 fd86 	bl	80081b8 <vPortExitCritical>
}
 80066ac:	bf00      	nop
 80066ae:	3710      	adds	r7, #16
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}

080066b4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b084      	sub	sp, #16
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80066bc:	f001 fd46 	bl	800814c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d102      	bne.n	80066ce <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80066c8:	2301      	movs	r3, #1
 80066ca:	60fb      	str	r3, [r7, #12]
 80066cc:	e001      	b.n	80066d2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80066ce:	2300      	movs	r3, #0
 80066d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80066d2:	f001 fd71 	bl	80081b8 <vPortExitCritical>

	return xReturn;
 80066d6:	68fb      	ldr	r3, [r7, #12]
}
 80066d8:	4618      	mov	r0, r3
 80066da:	3710      	adds	r7, #16
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}

080066e0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b084      	sub	sp, #16
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80066e8:	f001 fd30 	bl	800814c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d102      	bne.n	80066fe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80066f8:	2301      	movs	r3, #1
 80066fa:	60fb      	str	r3, [r7, #12]
 80066fc:	e001      	b.n	8006702 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80066fe:	2300      	movs	r3, #0
 8006700:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006702:	f001 fd59 	bl	80081b8 <vPortExitCritical>

	return xReturn;
 8006706:	68fb      	ldr	r3, [r7, #12]
}
 8006708:	4618      	mov	r0, r3
 800670a:	3710      	adds	r7, #16
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}

08006710 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006710:	b480      	push	{r7}
 8006712:	b085      	sub	sp, #20
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800671a:	2300      	movs	r3, #0
 800671c:	60fb      	str	r3, [r7, #12]
 800671e:	e014      	b.n	800674a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006720:	4a0f      	ldr	r2, [pc, #60]	@ (8006760 <vQueueAddToRegistry+0x50>)
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d10b      	bne.n	8006744 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800672c:	490c      	ldr	r1, [pc, #48]	@ (8006760 <vQueueAddToRegistry+0x50>)
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	683a      	ldr	r2, [r7, #0]
 8006732:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006736:	4a0a      	ldr	r2, [pc, #40]	@ (8006760 <vQueueAddToRegistry+0x50>)
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	00db      	lsls	r3, r3, #3
 800673c:	4413      	add	r3, r2
 800673e:	687a      	ldr	r2, [r7, #4]
 8006740:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006742:	e006      	b.n	8006752 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	3301      	adds	r3, #1
 8006748:	60fb      	str	r3, [r7, #12]
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2b07      	cmp	r3, #7
 800674e:	d9e7      	bls.n	8006720 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006750:	bf00      	nop
 8006752:	bf00      	nop
 8006754:	3714      	adds	r7, #20
 8006756:	46bd      	mov	sp, r7
 8006758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675c:	4770      	bx	lr
 800675e:	bf00      	nop
 8006760:	200015c0 	.word	0x200015c0

08006764 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006764:	b580      	push	{r7, lr}
 8006766:	b086      	sub	sp, #24
 8006768:	af00      	add	r7, sp, #0
 800676a:	60f8      	str	r0, [r7, #12]
 800676c:	60b9      	str	r1, [r7, #8]
 800676e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006774:	f001 fcea 	bl	800814c <vPortEnterCritical>
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800677e:	b25b      	sxtb	r3, r3
 8006780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006784:	d103      	bne.n	800678e <vQueueWaitForMessageRestricted+0x2a>
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	2200      	movs	r2, #0
 800678a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006794:	b25b      	sxtb	r3, r3
 8006796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800679a:	d103      	bne.n	80067a4 <vQueueWaitForMessageRestricted+0x40>
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	2200      	movs	r2, #0
 80067a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80067a4:	f001 fd08 	bl	80081b8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d106      	bne.n	80067be <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	3324      	adds	r3, #36	@ 0x24
 80067b4:	687a      	ldr	r2, [r7, #4]
 80067b6:	68b9      	ldr	r1, [r7, #8]
 80067b8:	4618      	mov	r0, r3
 80067ba:	f000 fc83 	bl	80070c4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80067be:	6978      	ldr	r0, [r7, #20]
 80067c0:	f7ff ff26 	bl	8006610 <prvUnlockQueue>
	}
 80067c4:	bf00      	nop
 80067c6:	3718      	adds	r7, #24
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}

080067cc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b08e      	sub	sp, #56	@ 0x38
 80067d0:	af04      	add	r7, sp, #16
 80067d2:	60f8      	str	r0, [r7, #12]
 80067d4:	60b9      	str	r1, [r7, #8]
 80067d6:	607a      	str	r2, [r7, #4]
 80067d8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80067da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d10d      	bne.n	80067fc <xTaskCreateStatic+0x30>
	__asm volatile
 80067e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067e4:	b672      	cpsid	i
 80067e6:	f383 8811 	msr	BASEPRI, r3
 80067ea:	f3bf 8f6f 	isb	sy
 80067ee:	f3bf 8f4f 	dsb	sy
 80067f2:	b662      	cpsie	i
 80067f4:	623b      	str	r3, [r7, #32]
}
 80067f6:	bf00      	nop
 80067f8:	bf00      	nop
 80067fa:	e7fd      	b.n	80067f8 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80067fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d10d      	bne.n	800681e <xTaskCreateStatic+0x52>
	__asm volatile
 8006802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006806:	b672      	cpsid	i
 8006808:	f383 8811 	msr	BASEPRI, r3
 800680c:	f3bf 8f6f 	isb	sy
 8006810:	f3bf 8f4f 	dsb	sy
 8006814:	b662      	cpsie	i
 8006816:	61fb      	str	r3, [r7, #28]
}
 8006818:	bf00      	nop
 800681a:	bf00      	nop
 800681c:	e7fd      	b.n	800681a <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800681e:	23a8      	movs	r3, #168	@ 0xa8
 8006820:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	2ba8      	cmp	r3, #168	@ 0xa8
 8006826:	d00d      	beq.n	8006844 <xTaskCreateStatic+0x78>
	__asm volatile
 8006828:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800682c:	b672      	cpsid	i
 800682e:	f383 8811 	msr	BASEPRI, r3
 8006832:	f3bf 8f6f 	isb	sy
 8006836:	f3bf 8f4f 	dsb	sy
 800683a:	b662      	cpsie	i
 800683c:	61bb      	str	r3, [r7, #24]
}
 800683e:	bf00      	nop
 8006840:	bf00      	nop
 8006842:	e7fd      	b.n	8006840 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006844:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006848:	2b00      	cmp	r3, #0
 800684a:	d01e      	beq.n	800688a <xTaskCreateStatic+0xbe>
 800684c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800684e:	2b00      	cmp	r3, #0
 8006850:	d01b      	beq.n	800688a <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006854:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006858:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800685a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800685c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800685e:	2202      	movs	r2, #2
 8006860:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006864:	2300      	movs	r3, #0
 8006866:	9303      	str	r3, [sp, #12]
 8006868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800686a:	9302      	str	r3, [sp, #8]
 800686c:	f107 0314 	add.w	r3, r7, #20
 8006870:	9301      	str	r3, [sp, #4]
 8006872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006874:	9300      	str	r3, [sp, #0]
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	687a      	ldr	r2, [r7, #4]
 800687a:	68b9      	ldr	r1, [r7, #8]
 800687c:	68f8      	ldr	r0, [r7, #12]
 800687e:	f000 f851 	bl	8006924 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006882:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006884:	f000 f8f8 	bl	8006a78 <prvAddNewTaskToReadyList>
 8006888:	e001      	b.n	800688e <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800688a:	2300      	movs	r3, #0
 800688c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800688e:	697b      	ldr	r3, [r7, #20]
	}
 8006890:	4618      	mov	r0, r3
 8006892:	3728      	adds	r7, #40	@ 0x28
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}

08006898 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006898:	b580      	push	{r7, lr}
 800689a:	b08c      	sub	sp, #48	@ 0x30
 800689c:	af04      	add	r7, sp, #16
 800689e:	60f8      	str	r0, [r7, #12]
 80068a0:	60b9      	str	r1, [r7, #8]
 80068a2:	603b      	str	r3, [r7, #0]
 80068a4:	4613      	mov	r3, r2
 80068a6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80068a8:	88fb      	ldrh	r3, [r7, #6]
 80068aa:	009b      	lsls	r3, r3, #2
 80068ac:	4618      	mov	r0, r3
 80068ae:	f001 fd7b 	bl	80083a8 <pvPortMalloc>
 80068b2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d00e      	beq.n	80068d8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80068ba:	20a8      	movs	r0, #168	@ 0xa8
 80068bc:	f001 fd74 	bl	80083a8 <pvPortMalloc>
 80068c0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80068c2:	69fb      	ldr	r3, [r7, #28]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d003      	beq.n	80068d0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80068c8:	69fb      	ldr	r3, [r7, #28]
 80068ca:	697a      	ldr	r2, [r7, #20]
 80068cc:	631a      	str	r2, [r3, #48]	@ 0x30
 80068ce:	e005      	b.n	80068dc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80068d0:	6978      	ldr	r0, [r7, #20]
 80068d2:	f001 fe37 	bl	8008544 <vPortFree>
 80068d6:	e001      	b.n	80068dc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80068d8:	2300      	movs	r3, #0
 80068da:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80068dc:	69fb      	ldr	r3, [r7, #28]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d017      	beq.n	8006912 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80068e2:	69fb      	ldr	r3, [r7, #28]
 80068e4:	2200      	movs	r2, #0
 80068e6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80068ea:	88fa      	ldrh	r2, [r7, #6]
 80068ec:	2300      	movs	r3, #0
 80068ee:	9303      	str	r3, [sp, #12]
 80068f0:	69fb      	ldr	r3, [r7, #28]
 80068f2:	9302      	str	r3, [sp, #8]
 80068f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068f6:	9301      	str	r3, [sp, #4]
 80068f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068fa:	9300      	str	r3, [sp, #0]
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	68b9      	ldr	r1, [r7, #8]
 8006900:	68f8      	ldr	r0, [r7, #12]
 8006902:	f000 f80f 	bl	8006924 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006906:	69f8      	ldr	r0, [r7, #28]
 8006908:	f000 f8b6 	bl	8006a78 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800690c:	2301      	movs	r3, #1
 800690e:	61bb      	str	r3, [r7, #24]
 8006910:	e002      	b.n	8006918 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006912:	f04f 33ff 	mov.w	r3, #4294967295
 8006916:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006918:	69bb      	ldr	r3, [r7, #24]
	}
 800691a:	4618      	mov	r0, r3
 800691c:	3720      	adds	r7, #32
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
	...

08006924 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b088      	sub	sp, #32
 8006928:	af00      	add	r7, sp, #0
 800692a:	60f8      	str	r0, [r7, #12]
 800692c:	60b9      	str	r1, [r7, #8]
 800692e:	607a      	str	r2, [r7, #4]
 8006930:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006934:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	009b      	lsls	r3, r3, #2
 800693a:	461a      	mov	r2, r3
 800693c:	21a5      	movs	r1, #165	@ 0xa5
 800693e:	f002 f834 	bl	80089aa <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006944:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006946:	6879      	ldr	r1, [r7, #4]
 8006948:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800694c:	440b      	add	r3, r1
 800694e:	009b      	lsls	r3, r3, #2
 8006950:	4413      	add	r3, r2
 8006952:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006954:	69bb      	ldr	r3, [r7, #24]
 8006956:	f023 0307 	bic.w	r3, r3, #7
 800695a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800695c:	69bb      	ldr	r3, [r7, #24]
 800695e:	f003 0307 	and.w	r3, r3, #7
 8006962:	2b00      	cmp	r3, #0
 8006964:	d00d      	beq.n	8006982 <prvInitialiseNewTask+0x5e>
	__asm volatile
 8006966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800696a:	b672      	cpsid	i
 800696c:	f383 8811 	msr	BASEPRI, r3
 8006970:	f3bf 8f6f 	isb	sy
 8006974:	f3bf 8f4f 	dsb	sy
 8006978:	b662      	cpsie	i
 800697a:	617b      	str	r3, [r7, #20]
}
 800697c:	bf00      	nop
 800697e:	bf00      	nop
 8006980:	e7fd      	b.n	800697e <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d01f      	beq.n	80069c8 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006988:	2300      	movs	r3, #0
 800698a:	61fb      	str	r3, [r7, #28]
 800698c:	e012      	b.n	80069b4 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800698e:	68ba      	ldr	r2, [r7, #8]
 8006990:	69fb      	ldr	r3, [r7, #28]
 8006992:	4413      	add	r3, r2
 8006994:	7819      	ldrb	r1, [r3, #0]
 8006996:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006998:	69fb      	ldr	r3, [r7, #28]
 800699a:	4413      	add	r3, r2
 800699c:	3334      	adds	r3, #52	@ 0x34
 800699e:	460a      	mov	r2, r1
 80069a0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80069a2:	68ba      	ldr	r2, [r7, #8]
 80069a4:	69fb      	ldr	r3, [r7, #28]
 80069a6:	4413      	add	r3, r2
 80069a8:	781b      	ldrb	r3, [r3, #0]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d006      	beq.n	80069bc <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80069ae:	69fb      	ldr	r3, [r7, #28]
 80069b0:	3301      	adds	r3, #1
 80069b2:	61fb      	str	r3, [r7, #28]
 80069b4:	69fb      	ldr	r3, [r7, #28]
 80069b6:	2b0f      	cmp	r3, #15
 80069b8:	d9e9      	bls.n	800698e <prvInitialiseNewTask+0x6a>
 80069ba:	e000      	b.n	80069be <prvInitialiseNewTask+0x9a>
			{
				break;
 80069bc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80069be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069c0:	2200      	movs	r2, #0
 80069c2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80069c6:	e003      	b.n	80069d0 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80069c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ca:	2200      	movs	r2, #0
 80069cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80069d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069d2:	2b37      	cmp	r3, #55	@ 0x37
 80069d4:	d901      	bls.n	80069da <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80069d6:	2337      	movs	r3, #55	@ 0x37
 80069d8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80069da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80069de:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80069e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80069e4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80069e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069e8:	2200      	movs	r2, #0
 80069ea:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80069ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ee:	3304      	adds	r3, #4
 80069f0:	4618      	mov	r0, r3
 80069f2:	f7ff f93d 	bl	8005c70 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80069f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069f8:	3318      	adds	r3, #24
 80069fa:	4618      	mov	r0, r3
 80069fc:	f7ff f938 	bl	8005c70 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a04:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a08:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a0e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a14:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a18:	2200      	movs	r2, #0
 8006a1a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a20:	2200      	movs	r2, #0
 8006a22:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a28:	3354      	adds	r3, #84	@ 0x54
 8006a2a:	224c      	movs	r2, #76	@ 0x4c
 8006a2c:	2100      	movs	r1, #0
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f001 ffbb 	bl	80089aa <memset>
 8006a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a36:	4a0d      	ldr	r2, [pc, #52]	@ (8006a6c <prvInitialiseNewTask+0x148>)
 8006a38:	659a      	str	r2, [r3, #88]	@ 0x58
 8006a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a3c:	4a0c      	ldr	r2, [pc, #48]	@ (8006a70 <prvInitialiseNewTask+0x14c>)
 8006a3e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006a40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a42:	4a0c      	ldr	r2, [pc, #48]	@ (8006a74 <prvInitialiseNewTask+0x150>)
 8006a44:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006a46:	683a      	ldr	r2, [r7, #0]
 8006a48:	68f9      	ldr	r1, [r7, #12]
 8006a4a:	69b8      	ldr	r0, [r7, #24]
 8006a4c:	f001 fa72 	bl	8007f34 <pxPortInitialiseStack>
 8006a50:	4602      	mov	r2, r0
 8006a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a54:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006a56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d002      	beq.n	8006a62 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006a5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a60:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a62:	bf00      	nop
 8006a64:	3720      	adds	r7, #32
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}
 8006a6a:	bf00      	nop
 8006a6c:	2000584c 	.word	0x2000584c
 8006a70:	200058b4 	.word	0x200058b4
 8006a74:	2000591c 	.word	0x2000591c

08006a78 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b082      	sub	sp, #8
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006a80:	f001 fb64 	bl	800814c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006a84:	4b2d      	ldr	r3, [pc, #180]	@ (8006b3c <prvAddNewTaskToReadyList+0xc4>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	3301      	adds	r3, #1
 8006a8a:	4a2c      	ldr	r2, [pc, #176]	@ (8006b3c <prvAddNewTaskToReadyList+0xc4>)
 8006a8c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006a8e:	4b2c      	ldr	r3, [pc, #176]	@ (8006b40 <prvAddNewTaskToReadyList+0xc8>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d109      	bne.n	8006aaa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006a96:	4a2a      	ldr	r2, [pc, #168]	@ (8006b40 <prvAddNewTaskToReadyList+0xc8>)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006a9c:	4b27      	ldr	r3, [pc, #156]	@ (8006b3c <prvAddNewTaskToReadyList+0xc4>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d110      	bne.n	8006ac6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006aa4:	f000 fc44 	bl	8007330 <prvInitialiseTaskLists>
 8006aa8:	e00d      	b.n	8006ac6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006aaa:	4b26      	ldr	r3, [pc, #152]	@ (8006b44 <prvAddNewTaskToReadyList+0xcc>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d109      	bne.n	8006ac6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006ab2:	4b23      	ldr	r3, [pc, #140]	@ (8006b40 <prvAddNewTaskToReadyList+0xc8>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d802      	bhi.n	8006ac6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006ac0:	4a1f      	ldr	r2, [pc, #124]	@ (8006b40 <prvAddNewTaskToReadyList+0xc8>)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006ac6:	4b20      	ldr	r3, [pc, #128]	@ (8006b48 <prvAddNewTaskToReadyList+0xd0>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	3301      	adds	r3, #1
 8006acc:	4a1e      	ldr	r2, [pc, #120]	@ (8006b48 <prvAddNewTaskToReadyList+0xd0>)
 8006ace:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006ad0:	4b1d      	ldr	r3, [pc, #116]	@ (8006b48 <prvAddNewTaskToReadyList+0xd0>)
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006adc:	4b1b      	ldr	r3, [pc, #108]	@ (8006b4c <prvAddNewTaskToReadyList+0xd4>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d903      	bls.n	8006aec <prvAddNewTaskToReadyList+0x74>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ae8:	4a18      	ldr	r2, [pc, #96]	@ (8006b4c <prvAddNewTaskToReadyList+0xd4>)
 8006aea:	6013      	str	r3, [r2, #0]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006af0:	4613      	mov	r3, r2
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	4413      	add	r3, r2
 8006af6:	009b      	lsls	r3, r3, #2
 8006af8:	4a15      	ldr	r2, [pc, #84]	@ (8006b50 <prvAddNewTaskToReadyList+0xd8>)
 8006afa:	441a      	add	r2, r3
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	3304      	adds	r3, #4
 8006b00:	4619      	mov	r1, r3
 8006b02:	4610      	mov	r0, r2
 8006b04:	f7ff f8c1 	bl	8005c8a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006b08:	f001 fb56 	bl	80081b8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006b0c:	4b0d      	ldr	r3, [pc, #52]	@ (8006b44 <prvAddNewTaskToReadyList+0xcc>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d00e      	beq.n	8006b32 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006b14:	4b0a      	ldr	r3, [pc, #40]	@ (8006b40 <prvAddNewTaskToReadyList+0xc8>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d207      	bcs.n	8006b32 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006b22:	4b0c      	ldr	r3, [pc, #48]	@ (8006b54 <prvAddNewTaskToReadyList+0xdc>)
 8006b24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b28:	601a      	str	r2, [r3, #0]
 8006b2a:	f3bf 8f4f 	dsb	sy
 8006b2e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b32:	bf00      	nop
 8006b34:	3708      	adds	r7, #8
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}
 8006b3a:	bf00      	nop
 8006b3c:	20001ad4 	.word	0x20001ad4
 8006b40:	20001600 	.word	0x20001600
 8006b44:	20001ae0 	.word	0x20001ae0
 8006b48:	20001af0 	.word	0x20001af0
 8006b4c:	20001adc 	.word	0x20001adc
 8006b50:	20001604 	.word	0x20001604
 8006b54:	e000ed04 	.word	0xe000ed04

08006b58 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b084      	sub	sp, #16
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006b60:	2300      	movs	r3, #0
 8006b62:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d01a      	beq.n	8006ba0 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006b6a:	4b15      	ldr	r3, [pc, #84]	@ (8006bc0 <vTaskDelay+0x68>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d00d      	beq.n	8006b8e <vTaskDelay+0x36>
	__asm volatile
 8006b72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b76:	b672      	cpsid	i
 8006b78:	f383 8811 	msr	BASEPRI, r3
 8006b7c:	f3bf 8f6f 	isb	sy
 8006b80:	f3bf 8f4f 	dsb	sy
 8006b84:	b662      	cpsie	i
 8006b86:	60bb      	str	r3, [r7, #8]
}
 8006b88:	bf00      	nop
 8006b8a:	bf00      	nop
 8006b8c:	e7fd      	b.n	8006b8a <vTaskDelay+0x32>
			vTaskSuspendAll();
 8006b8e:	f000 f88f 	bl	8006cb0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006b92:	2100      	movs	r1, #0
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f000 fe11 	bl	80077bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006b9a:	f000 f897 	bl	8006ccc <xTaskResumeAll>
 8006b9e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d107      	bne.n	8006bb6 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8006ba6:	4b07      	ldr	r3, [pc, #28]	@ (8006bc4 <vTaskDelay+0x6c>)
 8006ba8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006bac:	601a      	str	r2, [r3, #0]
 8006bae:	f3bf 8f4f 	dsb	sy
 8006bb2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006bb6:	bf00      	nop
 8006bb8:	3710      	adds	r7, #16
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}
 8006bbe:	bf00      	nop
 8006bc0:	20001afc 	.word	0x20001afc
 8006bc4:	e000ed04 	.word	0xe000ed04

08006bc8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b08a      	sub	sp, #40	@ 0x28
 8006bcc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006bd6:	463a      	mov	r2, r7
 8006bd8:	1d39      	adds	r1, r7, #4
 8006bda:	f107 0308 	add.w	r3, r7, #8
 8006bde:	4618      	mov	r0, r3
 8006be0:	f7fe fff2 	bl	8005bc8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006be4:	6839      	ldr	r1, [r7, #0]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	68ba      	ldr	r2, [r7, #8]
 8006bea:	9202      	str	r2, [sp, #8]
 8006bec:	9301      	str	r3, [sp, #4]
 8006bee:	2300      	movs	r3, #0
 8006bf0:	9300      	str	r3, [sp, #0]
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	460a      	mov	r2, r1
 8006bf6:	4926      	ldr	r1, [pc, #152]	@ (8006c90 <vTaskStartScheduler+0xc8>)
 8006bf8:	4826      	ldr	r0, [pc, #152]	@ (8006c94 <vTaskStartScheduler+0xcc>)
 8006bfa:	f7ff fde7 	bl	80067cc <xTaskCreateStatic>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	4a25      	ldr	r2, [pc, #148]	@ (8006c98 <vTaskStartScheduler+0xd0>)
 8006c02:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006c04:	4b24      	ldr	r3, [pc, #144]	@ (8006c98 <vTaskStartScheduler+0xd0>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d002      	beq.n	8006c12 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	617b      	str	r3, [r7, #20]
 8006c10:	e001      	b.n	8006c16 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006c12:	2300      	movs	r3, #0
 8006c14:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d102      	bne.n	8006c22 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006c1c:	f000 fe22 	bl	8007864 <xTimerCreateTimerTask>
 8006c20:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	2b01      	cmp	r3, #1
 8006c26:	d11d      	bne.n	8006c64 <vTaskStartScheduler+0x9c>
	__asm volatile
 8006c28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c2c:	b672      	cpsid	i
 8006c2e:	f383 8811 	msr	BASEPRI, r3
 8006c32:	f3bf 8f6f 	isb	sy
 8006c36:	f3bf 8f4f 	dsb	sy
 8006c3a:	b662      	cpsie	i
 8006c3c:	613b      	str	r3, [r7, #16]
}
 8006c3e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006c40:	4b16      	ldr	r3, [pc, #88]	@ (8006c9c <vTaskStartScheduler+0xd4>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	3354      	adds	r3, #84	@ 0x54
 8006c46:	4a16      	ldr	r2, [pc, #88]	@ (8006ca0 <vTaskStartScheduler+0xd8>)
 8006c48:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006c4a:	4b16      	ldr	r3, [pc, #88]	@ (8006ca4 <vTaskStartScheduler+0xdc>)
 8006c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8006c50:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006c52:	4b15      	ldr	r3, [pc, #84]	@ (8006ca8 <vTaskStartScheduler+0xe0>)
 8006c54:	2201      	movs	r2, #1
 8006c56:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006c58:	4b14      	ldr	r3, [pc, #80]	@ (8006cac <vTaskStartScheduler+0xe4>)
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006c5e:	f001 f9f7 	bl	8008050 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006c62:	e011      	b.n	8006c88 <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c6a:	d10d      	bne.n	8006c88 <vTaskStartScheduler+0xc0>
	__asm volatile
 8006c6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c70:	b672      	cpsid	i
 8006c72:	f383 8811 	msr	BASEPRI, r3
 8006c76:	f3bf 8f6f 	isb	sy
 8006c7a:	f3bf 8f4f 	dsb	sy
 8006c7e:	b662      	cpsie	i
 8006c80:	60fb      	str	r3, [r7, #12]
}
 8006c82:	bf00      	nop
 8006c84:	bf00      	nop
 8006c86:	e7fd      	b.n	8006c84 <vTaskStartScheduler+0xbc>
}
 8006c88:	bf00      	nop
 8006c8a:	3718      	adds	r7, #24
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}
 8006c90:	080096e4 	.word	0x080096e4
 8006c94:	08007301 	.word	0x08007301
 8006c98:	20001af8 	.word	0x20001af8
 8006c9c:	20001600 	.word	0x20001600
 8006ca0:	2000001c 	.word	0x2000001c
 8006ca4:	20001af4 	.word	0x20001af4
 8006ca8:	20001ae0 	.word	0x20001ae0
 8006cac:	20001ad8 	.word	0x20001ad8

08006cb0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006cb4:	4b04      	ldr	r3, [pc, #16]	@ (8006cc8 <vTaskSuspendAll+0x18>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	3301      	adds	r3, #1
 8006cba:	4a03      	ldr	r2, [pc, #12]	@ (8006cc8 <vTaskSuspendAll+0x18>)
 8006cbc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006cbe:	bf00      	nop
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr
 8006cc8:	20001afc 	.word	0x20001afc

08006ccc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b084      	sub	sp, #16
 8006cd0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006cda:	4b43      	ldr	r3, [pc, #268]	@ (8006de8 <xTaskResumeAll+0x11c>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d10d      	bne.n	8006cfe <xTaskResumeAll+0x32>
	__asm volatile
 8006ce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ce6:	b672      	cpsid	i
 8006ce8:	f383 8811 	msr	BASEPRI, r3
 8006cec:	f3bf 8f6f 	isb	sy
 8006cf0:	f3bf 8f4f 	dsb	sy
 8006cf4:	b662      	cpsie	i
 8006cf6:	603b      	str	r3, [r7, #0]
}
 8006cf8:	bf00      	nop
 8006cfa:	bf00      	nop
 8006cfc:	e7fd      	b.n	8006cfa <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006cfe:	f001 fa25 	bl	800814c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006d02:	4b39      	ldr	r3, [pc, #228]	@ (8006de8 <xTaskResumeAll+0x11c>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	3b01      	subs	r3, #1
 8006d08:	4a37      	ldr	r2, [pc, #220]	@ (8006de8 <xTaskResumeAll+0x11c>)
 8006d0a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d0c:	4b36      	ldr	r3, [pc, #216]	@ (8006de8 <xTaskResumeAll+0x11c>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d162      	bne.n	8006dda <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006d14:	4b35      	ldr	r3, [pc, #212]	@ (8006dec <xTaskResumeAll+0x120>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d05e      	beq.n	8006dda <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006d1c:	e02f      	b.n	8006d7e <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d1e:	4b34      	ldr	r3, [pc, #208]	@ (8006df0 <xTaskResumeAll+0x124>)
 8006d20:	68db      	ldr	r3, [r3, #12]
 8006d22:	68db      	ldr	r3, [r3, #12]
 8006d24:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	3318      	adds	r3, #24
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f7ff f80a 	bl	8005d44 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	3304      	adds	r3, #4
 8006d34:	4618      	mov	r0, r3
 8006d36:	f7ff f805 	bl	8005d44 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d3e:	4b2d      	ldr	r3, [pc, #180]	@ (8006df4 <xTaskResumeAll+0x128>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d903      	bls.n	8006d4e <xTaskResumeAll+0x82>
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d4a:	4a2a      	ldr	r2, [pc, #168]	@ (8006df4 <xTaskResumeAll+0x128>)
 8006d4c:	6013      	str	r3, [r2, #0]
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d52:	4613      	mov	r3, r2
 8006d54:	009b      	lsls	r3, r3, #2
 8006d56:	4413      	add	r3, r2
 8006d58:	009b      	lsls	r3, r3, #2
 8006d5a:	4a27      	ldr	r2, [pc, #156]	@ (8006df8 <xTaskResumeAll+0x12c>)
 8006d5c:	441a      	add	r2, r3
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	3304      	adds	r3, #4
 8006d62:	4619      	mov	r1, r3
 8006d64:	4610      	mov	r0, r2
 8006d66:	f7fe ff90 	bl	8005c8a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d6e:	4b23      	ldr	r3, [pc, #140]	@ (8006dfc <xTaskResumeAll+0x130>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d302      	bcc.n	8006d7e <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8006d78:	4b21      	ldr	r3, [pc, #132]	@ (8006e00 <xTaskResumeAll+0x134>)
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006d7e:	4b1c      	ldr	r3, [pc, #112]	@ (8006df0 <xTaskResumeAll+0x124>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d1cb      	bne.n	8006d1e <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d001      	beq.n	8006d90 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006d8c:	f000 fb76 	bl	800747c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006d90:	4b1c      	ldr	r3, [pc, #112]	@ (8006e04 <xTaskResumeAll+0x138>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d010      	beq.n	8006dbe <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006d9c:	f000 f846 	bl	8006e2c <xTaskIncrementTick>
 8006da0:	4603      	mov	r3, r0
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d002      	beq.n	8006dac <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8006da6:	4b16      	ldr	r3, [pc, #88]	@ (8006e00 <xTaskResumeAll+0x134>)
 8006da8:	2201      	movs	r2, #1
 8006daa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	3b01      	subs	r3, #1
 8006db0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d1f1      	bne.n	8006d9c <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8006db8:	4b12      	ldr	r3, [pc, #72]	@ (8006e04 <xTaskResumeAll+0x138>)
 8006dba:	2200      	movs	r2, #0
 8006dbc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006dbe:	4b10      	ldr	r3, [pc, #64]	@ (8006e00 <xTaskResumeAll+0x134>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d009      	beq.n	8006dda <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006dca:	4b0f      	ldr	r3, [pc, #60]	@ (8006e08 <xTaskResumeAll+0x13c>)
 8006dcc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006dd0:	601a      	str	r2, [r3, #0]
 8006dd2:	f3bf 8f4f 	dsb	sy
 8006dd6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006dda:	f001 f9ed 	bl	80081b8 <vPortExitCritical>

	return xAlreadyYielded;
 8006dde:	68bb      	ldr	r3, [r7, #8]
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3710      	adds	r7, #16
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}
 8006de8:	20001afc 	.word	0x20001afc
 8006dec:	20001ad4 	.word	0x20001ad4
 8006df0:	20001a94 	.word	0x20001a94
 8006df4:	20001adc 	.word	0x20001adc
 8006df8:	20001604 	.word	0x20001604
 8006dfc:	20001600 	.word	0x20001600
 8006e00:	20001ae8 	.word	0x20001ae8
 8006e04:	20001ae4 	.word	0x20001ae4
 8006e08:	e000ed04 	.word	0xe000ed04

08006e0c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b083      	sub	sp, #12
 8006e10:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006e12:	4b05      	ldr	r3, [pc, #20]	@ (8006e28 <xTaskGetTickCount+0x1c>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006e18:	687b      	ldr	r3, [r7, #4]
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	370c      	adds	r7, #12
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e24:	4770      	bx	lr
 8006e26:	bf00      	nop
 8006e28:	20001ad8 	.word	0x20001ad8

08006e2c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b086      	sub	sp, #24
 8006e30:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006e32:	2300      	movs	r3, #0
 8006e34:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e36:	4b50      	ldr	r3, [pc, #320]	@ (8006f78 <xTaskIncrementTick+0x14c>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	f040 808c 	bne.w	8006f58 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006e40:	4b4e      	ldr	r3, [pc, #312]	@ (8006f7c <xTaskIncrementTick+0x150>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	3301      	adds	r3, #1
 8006e46:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006e48:	4a4c      	ldr	r2, [pc, #304]	@ (8006f7c <xTaskIncrementTick+0x150>)
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d123      	bne.n	8006e9c <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8006e54:	4b4a      	ldr	r3, [pc, #296]	@ (8006f80 <xTaskIncrementTick+0x154>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d00d      	beq.n	8006e7a <xTaskIncrementTick+0x4e>
	__asm volatile
 8006e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e62:	b672      	cpsid	i
 8006e64:	f383 8811 	msr	BASEPRI, r3
 8006e68:	f3bf 8f6f 	isb	sy
 8006e6c:	f3bf 8f4f 	dsb	sy
 8006e70:	b662      	cpsie	i
 8006e72:	603b      	str	r3, [r7, #0]
}
 8006e74:	bf00      	nop
 8006e76:	bf00      	nop
 8006e78:	e7fd      	b.n	8006e76 <xTaskIncrementTick+0x4a>
 8006e7a:	4b41      	ldr	r3, [pc, #260]	@ (8006f80 <xTaskIncrementTick+0x154>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	60fb      	str	r3, [r7, #12]
 8006e80:	4b40      	ldr	r3, [pc, #256]	@ (8006f84 <xTaskIncrementTick+0x158>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a3e      	ldr	r2, [pc, #248]	@ (8006f80 <xTaskIncrementTick+0x154>)
 8006e86:	6013      	str	r3, [r2, #0]
 8006e88:	4a3e      	ldr	r2, [pc, #248]	@ (8006f84 <xTaskIncrementTick+0x158>)
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	6013      	str	r3, [r2, #0]
 8006e8e:	4b3e      	ldr	r3, [pc, #248]	@ (8006f88 <xTaskIncrementTick+0x15c>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	3301      	adds	r3, #1
 8006e94:	4a3c      	ldr	r2, [pc, #240]	@ (8006f88 <xTaskIncrementTick+0x15c>)
 8006e96:	6013      	str	r3, [r2, #0]
 8006e98:	f000 faf0 	bl	800747c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006e9c:	4b3b      	ldr	r3, [pc, #236]	@ (8006f8c <xTaskIncrementTick+0x160>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	693a      	ldr	r2, [r7, #16]
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	d349      	bcc.n	8006f3a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ea6:	4b36      	ldr	r3, [pc, #216]	@ (8006f80 <xTaskIncrementTick+0x154>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d104      	bne.n	8006eba <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006eb0:	4b36      	ldr	r3, [pc, #216]	@ (8006f8c <xTaskIncrementTick+0x160>)
 8006eb2:	f04f 32ff 	mov.w	r2, #4294967295
 8006eb6:	601a      	str	r2, [r3, #0]
					break;
 8006eb8:	e03f      	b.n	8006f3a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006eba:	4b31      	ldr	r3, [pc, #196]	@ (8006f80 <xTaskIncrementTick+0x154>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	68db      	ldr	r3, [r3, #12]
 8006ec0:	68db      	ldr	r3, [r3, #12]
 8006ec2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006eca:	693a      	ldr	r2, [r7, #16]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	429a      	cmp	r2, r3
 8006ed0:	d203      	bcs.n	8006eda <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006ed2:	4a2e      	ldr	r2, [pc, #184]	@ (8006f8c <xTaskIncrementTick+0x160>)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006ed8:	e02f      	b.n	8006f3a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	3304      	adds	r3, #4
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f7fe ff30 	bl	8005d44 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d004      	beq.n	8006ef6 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	3318      	adds	r3, #24
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	f7fe ff27 	bl	8005d44 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006efa:	4b25      	ldr	r3, [pc, #148]	@ (8006f90 <xTaskIncrementTick+0x164>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	429a      	cmp	r2, r3
 8006f00:	d903      	bls.n	8006f0a <xTaskIncrementTick+0xde>
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f06:	4a22      	ldr	r2, [pc, #136]	@ (8006f90 <xTaskIncrementTick+0x164>)
 8006f08:	6013      	str	r3, [r2, #0]
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f0e:	4613      	mov	r3, r2
 8006f10:	009b      	lsls	r3, r3, #2
 8006f12:	4413      	add	r3, r2
 8006f14:	009b      	lsls	r3, r3, #2
 8006f16:	4a1f      	ldr	r2, [pc, #124]	@ (8006f94 <xTaskIncrementTick+0x168>)
 8006f18:	441a      	add	r2, r3
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	3304      	adds	r3, #4
 8006f1e:	4619      	mov	r1, r3
 8006f20:	4610      	mov	r0, r2
 8006f22:	f7fe feb2 	bl	8005c8a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f2a:	4b1b      	ldr	r3, [pc, #108]	@ (8006f98 <xTaskIncrementTick+0x16c>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f30:	429a      	cmp	r2, r3
 8006f32:	d3b8      	bcc.n	8006ea6 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8006f34:	2301      	movs	r3, #1
 8006f36:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f38:	e7b5      	b.n	8006ea6 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006f3a:	4b17      	ldr	r3, [pc, #92]	@ (8006f98 <xTaskIncrementTick+0x16c>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f40:	4914      	ldr	r1, [pc, #80]	@ (8006f94 <xTaskIncrementTick+0x168>)
 8006f42:	4613      	mov	r3, r2
 8006f44:	009b      	lsls	r3, r3, #2
 8006f46:	4413      	add	r3, r2
 8006f48:	009b      	lsls	r3, r3, #2
 8006f4a:	440b      	add	r3, r1
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	2b01      	cmp	r3, #1
 8006f50:	d907      	bls.n	8006f62 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8006f52:	2301      	movs	r3, #1
 8006f54:	617b      	str	r3, [r7, #20]
 8006f56:	e004      	b.n	8006f62 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006f58:	4b10      	ldr	r3, [pc, #64]	@ (8006f9c <xTaskIncrementTick+0x170>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	3301      	adds	r3, #1
 8006f5e:	4a0f      	ldr	r2, [pc, #60]	@ (8006f9c <xTaskIncrementTick+0x170>)
 8006f60:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006f62:	4b0f      	ldr	r3, [pc, #60]	@ (8006fa0 <xTaskIncrementTick+0x174>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d001      	beq.n	8006f6e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006f6e:	697b      	ldr	r3, [r7, #20]
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	3718      	adds	r7, #24
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}
 8006f78:	20001afc 	.word	0x20001afc
 8006f7c:	20001ad8 	.word	0x20001ad8
 8006f80:	20001a8c 	.word	0x20001a8c
 8006f84:	20001a90 	.word	0x20001a90
 8006f88:	20001aec 	.word	0x20001aec
 8006f8c:	20001af4 	.word	0x20001af4
 8006f90:	20001adc 	.word	0x20001adc
 8006f94:	20001604 	.word	0x20001604
 8006f98:	20001600 	.word	0x20001600
 8006f9c:	20001ae4 	.word	0x20001ae4
 8006fa0:	20001ae8 	.word	0x20001ae8

08006fa4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b085      	sub	sp, #20
 8006fa8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006faa:	4b2c      	ldr	r3, [pc, #176]	@ (800705c <vTaskSwitchContext+0xb8>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d003      	beq.n	8006fba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006fb2:	4b2b      	ldr	r3, [pc, #172]	@ (8007060 <vTaskSwitchContext+0xbc>)
 8006fb4:	2201      	movs	r2, #1
 8006fb6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006fb8:	e049      	b.n	800704e <vTaskSwitchContext+0xaa>
		xYieldPending = pdFALSE;
 8006fba:	4b29      	ldr	r3, [pc, #164]	@ (8007060 <vTaskSwitchContext+0xbc>)
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fc0:	4b28      	ldr	r3, [pc, #160]	@ (8007064 <vTaskSwitchContext+0xc0>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	60fb      	str	r3, [r7, #12]
 8006fc6:	e013      	b.n	8006ff0 <vTaskSwitchContext+0x4c>
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d10d      	bne.n	8006fea <vTaskSwitchContext+0x46>
	__asm volatile
 8006fce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fd2:	b672      	cpsid	i
 8006fd4:	f383 8811 	msr	BASEPRI, r3
 8006fd8:	f3bf 8f6f 	isb	sy
 8006fdc:	f3bf 8f4f 	dsb	sy
 8006fe0:	b662      	cpsie	i
 8006fe2:	607b      	str	r3, [r7, #4]
}
 8006fe4:	bf00      	nop
 8006fe6:	bf00      	nop
 8006fe8:	e7fd      	b.n	8006fe6 <vTaskSwitchContext+0x42>
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	3b01      	subs	r3, #1
 8006fee:	60fb      	str	r3, [r7, #12]
 8006ff0:	491d      	ldr	r1, [pc, #116]	@ (8007068 <vTaskSwitchContext+0xc4>)
 8006ff2:	68fa      	ldr	r2, [r7, #12]
 8006ff4:	4613      	mov	r3, r2
 8006ff6:	009b      	lsls	r3, r3, #2
 8006ff8:	4413      	add	r3, r2
 8006ffa:	009b      	lsls	r3, r3, #2
 8006ffc:	440b      	add	r3, r1
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d0e1      	beq.n	8006fc8 <vTaskSwitchContext+0x24>
 8007004:	68fa      	ldr	r2, [r7, #12]
 8007006:	4613      	mov	r3, r2
 8007008:	009b      	lsls	r3, r3, #2
 800700a:	4413      	add	r3, r2
 800700c:	009b      	lsls	r3, r3, #2
 800700e:	4a16      	ldr	r2, [pc, #88]	@ (8007068 <vTaskSwitchContext+0xc4>)
 8007010:	4413      	add	r3, r2
 8007012:	60bb      	str	r3, [r7, #8]
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	685a      	ldr	r2, [r3, #4]
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	605a      	str	r2, [r3, #4]
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	685a      	ldr	r2, [r3, #4]
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	3308      	adds	r3, #8
 8007026:	429a      	cmp	r2, r3
 8007028:	d104      	bne.n	8007034 <vTaskSwitchContext+0x90>
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	685a      	ldr	r2, [r3, #4]
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	605a      	str	r2, [r3, #4]
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	68db      	ldr	r3, [r3, #12]
 800703a:	4a0c      	ldr	r2, [pc, #48]	@ (800706c <vTaskSwitchContext+0xc8>)
 800703c:	6013      	str	r3, [r2, #0]
 800703e:	4a09      	ldr	r2, [pc, #36]	@ (8007064 <vTaskSwitchContext+0xc0>)
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007044:	4b09      	ldr	r3, [pc, #36]	@ (800706c <vTaskSwitchContext+0xc8>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	3354      	adds	r3, #84	@ 0x54
 800704a:	4a09      	ldr	r2, [pc, #36]	@ (8007070 <vTaskSwitchContext+0xcc>)
 800704c:	6013      	str	r3, [r2, #0]
}
 800704e:	bf00      	nop
 8007050:	3714      	adds	r7, #20
 8007052:	46bd      	mov	sp, r7
 8007054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007058:	4770      	bx	lr
 800705a:	bf00      	nop
 800705c:	20001afc 	.word	0x20001afc
 8007060:	20001ae8 	.word	0x20001ae8
 8007064:	20001adc 	.word	0x20001adc
 8007068:	20001604 	.word	0x20001604
 800706c:	20001600 	.word	0x20001600
 8007070:	2000001c 	.word	0x2000001c

08007074 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b084      	sub	sp, #16
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
 800707c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d10d      	bne.n	80070a0 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8007084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007088:	b672      	cpsid	i
 800708a:	f383 8811 	msr	BASEPRI, r3
 800708e:	f3bf 8f6f 	isb	sy
 8007092:	f3bf 8f4f 	dsb	sy
 8007096:	b662      	cpsie	i
 8007098:	60fb      	str	r3, [r7, #12]
}
 800709a:	bf00      	nop
 800709c:	bf00      	nop
 800709e:	e7fd      	b.n	800709c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80070a0:	4b07      	ldr	r3, [pc, #28]	@ (80070c0 <vTaskPlaceOnEventList+0x4c>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	3318      	adds	r3, #24
 80070a6:	4619      	mov	r1, r3
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f7fe fe12 	bl	8005cd2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80070ae:	2101      	movs	r1, #1
 80070b0:	6838      	ldr	r0, [r7, #0]
 80070b2:	f000 fb83 	bl	80077bc <prvAddCurrentTaskToDelayedList>
}
 80070b6:	bf00      	nop
 80070b8:	3710      	adds	r7, #16
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}
 80070be:	bf00      	nop
 80070c0:	20001600 	.word	0x20001600

080070c4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b086      	sub	sp, #24
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	60f8      	str	r0, [r7, #12]
 80070cc:	60b9      	str	r1, [r7, #8]
 80070ce:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d10d      	bne.n	80070f2 <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 80070d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070da:	b672      	cpsid	i
 80070dc:	f383 8811 	msr	BASEPRI, r3
 80070e0:	f3bf 8f6f 	isb	sy
 80070e4:	f3bf 8f4f 	dsb	sy
 80070e8:	b662      	cpsie	i
 80070ea:	617b      	str	r3, [r7, #20]
}
 80070ec:	bf00      	nop
 80070ee:	bf00      	nop
 80070f0:	e7fd      	b.n	80070ee <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80070f2:	4b0a      	ldr	r3, [pc, #40]	@ (800711c <vTaskPlaceOnEventListRestricted+0x58>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	3318      	adds	r3, #24
 80070f8:	4619      	mov	r1, r3
 80070fa:	68f8      	ldr	r0, [r7, #12]
 80070fc:	f7fe fdc5 	bl	8005c8a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d002      	beq.n	800710c <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 8007106:	f04f 33ff 	mov.w	r3, #4294967295
 800710a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800710c:	6879      	ldr	r1, [r7, #4]
 800710e:	68b8      	ldr	r0, [r7, #8]
 8007110:	f000 fb54 	bl	80077bc <prvAddCurrentTaskToDelayedList>
	}
 8007114:	bf00      	nop
 8007116:	3718      	adds	r7, #24
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}
 800711c:	20001600 	.word	0x20001600

08007120 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b086      	sub	sp, #24
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	68db      	ldr	r3, [r3, #12]
 800712c:	68db      	ldr	r3, [r3, #12]
 800712e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d10d      	bne.n	8007152 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8007136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800713a:	b672      	cpsid	i
 800713c:	f383 8811 	msr	BASEPRI, r3
 8007140:	f3bf 8f6f 	isb	sy
 8007144:	f3bf 8f4f 	dsb	sy
 8007148:	b662      	cpsie	i
 800714a:	60fb      	str	r3, [r7, #12]
}
 800714c:	bf00      	nop
 800714e:	bf00      	nop
 8007150:	e7fd      	b.n	800714e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	3318      	adds	r3, #24
 8007156:	4618      	mov	r0, r3
 8007158:	f7fe fdf4 	bl	8005d44 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800715c:	4b1d      	ldr	r3, [pc, #116]	@ (80071d4 <xTaskRemoveFromEventList+0xb4>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d11d      	bne.n	80071a0 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	3304      	adds	r3, #4
 8007168:	4618      	mov	r0, r3
 800716a:	f7fe fdeb 	bl	8005d44 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007172:	4b19      	ldr	r3, [pc, #100]	@ (80071d8 <xTaskRemoveFromEventList+0xb8>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	429a      	cmp	r2, r3
 8007178:	d903      	bls.n	8007182 <xTaskRemoveFromEventList+0x62>
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800717e:	4a16      	ldr	r2, [pc, #88]	@ (80071d8 <xTaskRemoveFromEventList+0xb8>)
 8007180:	6013      	str	r3, [r2, #0]
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007186:	4613      	mov	r3, r2
 8007188:	009b      	lsls	r3, r3, #2
 800718a:	4413      	add	r3, r2
 800718c:	009b      	lsls	r3, r3, #2
 800718e:	4a13      	ldr	r2, [pc, #76]	@ (80071dc <xTaskRemoveFromEventList+0xbc>)
 8007190:	441a      	add	r2, r3
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	3304      	adds	r3, #4
 8007196:	4619      	mov	r1, r3
 8007198:	4610      	mov	r0, r2
 800719a:	f7fe fd76 	bl	8005c8a <vListInsertEnd>
 800719e:	e005      	b.n	80071ac <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	3318      	adds	r3, #24
 80071a4:	4619      	mov	r1, r3
 80071a6:	480e      	ldr	r0, [pc, #56]	@ (80071e0 <xTaskRemoveFromEventList+0xc0>)
 80071a8:	f7fe fd6f 	bl	8005c8a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071b0:	4b0c      	ldr	r3, [pc, #48]	@ (80071e4 <xTaskRemoveFromEventList+0xc4>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071b6:	429a      	cmp	r2, r3
 80071b8:	d905      	bls.n	80071c6 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80071ba:	2301      	movs	r3, #1
 80071bc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80071be:	4b0a      	ldr	r3, [pc, #40]	@ (80071e8 <xTaskRemoveFromEventList+0xc8>)
 80071c0:	2201      	movs	r2, #1
 80071c2:	601a      	str	r2, [r3, #0]
 80071c4:	e001      	b.n	80071ca <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 80071c6:	2300      	movs	r3, #0
 80071c8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80071ca:	697b      	ldr	r3, [r7, #20]
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3718      	adds	r7, #24
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}
 80071d4:	20001afc 	.word	0x20001afc
 80071d8:	20001adc 	.word	0x20001adc
 80071dc:	20001604 	.word	0x20001604
 80071e0:	20001a94 	.word	0x20001a94
 80071e4:	20001600 	.word	0x20001600
 80071e8:	20001ae8 	.word	0x20001ae8

080071ec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80071ec:	b480      	push	{r7}
 80071ee:	b083      	sub	sp, #12
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80071f4:	4b06      	ldr	r3, [pc, #24]	@ (8007210 <vTaskInternalSetTimeOutState+0x24>)
 80071f6:	681a      	ldr	r2, [r3, #0]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80071fc:	4b05      	ldr	r3, [pc, #20]	@ (8007214 <vTaskInternalSetTimeOutState+0x28>)
 80071fe:	681a      	ldr	r2, [r3, #0]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	605a      	str	r2, [r3, #4]
}
 8007204:	bf00      	nop
 8007206:	370c      	adds	r7, #12
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr
 8007210:	20001aec 	.word	0x20001aec
 8007214:	20001ad8 	.word	0x20001ad8

08007218 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b088      	sub	sp, #32
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d10d      	bne.n	8007244 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8007228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800722c:	b672      	cpsid	i
 800722e:	f383 8811 	msr	BASEPRI, r3
 8007232:	f3bf 8f6f 	isb	sy
 8007236:	f3bf 8f4f 	dsb	sy
 800723a:	b662      	cpsie	i
 800723c:	613b      	str	r3, [r7, #16]
}
 800723e:	bf00      	nop
 8007240:	bf00      	nop
 8007242:	e7fd      	b.n	8007240 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d10d      	bne.n	8007266 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800724a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800724e:	b672      	cpsid	i
 8007250:	f383 8811 	msr	BASEPRI, r3
 8007254:	f3bf 8f6f 	isb	sy
 8007258:	f3bf 8f4f 	dsb	sy
 800725c:	b662      	cpsie	i
 800725e:	60fb      	str	r3, [r7, #12]
}
 8007260:	bf00      	nop
 8007262:	bf00      	nop
 8007264:	e7fd      	b.n	8007262 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8007266:	f000 ff71 	bl	800814c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800726a:	4b1d      	ldr	r3, [pc, #116]	@ (80072e0 <xTaskCheckForTimeOut+0xc8>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	69ba      	ldr	r2, [r7, #24]
 8007276:	1ad3      	subs	r3, r2, r3
 8007278:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007282:	d102      	bne.n	800728a <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007284:	2300      	movs	r3, #0
 8007286:	61fb      	str	r3, [r7, #28]
 8007288:	e023      	b.n	80072d2 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681a      	ldr	r2, [r3, #0]
 800728e:	4b15      	ldr	r3, [pc, #84]	@ (80072e4 <xTaskCheckForTimeOut+0xcc>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	429a      	cmp	r2, r3
 8007294:	d007      	beq.n	80072a6 <xTaskCheckForTimeOut+0x8e>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	69ba      	ldr	r2, [r7, #24]
 800729c:	429a      	cmp	r2, r3
 800729e:	d302      	bcc.n	80072a6 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80072a0:	2301      	movs	r3, #1
 80072a2:	61fb      	str	r3, [r7, #28]
 80072a4:	e015      	b.n	80072d2 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	697a      	ldr	r2, [r7, #20]
 80072ac:	429a      	cmp	r2, r3
 80072ae:	d20b      	bcs.n	80072c8 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	681a      	ldr	r2, [r3, #0]
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	1ad2      	subs	r2, r2, r3
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f7ff ff95 	bl	80071ec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80072c2:	2300      	movs	r3, #0
 80072c4:	61fb      	str	r3, [r7, #28]
 80072c6:	e004      	b.n	80072d2 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	2200      	movs	r2, #0
 80072cc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80072ce:	2301      	movs	r3, #1
 80072d0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80072d2:	f000 ff71 	bl	80081b8 <vPortExitCritical>

	return xReturn;
 80072d6:	69fb      	ldr	r3, [r7, #28]
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3720      	adds	r7, #32
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}
 80072e0:	20001ad8 	.word	0x20001ad8
 80072e4:	20001aec 	.word	0x20001aec

080072e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80072e8:	b480      	push	{r7}
 80072ea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80072ec:	4b03      	ldr	r3, [pc, #12]	@ (80072fc <vTaskMissedYield+0x14>)
 80072ee:	2201      	movs	r2, #1
 80072f0:	601a      	str	r2, [r3, #0]
}
 80072f2:	bf00      	nop
 80072f4:	46bd      	mov	sp, r7
 80072f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fa:	4770      	bx	lr
 80072fc:	20001ae8 	.word	0x20001ae8

08007300 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b082      	sub	sp, #8
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007308:	f000 f852 	bl	80073b0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800730c:	4b06      	ldr	r3, [pc, #24]	@ (8007328 <prvIdleTask+0x28>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	2b01      	cmp	r3, #1
 8007312:	d9f9      	bls.n	8007308 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007314:	4b05      	ldr	r3, [pc, #20]	@ (800732c <prvIdleTask+0x2c>)
 8007316:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800731a:	601a      	str	r2, [r3, #0]
 800731c:	f3bf 8f4f 	dsb	sy
 8007320:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007324:	e7f0      	b.n	8007308 <prvIdleTask+0x8>
 8007326:	bf00      	nop
 8007328:	20001604 	.word	0x20001604
 800732c:	e000ed04 	.word	0xe000ed04

08007330 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b082      	sub	sp, #8
 8007334:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007336:	2300      	movs	r3, #0
 8007338:	607b      	str	r3, [r7, #4]
 800733a:	e00c      	b.n	8007356 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800733c:	687a      	ldr	r2, [r7, #4]
 800733e:	4613      	mov	r3, r2
 8007340:	009b      	lsls	r3, r3, #2
 8007342:	4413      	add	r3, r2
 8007344:	009b      	lsls	r3, r3, #2
 8007346:	4a12      	ldr	r2, [pc, #72]	@ (8007390 <prvInitialiseTaskLists+0x60>)
 8007348:	4413      	add	r3, r2
 800734a:	4618      	mov	r0, r3
 800734c:	f7fe fc70 	bl	8005c30 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	3301      	adds	r3, #1
 8007354:	607b      	str	r3, [r7, #4]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2b37      	cmp	r3, #55	@ 0x37
 800735a:	d9ef      	bls.n	800733c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800735c:	480d      	ldr	r0, [pc, #52]	@ (8007394 <prvInitialiseTaskLists+0x64>)
 800735e:	f7fe fc67 	bl	8005c30 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007362:	480d      	ldr	r0, [pc, #52]	@ (8007398 <prvInitialiseTaskLists+0x68>)
 8007364:	f7fe fc64 	bl	8005c30 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007368:	480c      	ldr	r0, [pc, #48]	@ (800739c <prvInitialiseTaskLists+0x6c>)
 800736a:	f7fe fc61 	bl	8005c30 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800736e:	480c      	ldr	r0, [pc, #48]	@ (80073a0 <prvInitialiseTaskLists+0x70>)
 8007370:	f7fe fc5e 	bl	8005c30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007374:	480b      	ldr	r0, [pc, #44]	@ (80073a4 <prvInitialiseTaskLists+0x74>)
 8007376:	f7fe fc5b 	bl	8005c30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800737a:	4b0b      	ldr	r3, [pc, #44]	@ (80073a8 <prvInitialiseTaskLists+0x78>)
 800737c:	4a05      	ldr	r2, [pc, #20]	@ (8007394 <prvInitialiseTaskLists+0x64>)
 800737e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007380:	4b0a      	ldr	r3, [pc, #40]	@ (80073ac <prvInitialiseTaskLists+0x7c>)
 8007382:	4a05      	ldr	r2, [pc, #20]	@ (8007398 <prvInitialiseTaskLists+0x68>)
 8007384:	601a      	str	r2, [r3, #0]
}
 8007386:	bf00      	nop
 8007388:	3708      	adds	r7, #8
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}
 800738e:	bf00      	nop
 8007390:	20001604 	.word	0x20001604
 8007394:	20001a64 	.word	0x20001a64
 8007398:	20001a78 	.word	0x20001a78
 800739c:	20001a94 	.word	0x20001a94
 80073a0:	20001aa8 	.word	0x20001aa8
 80073a4:	20001ac0 	.word	0x20001ac0
 80073a8:	20001a8c 	.word	0x20001a8c
 80073ac:	20001a90 	.word	0x20001a90

080073b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b082      	sub	sp, #8
 80073b4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80073b6:	e019      	b.n	80073ec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80073b8:	f000 fec8 	bl	800814c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073bc:	4b10      	ldr	r3, [pc, #64]	@ (8007400 <prvCheckTasksWaitingTermination+0x50>)
 80073be:	68db      	ldr	r3, [r3, #12]
 80073c0:	68db      	ldr	r3, [r3, #12]
 80073c2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	3304      	adds	r3, #4
 80073c8:	4618      	mov	r0, r3
 80073ca:	f7fe fcbb 	bl	8005d44 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80073ce:	4b0d      	ldr	r3, [pc, #52]	@ (8007404 <prvCheckTasksWaitingTermination+0x54>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	3b01      	subs	r3, #1
 80073d4:	4a0b      	ldr	r2, [pc, #44]	@ (8007404 <prvCheckTasksWaitingTermination+0x54>)
 80073d6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80073d8:	4b0b      	ldr	r3, [pc, #44]	@ (8007408 <prvCheckTasksWaitingTermination+0x58>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	3b01      	subs	r3, #1
 80073de:	4a0a      	ldr	r2, [pc, #40]	@ (8007408 <prvCheckTasksWaitingTermination+0x58>)
 80073e0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80073e2:	f000 fee9 	bl	80081b8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f000 f810 	bl	800740c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80073ec:	4b06      	ldr	r3, [pc, #24]	@ (8007408 <prvCheckTasksWaitingTermination+0x58>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d1e1      	bne.n	80073b8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80073f4:	bf00      	nop
 80073f6:	bf00      	nop
 80073f8:	3708      	adds	r7, #8
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}
 80073fe:	bf00      	nop
 8007400:	20001aa8 	.word	0x20001aa8
 8007404:	20001ad4 	.word	0x20001ad4
 8007408:	20001abc 	.word	0x20001abc

0800740c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800740c:	b580      	push	{r7, lr}
 800740e:	b084      	sub	sp, #16
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	3354      	adds	r3, #84	@ 0x54
 8007418:	4618      	mov	r0, r3
 800741a:	f001 fadf 	bl	80089dc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007424:	2b00      	cmp	r3, #0
 8007426:	d108      	bne.n	800743a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800742c:	4618      	mov	r0, r3
 800742e:	f001 f889 	bl	8008544 <vPortFree>
				vPortFree( pxTCB );
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f001 f886 	bl	8008544 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007438:	e01b      	b.n	8007472 <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007440:	2b01      	cmp	r3, #1
 8007442:	d103      	bne.n	800744c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f001 f87d 	bl	8008544 <vPortFree>
	}
 800744a:	e012      	b.n	8007472 <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007452:	2b02      	cmp	r3, #2
 8007454:	d00d      	beq.n	8007472 <prvDeleteTCB+0x66>
	__asm volatile
 8007456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800745a:	b672      	cpsid	i
 800745c:	f383 8811 	msr	BASEPRI, r3
 8007460:	f3bf 8f6f 	isb	sy
 8007464:	f3bf 8f4f 	dsb	sy
 8007468:	b662      	cpsie	i
 800746a:	60fb      	str	r3, [r7, #12]
}
 800746c:	bf00      	nop
 800746e:	bf00      	nop
 8007470:	e7fd      	b.n	800746e <prvDeleteTCB+0x62>
	}
 8007472:	bf00      	nop
 8007474:	3710      	adds	r7, #16
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}
	...

0800747c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800747c:	b480      	push	{r7}
 800747e:	b083      	sub	sp, #12
 8007480:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007482:	4b0c      	ldr	r3, [pc, #48]	@ (80074b4 <prvResetNextTaskUnblockTime+0x38>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d104      	bne.n	8007496 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800748c:	4b0a      	ldr	r3, [pc, #40]	@ (80074b8 <prvResetNextTaskUnblockTime+0x3c>)
 800748e:	f04f 32ff 	mov.w	r2, #4294967295
 8007492:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007494:	e008      	b.n	80074a8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007496:	4b07      	ldr	r3, [pc, #28]	@ (80074b4 <prvResetNextTaskUnblockTime+0x38>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	68db      	ldr	r3, [r3, #12]
 800749c:	68db      	ldr	r3, [r3, #12]
 800749e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	4a04      	ldr	r2, [pc, #16]	@ (80074b8 <prvResetNextTaskUnblockTime+0x3c>)
 80074a6:	6013      	str	r3, [r2, #0]
}
 80074a8:	bf00      	nop
 80074aa:	370c      	adds	r7, #12
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr
 80074b4:	20001a8c 	.word	0x20001a8c
 80074b8:	20001af4 	.word	0x20001af4

080074bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80074bc:	b480      	push	{r7}
 80074be:	b083      	sub	sp, #12
 80074c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80074c2:	4b0b      	ldr	r3, [pc, #44]	@ (80074f0 <xTaskGetSchedulerState+0x34>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d102      	bne.n	80074d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80074ca:	2301      	movs	r3, #1
 80074cc:	607b      	str	r3, [r7, #4]
 80074ce:	e008      	b.n	80074e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80074d0:	4b08      	ldr	r3, [pc, #32]	@ (80074f4 <xTaskGetSchedulerState+0x38>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d102      	bne.n	80074de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80074d8:	2302      	movs	r3, #2
 80074da:	607b      	str	r3, [r7, #4]
 80074dc:	e001      	b.n	80074e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80074de:	2300      	movs	r3, #0
 80074e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80074e2:	687b      	ldr	r3, [r7, #4]
	}
 80074e4:	4618      	mov	r0, r3
 80074e6:	370c      	adds	r7, #12
 80074e8:	46bd      	mov	sp, r7
 80074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ee:	4770      	bx	lr
 80074f0:	20001ae0 	.word	0x20001ae0
 80074f4:	20001afc 	.word	0x20001afc

080074f8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b086      	sub	sp, #24
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007504:	2300      	movs	r3, #0
 8007506:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d05c      	beq.n	80075c8 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800750e:	4b31      	ldr	r3, [pc, #196]	@ (80075d4 <xTaskPriorityDisinherit+0xdc>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	693a      	ldr	r2, [r7, #16]
 8007514:	429a      	cmp	r2, r3
 8007516:	d00d      	beq.n	8007534 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8007518:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800751c:	b672      	cpsid	i
 800751e:	f383 8811 	msr	BASEPRI, r3
 8007522:	f3bf 8f6f 	isb	sy
 8007526:	f3bf 8f4f 	dsb	sy
 800752a:	b662      	cpsie	i
 800752c:	60fb      	str	r3, [r7, #12]
}
 800752e:	bf00      	nop
 8007530:	bf00      	nop
 8007532:	e7fd      	b.n	8007530 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007538:	2b00      	cmp	r3, #0
 800753a:	d10d      	bne.n	8007558 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 800753c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007540:	b672      	cpsid	i
 8007542:	f383 8811 	msr	BASEPRI, r3
 8007546:	f3bf 8f6f 	isb	sy
 800754a:	f3bf 8f4f 	dsb	sy
 800754e:	b662      	cpsie	i
 8007550:	60bb      	str	r3, [r7, #8]
}
 8007552:	bf00      	nop
 8007554:	bf00      	nop
 8007556:	e7fd      	b.n	8007554 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800755c:	1e5a      	subs	r2, r3, #1
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800756a:	429a      	cmp	r2, r3
 800756c:	d02c      	beq.n	80075c8 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007572:	2b00      	cmp	r3, #0
 8007574:	d128      	bne.n	80075c8 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	3304      	adds	r3, #4
 800757a:	4618      	mov	r0, r3
 800757c:	f7fe fbe2 	bl	8005d44 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800758c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007598:	4b0f      	ldr	r3, [pc, #60]	@ (80075d8 <xTaskPriorityDisinherit+0xe0>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	429a      	cmp	r2, r3
 800759e:	d903      	bls.n	80075a8 <xTaskPriorityDisinherit+0xb0>
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075a4:	4a0c      	ldr	r2, [pc, #48]	@ (80075d8 <xTaskPriorityDisinherit+0xe0>)
 80075a6:	6013      	str	r3, [r2, #0]
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075ac:	4613      	mov	r3, r2
 80075ae:	009b      	lsls	r3, r3, #2
 80075b0:	4413      	add	r3, r2
 80075b2:	009b      	lsls	r3, r3, #2
 80075b4:	4a09      	ldr	r2, [pc, #36]	@ (80075dc <xTaskPriorityDisinherit+0xe4>)
 80075b6:	441a      	add	r2, r3
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	3304      	adds	r3, #4
 80075bc:	4619      	mov	r1, r3
 80075be:	4610      	mov	r0, r2
 80075c0:	f7fe fb63 	bl	8005c8a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80075c4:	2301      	movs	r3, #1
 80075c6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80075c8:	697b      	ldr	r3, [r7, #20]
	}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3718      	adds	r7, #24
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}
 80075d2:	bf00      	nop
 80075d4:	20001600 	.word	0x20001600
 80075d8:	20001adc 	.word	0x20001adc
 80075dc:	20001604 	.word	0x20001604

080075e0 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b08e      	sub	sp, #56	@ 0x38
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	60f8      	str	r0, [r7, #12]
 80075e8:	60b9      	str	r1, [r7, #8]
 80075ea:	603b      	str	r3, [r7, #0]
 80075ec:	4613      	mov	r3, r2
 80075ee:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80075f0:	2301      	movs	r3, #1
 80075f2:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d10d      	bne.n	8007616 <xTaskGenericNotifyFromISR+0x36>
	__asm volatile
 80075fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075fe:	b672      	cpsid	i
 8007600:	f383 8811 	msr	BASEPRI, r3
 8007604:	f3bf 8f6f 	isb	sy
 8007608:	f3bf 8f4f 	dsb	sy
 800760c:	b662      	cpsie	i
 800760e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007610:	bf00      	nop
 8007612:	bf00      	nop
 8007614:	e7fd      	b.n	8007612 <xTaskGenericNotifyFromISR+0x32>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007616:	f000 fe81 	bl	800831c <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 800761e:	f3ef 8211 	mrs	r2, BASEPRI
 8007622:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007626:	b672      	cpsid	i
 8007628:	f383 8811 	msr	BASEPRI, r3
 800762c:	f3bf 8f6f 	isb	sy
 8007630:	f3bf 8f4f 	dsb	sy
 8007634:	b662      	cpsie	i
 8007636:	623a      	str	r2, [r7, #32]
 8007638:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800763a:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800763c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d004      	beq.n	800764e <xTaskGenericNotifyFromISR+0x6e>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8007644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007646:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800764e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007650:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8007654:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8007658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800765a:	2202      	movs	r2, #2
 800765c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 8007660:	79fb      	ldrb	r3, [r7, #7]
 8007662:	2b04      	cmp	r3, #4
 8007664:	d82e      	bhi.n	80076c4 <xTaskGenericNotifyFromISR+0xe4>
 8007666:	a201      	add	r2, pc, #4	@ (adr r2, 800766c <xTaskGenericNotifyFromISR+0x8c>)
 8007668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800766c:	080076ed 	.word	0x080076ed
 8007670:	08007681 	.word	0x08007681
 8007674:	08007693 	.word	0x08007693
 8007678:	080076a3 	.word	0x080076a3
 800767c:	080076ad 	.word	0x080076ad
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8007680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007682:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	431a      	orrs	r2, r3
 800768a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800768c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8007690:	e02f      	b.n	80076f2 <xTaskGenericNotifyFromISR+0x112>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8007692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007694:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007698:	1c5a      	adds	r2, r3, #1
 800769a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800769c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80076a0:	e027      	b.n	80076f2 <xTaskGenericNotifyFromISR+0x112>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80076a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076a4:	68ba      	ldr	r2, [r7, #8]
 80076a6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80076aa:	e022      	b.n	80076f2 <xTaskGenericNotifyFromISR+0x112>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80076ac:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80076b0:	2b02      	cmp	r3, #2
 80076b2:	d004      	beq.n	80076be <xTaskGenericNotifyFromISR+0xde>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80076b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076b6:	68ba      	ldr	r2, [r7, #8]
 80076b8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80076bc:	e019      	b.n	80076f2 <xTaskGenericNotifyFromISR+0x112>
						xReturn = pdFAIL;
 80076be:	2300      	movs	r3, #0
 80076c0:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 80076c2:	e016      	b.n	80076f2 <xTaskGenericNotifyFromISR+0x112>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80076c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076c6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80076ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076ce:	d00f      	beq.n	80076f0 <xTaskGenericNotifyFromISR+0x110>
	__asm volatile
 80076d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076d4:	b672      	cpsid	i
 80076d6:	f383 8811 	msr	BASEPRI, r3
 80076da:	f3bf 8f6f 	isb	sy
 80076de:	f3bf 8f4f 	dsb	sy
 80076e2:	b662      	cpsie	i
 80076e4:	61bb      	str	r3, [r7, #24]
}
 80076e6:	bf00      	nop
 80076e8:	bf00      	nop
 80076ea:	e7fd      	b.n	80076e8 <xTaskGenericNotifyFromISR+0x108>
					break;
 80076ec:	bf00      	nop
 80076ee:	e000      	b.n	80076f2 <xTaskGenericNotifyFromISR+0x112>
					break;
 80076f0:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80076f2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80076f6:	2b01      	cmp	r3, #1
 80076f8:	d149      	bne.n	800778e <xTaskGenericNotifyFromISR+0x1ae>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80076fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d00d      	beq.n	800771e <xTaskGenericNotifyFromISR+0x13e>
	__asm volatile
 8007702:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007706:	b672      	cpsid	i
 8007708:	f383 8811 	msr	BASEPRI, r3
 800770c:	f3bf 8f6f 	isb	sy
 8007710:	f3bf 8f4f 	dsb	sy
 8007714:	b662      	cpsie	i
 8007716:	617b      	str	r3, [r7, #20]
}
 8007718:	bf00      	nop
 800771a:	bf00      	nop
 800771c:	e7fd      	b.n	800771a <xTaskGenericNotifyFromISR+0x13a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800771e:	4b21      	ldr	r3, [pc, #132]	@ (80077a4 <xTaskGenericNotifyFromISR+0x1c4>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d11d      	bne.n	8007762 <xTaskGenericNotifyFromISR+0x182>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007728:	3304      	adds	r3, #4
 800772a:	4618      	mov	r0, r3
 800772c:	f7fe fb0a 	bl	8005d44 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007732:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007734:	4b1c      	ldr	r3, [pc, #112]	@ (80077a8 <xTaskGenericNotifyFromISR+0x1c8>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	429a      	cmp	r2, r3
 800773a:	d903      	bls.n	8007744 <xTaskGenericNotifyFromISR+0x164>
 800773c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800773e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007740:	4a19      	ldr	r2, [pc, #100]	@ (80077a8 <xTaskGenericNotifyFromISR+0x1c8>)
 8007742:	6013      	str	r3, [r2, #0]
 8007744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007746:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007748:	4613      	mov	r3, r2
 800774a:	009b      	lsls	r3, r3, #2
 800774c:	4413      	add	r3, r2
 800774e:	009b      	lsls	r3, r3, #2
 8007750:	4a16      	ldr	r2, [pc, #88]	@ (80077ac <xTaskGenericNotifyFromISR+0x1cc>)
 8007752:	441a      	add	r2, r3
 8007754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007756:	3304      	adds	r3, #4
 8007758:	4619      	mov	r1, r3
 800775a:	4610      	mov	r0, r2
 800775c:	f7fe fa95 	bl	8005c8a <vListInsertEnd>
 8007760:	e005      	b.n	800776e <xTaskGenericNotifyFromISR+0x18e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8007762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007764:	3318      	adds	r3, #24
 8007766:	4619      	mov	r1, r3
 8007768:	4811      	ldr	r0, [pc, #68]	@ (80077b0 <xTaskGenericNotifyFromISR+0x1d0>)
 800776a:	f7fe fa8e 	bl	8005c8a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800776e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007770:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007772:	4b10      	ldr	r3, [pc, #64]	@ (80077b4 <xTaskGenericNotifyFromISR+0x1d4>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007778:	429a      	cmp	r2, r3
 800777a:	d908      	bls.n	800778e <xTaskGenericNotifyFromISR+0x1ae>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800777c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800777e:	2b00      	cmp	r3, #0
 8007780:	d002      	beq.n	8007788 <xTaskGenericNotifyFromISR+0x1a8>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8007782:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007784:	2201      	movs	r2, #1
 8007786:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8007788:	4b0b      	ldr	r3, [pc, #44]	@ (80077b8 <xTaskGenericNotifyFromISR+0x1d8>)
 800778a:	2201      	movs	r2, #1
 800778c:	601a      	str	r2, [r3, #0]
 800778e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007790:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	f383 8811 	msr	BASEPRI, r3
}
 8007798:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800779a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 800779c:	4618      	mov	r0, r3
 800779e:	3738      	adds	r7, #56	@ 0x38
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}
 80077a4:	20001afc 	.word	0x20001afc
 80077a8:	20001adc 	.word	0x20001adc
 80077ac:	20001604 	.word	0x20001604
 80077b0:	20001a94 	.word	0x20001a94
 80077b4:	20001600 	.word	0x20001600
 80077b8:	20001ae8 	.word	0x20001ae8

080077bc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b084      	sub	sp, #16
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
 80077c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80077c6:	4b21      	ldr	r3, [pc, #132]	@ (800784c <prvAddCurrentTaskToDelayedList+0x90>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80077cc:	4b20      	ldr	r3, [pc, #128]	@ (8007850 <prvAddCurrentTaskToDelayedList+0x94>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	3304      	adds	r3, #4
 80077d2:	4618      	mov	r0, r3
 80077d4:	f7fe fab6 	bl	8005d44 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077de:	d10a      	bne.n	80077f6 <prvAddCurrentTaskToDelayedList+0x3a>
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d007      	beq.n	80077f6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077e6:	4b1a      	ldr	r3, [pc, #104]	@ (8007850 <prvAddCurrentTaskToDelayedList+0x94>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	3304      	adds	r3, #4
 80077ec:	4619      	mov	r1, r3
 80077ee:	4819      	ldr	r0, [pc, #100]	@ (8007854 <prvAddCurrentTaskToDelayedList+0x98>)
 80077f0:	f7fe fa4b 	bl	8005c8a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80077f4:	e026      	b.n	8007844 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80077f6:	68fa      	ldr	r2, [r7, #12]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	4413      	add	r3, r2
 80077fc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80077fe:	4b14      	ldr	r3, [pc, #80]	@ (8007850 <prvAddCurrentTaskToDelayedList+0x94>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	68ba      	ldr	r2, [r7, #8]
 8007804:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007806:	68ba      	ldr	r2, [r7, #8]
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	429a      	cmp	r2, r3
 800780c:	d209      	bcs.n	8007822 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800780e:	4b12      	ldr	r3, [pc, #72]	@ (8007858 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007810:	681a      	ldr	r2, [r3, #0]
 8007812:	4b0f      	ldr	r3, [pc, #60]	@ (8007850 <prvAddCurrentTaskToDelayedList+0x94>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	3304      	adds	r3, #4
 8007818:	4619      	mov	r1, r3
 800781a:	4610      	mov	r0, r2
 800781c:	f7fe fa59 	bl	8005cd2 <vListInsert>
}
 8007820:	e010      	b.n	8007844 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007822:	4b0e      	ldr	r3, [pc, #56]	@ (800785c <prvAddCurrentTaskToDelayedList+0xa0>)
 8007824:	681a      	ldr	r2, [r3, #0]
 8007826:	4b0a      	ldr	r3, [pc, #40]	@ (8007850 <prvAddCurrentTaskToDelayedList+0x94>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	3304      	adds	r3, #4
 800782c:	4619      	mov	r1, r3
 800782e:	4610      	mov	r0, r2
 8007830:	f7fe fa4f 	bl	8005cd2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007834:	4b0a      	ldr	r3, [pc, #40]	@ (8007860 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	68ba      	ldr	r2, [r7, #8]
 800783a:	429a      	cmp	r2, r3
 800783c:	d202      	bcs.n	8007844 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800783e:	4a08      	ldr	r2, [pc, #32]	@ (8007860 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	6013      	str	r3, [r2, #0]
}
 8007844:	bf00      	nop
 8007846:	3710      	adds	r7, #16
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}
 800784c:	20001ad8 	.word	0x20001ad8
 8007850:	20001600 	.word	0x20001600
 8007854:	20001ac0 	.word	0x20001ac0
 8007858:	20001a90 	.word	0x20001a90
 800785c:	20001a8c 	.word	0x20001a8c
 8007860:	20001af4 	.word	0x20001af4

08007864 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b08a      	sub	sp, #40	@ 0x28
 8007868:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800786a:	2300      	movs	r3, #0
 800786c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800786e:	f000 fb21 	bl	8007eb4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007872:	4b1e      	ldr	r3, [pc, #120]	@ (80078ec <xTimerCreateTimerTask+0x88>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d021      	beq.n	80078be <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800787a:	2300      	movs	r3, #0
 800787c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800787e:	2300      	movs	r3, #0
 8007880:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007882:	1d3a      	adds	r2, r7, #4
 8007884:	f107 0108 	add.w	r1, r7, #8
 8007888:	f107 030c 	add.w	r3, r7, #12
 800788c:	4618      	mov	r0, r3
 800788e:	f7fe f9b5 	bl	8005bfc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007892:	6879      	ldr	r1, [r7, #4]
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	68fa      	ldr	r2, [r7, #12]
 8007898:	9202      	str	r2, [sp, #8]
 800789a:	9301      	str	r3, [sp, #4]
 800789c:	2302      	movs	r3, #2
 800789e:	9300      	str	r3, [sp, #0]
 80078a0:	2300      	movs	r3, #0
 80078a2:	460a      	mov	r2, r1
 80078a4:	4912      	ldr	r1, [pc, #72]	@ (80078f0 <xTimerCreateTimerTask+0x8c>)
 80078a6:	4813      	ldr	r0, [pc, #76]	@ (80078f4 <xTimerCreateTimerTask+0x90>)
 80078a8:	f7fe ff90 	bl	80067cc <xTaskCreateStatic>
 80078ac:	4603      	mov	r3, r0
 80078ae:	4a12      	ldr	r2, [pc, #72]	@ (80078f8 <xTimerCreateTimerTask+0x94>)
 80078b0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80078b2:	4b11      	ldr	r3, [pc, #68]	@ (80078f8 <xTimerCreateTimerTask+0x94>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d001      	beq.n	80078be <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80078ba:	2301      	movs	r3, #1
 80078bc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d10d      	bne.n	80078e0 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 80078c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078c8:	b672      	cpsid	i
 80078ca:	f383 8811 	msr	BASEPRI, r3
 80078ce:	f3bf 8f6f 	isb	sy
 80078d2:	f3bf 8f4f 	dsb	sy
 80078d6:	b662      	cpsie	i
 80078d8:	613b      	str	r3, [r7, #16]
}
 80078da:	bf00      	nop
 80078dc:	bf00      	nop
 80078de:	e7fd      	b.n	80078dc <xTimerCreateTimerTask+0x78>
	return xReturn;
 80078e0:	697b      	ldr	r3, [r7, #20]
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3718      	adds	r7, #24
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}
 80078ea:	bf00      	nop
 80078ec:	20001b30 	.word	0x20001b30
 80078f0:	080096ec 	.word	0x080096ec
 80078f4:	08007a3d 	.word	0x08007a3d
 80078f8:	20001b34 	.word	0x20001b34

080078fc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b08a      	sub	sp, #40	@ 0x28
 8007900:	af00      	add	r7, sp, #0
 8007902:	60f8      	str	r0, [r7, #12]
 8007904:	60b9      	str	r1, [r7, #8]
 8007906:	607a      	str	r2, [r7, #4]
 8007908:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800790a:	2300      	movs	r3, #0
 800790c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d10d      	bne.n	8007930 <xTimerGenericCommand+0x34>
	__asm volatile
 8007914:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007918:	b672      	cpsid	i
 800791a:	f383 8811 	msr	BASEPRI, r3
 800791e:	f3bf 8f6f 	isb	sy
 8007922:	f3bf 8f4f 	dsb	sy
 8007926:	b662      	cpsie	i
 8007928:	623b      	str	r3, [r7, #32]
}
 800792a:	bf00      	nop
 800792c:	bf00      	nop
 800792e:	e7fd      	b.n	800792c <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007930:	4b19      	ldr	r3, [pc, #100]	@ (8007998 <xTimerGenericCommand+0x9c>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d02a      	beq.n	800798e <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	2b05      	cmp	r3, #5
 8007948:	dc18      	bgt.n	800797c <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800794a:	f7ff fdb7 	bl	80074bc <xTaskGetSchedulerState>
 800794e:	4603      	mov	r3, r0
 8007950:	2b02      	cmp	r3, #2
 8007952:	d109      	bne.n	8007968 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007954:	4b10      	ldr	r3, [pc, #64]	@ (8007998 <xTimerGenericCommand+0x9c>)
 8007956:	6818      	ldr	r0, [r3, #0]
 8007958:	f107 0110 	add.w	r1, r7, #16
 800795c:	2300      	movs	r3, #0
 800795e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007960:	f7fe fb30 	bl	8005fc4 <xQueueGenericSend>
 8007964:	6278      	str	r0, [r7, #36]	@ 0x24
 8007966:	e012      	b.n	800798e <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007968:	4b0b      	ldr	r3, [pc, #44]	@ (8007998 <xTimerGenericCommand+0x9c>)
 800796a:	6818      	ldr	r0, [r3, #0]
 800796c:	f107 0110 	add.w	r1, r7, #16
 8007970:	2300      	movs	r3, #0
 8007972:	2200      	movs	r2, #0
 8007974:	f7fe fb26 	bl	8005fc4 <xQueueGenericSend>
 8007978:	6278      	str	r0, [r7, #36]	@ 0x24
 800797a:	e008      	b.n	800798e <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800797c:	4b06      	ldr	r3, [pc, #24]	@ (8007998 <xTimerGenericCommand+0x9c>)
 800797e:	6818      	ldr	r0, [r3, #0]
 8007980:	f107 0110 	add.w	r1, r7, #16
 8007984:	2300      	movs	r3, #0
 8007986:	683a      	ldr	r2, [r7, #0]
 8007988:	f7fe fc26 	bl	80061d8 <xQueueGenericSendFromISR>
 800798c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800798e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007990:	4618      	mov	r0, r3
 8007992:	3728      	adds	r7, #40	@ 0x28
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}
 8007998:	20001b30 	.word	0x20001b30

0800799c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b088      	sub	sp, #32
 80079a0:	af02      	add	r7, sp, #8
 80079a2:	6078      	str	r0, [r7, #4]
 80079a4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079a6:	4b24      	ldr	r3, [pc, #144]	@ (8007a38 <prvProcessExpiredTimer+0x9c>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	68db      	ldr	r3, [r3, #12]
 80079ac:	68db      	ldr	r3, [r3, #12]
 80079ae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	3304      	adds	r3, #4
 80079b4:	4618      	mov	r0, r3
 80079b6:	f7fe f9c5 	bl	8005d44 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80079c0:	f003 0304 	and.w	r3, r3, #4
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d025      	beq.n	8007a14 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	699a      	ldr	r2, [r3, #24]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	18d1      	adds	r1, r2, r3
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	683a      	ldr	r2, [r7, #0]
 80079d4:	6978      	ldr	r0, [r7, #20]
 80079d6:	f000 f8d7 	bl	8007b88 <prvInsertTimerInActiveList>
 80079da:	4603      	mov	r3, r0
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d022      	beq.n	8007a26 <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80079e0:	2300      	movs	r3, #0
 80079e2:	9300      	str	r3, [sp, #0]
 80079e4:	2300      	movs	r3, #0
 80079e6:	687a      	ldr	r2, [r7, #4]
 80079e8:	2100      	movs	r1, #0
 80079ea:	6978      	ldr	r0, [r7, #20]
 80079ec:	f7ff ff86 	bl	80078fc <xTimerGenericCommand>
 80079f0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80079f2:	693b      	ldr	r3, [r7, #16]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d116      	bne.n	8007a26 <prvProcessExpiredTimer+0x8a>
	__asm volatile
 80079f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079fc:	b672      	cpsid	i
 80079fe:	f383 8811 	msr	BASEPRI, r3
 8007a02:	f3bf 8f6f 	isb	sy
 8007a06:	f3bf 8f4f 	dsb	sy
 8007a0a:	b662      	cpsie	i
 8007a0c:	60fb      	str	r3, [r7, #12]
}
 8007a0e:	bf00      	nop
 8007a10:	bf00      	nop
 8007a12:	e7fd      	b.n	8007a10 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007a1a:	f023 0301 	bic.w	r3, r3, #1
 8007a1e:	b2da      	uxtb	r2, r3
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	6a1b      	ldr	r3, [r3, #32]
 8007a2a:	6978      	ldr	r0, [r7, #20]
 8007a2c:	4798      	blx	r3
}
 8007a2e:	bf00      	nop
 8007a30:	3718      	adds	r7, #24
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}
 8007a36:	bf00      	nop
 8007a38:	20001b28 	.word	0x20001b28

08007a3c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b084      	sub	sp, #16
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007a44:	f107 0308 	add.w	r3, r7, #8
 8007a48:	4618      	mov	r0, r3
 8007a4a:	f000 f859 	bl	8007b00 <prvGetNextExpireTime>
 8007a4e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	4619      	mov	r1, r3
 8007a54:	68f8      	ldr	r0, [r7, #12]
 8007a56:	f000 f805 	bl	8007a64 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007a5a:	f000 f8d7 	bl	8007c0c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007a5e:	bf00      	nop
 8007a60:	e7f0      	b.n	8007a44 <prvTimerTask+0x8>
	...

08007a64 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b084      	sub	sp, #16
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
 8007a6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007a6e:	f7ff f91f 	bl	8006cb0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007a72:	f107 0308 	add.w	r3, r7, #8
 8007a76:	4618      	mov	r0, r3
 8007a78:	f000 f866 	bl	8007b48 <prvSampleTimeNow>
 8007a7c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d130      	bne.n	8007ae6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d10a      	bne.n	8007aa0 <prvProcessTimerOrBlockTask+0x3c>
 8007a8a:	687a      	ldr	r2, [r7, #4]
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	429a      	cmp	r2, r3
 8007a90:	d806      	bhi.n	8007aa0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007a92:	f7ff f91b 	bl	8006ccc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007a96:	68f9      	ldr	r1, [r7, #12]
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f7ff ff7f 	bl	800799c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007a9e:	e024      	b.n	8007aea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d008      	beq.n	8007ab8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007aa6:	4b13      	ldr	r3, [pc, #76]	@ (8007af4 <prvProcessTimerOrBlockTask+0x90>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d101      	bne.n	8007ab4 <prvProcessTimerOrBlockTask+0x50>
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	e000      	b.n	8007ab6 <prvProcessTimerOrBlockTask+0x52>
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007ab8:	4b0f      	ldr	r3, [pc, #60]	@ (8007af8 <prvProcessTimerOrBlockTask+0x94>)
 8007aba:	6818      	ldr	r0, [r3, #0]
 8007abc:	687a      	ldr	r2, [r7, #4]
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	1ad3      	subs	r3, r2, r3
 8007ac2:	683a      	ldr	r2, [r7, #0]
 8007ac4:	4619      	mov	r1, r3
 8007ac6:	f7fe fe4d 	bl	8006764 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007aca:	f7ff f8ff 	bl	8006ccc <xTaskResumeAll>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d10a      	bne.n	8007aea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007ad4:	4b09      	ldr	r3, [pc, #36]	@ (8007afc <prvProcessTimerOrBlockTask+0x98>)
 8007ad6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ada:	601a      	str	r2, [r3, #0]
 8007adc:	f3bf 8f4f 	dsb	sy
 8007ae0:	f3bf 8f6f 	isb	sy
}
 8007ae4:	e001      	b.n	8007aea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007ae6:	f7ff f8f1 	bl	8006ccc <xTaskResumeAll>
}
 8007aea:	bf00      	nop
 8007aec:	3710      	adds	r7, #16
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}
 8007af2:	bf00      	nop
 8007af4:	20001b2c 	.word	0x20001b2c
 8007af8:	20001b30 	.word	0x20001b30
 8007afc:	e000ed04 	.word	0xe000ed04

08007b00 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007b00:	b480      	push	{r7}
 8007b02:	b085      	sub	sp, #20
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007b08:	4b0e      	ldr	r3, [pc, #56]	@ (8007b44 <prvGetNextExpireTime+0x44>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d101      	bne.n	8007b16 <prvGetNextExpireTime+0x16>
 8007b12:	2201      	movs	r2, #1
 8007b14:	e000      	b.n	8007b18 <prvGetNextExpireTime+0x18>
 8007b16:	2200      	movs	r2, #0
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d105      	bne.n	8007b30 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007b24:	4b07      	ldr	r3, [pc, #28]	@ (8007b44 <prvGetNextExpireTime+0x44>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	68db      	ldr	r3, [r3, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	60fb      	str	r3, [r7, #12]
 8007b2e:	e001      	b.n	8007b34 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007b30:	2300      	movs	r3, #0
 8007b32:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007b34:	68fb      	ldr	r3, [r7, #12]
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3714      	adds	r7, #20
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b40:	4770      	bx	lr
 8007b42:	bf00      	nop
 8007b44:	20001b28 	.word	0x20001b28

08007b48 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b084      	sub	sp, #16
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007b50:	f7ff f95c 	bl	8006e0c <xTaskGetTickCount>
 8007b54:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007b56:	4b0b      	ldr	r3, [pc, #44]	@ (8007b84 <prvSampleTimeNow+0x3c>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	68fa      	ldr	r2, [r7, #12]
 8007b5c:	429a      	cmp	r2, r3
 8007b5e:	d205      	bcs.n	8007b6c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007b60:	f000 f940 	bl	8007de4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2201      	movs	r2, #1
 8007b68:	601a      	str	r2, [r3, #0]
 8007b6a:	e002      	b.n	8007b72 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007b72:	4a04      	ldr	r2, [pc, #16]	@ (8007b84 <prvSampleTimeNow+0x3c>)
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007b78:	68fb      	ldr	r3, [r7, #12]
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3710      	adds	r7, #16
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}
 8007b82:	bf00      	nop
 8007b84:	20001b38 	.word	0x20001b38

08007b88 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b086      	sub	sp, #24
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	60f8      	str	r0, [r7, #12]
 8007b90:	60b9      	str	r1, [r7, #8]
 8007b92:	607a      	str	r2, [r7, #4]
 8007b94:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007b96:	2300      	movs	r3, #0
 8007b98:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	68ba      	ldr	r2, [r7, #8]
 8007b9e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	68fa      	ldr	r2, [r7, #12]
 8007ba4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007ba6:	68ba      	ldr	r2, [r7, #8]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	429a      	cmp	r2, r3
 8007bac:	d812      	bhi.n	8007bd4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007bae:	687a      	ldr	r2, [r7, #4]
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	1ad2      	subs	r2, r2, r3
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	699b      	ldr	r3, [r3, #24]
 8007bb8:	429a      	cmp	r2, r3
 8007bba:	d302      	bcc.n	8007bc2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	617b      	str	r3, [r7, #20]
 8007bc0:	e01b      	b.n	8007bfa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007bc2:	4b10      	ldr	r3, [pc, #64]	@ (8007c04 <prvInsertTimerInActiveList+0x7c>)
 8007bc4:	681a      	ldr	r2, [r3, #0]
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	3304      	adds	r3, #4
 8007bca:	4619      	mov	r1, r3
 8007bcc:	4610      	mov	r0, r2
 8007bce:	f7fe f880 	bl	8005cd2 <vListInsert>
 8007bd2:	e012      	b.n	8007bfa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007bd4:	687a      	ldr	r2, [r7, #4]
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	429a      	cmp	r2, r3
 8007bda:	d206      	bcs.n	8007bea <prvInsertTimerInActiveList+0x62>
 8007bdc:	68ba      	ldr	r2, [r7, #8]
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	429a      	cmp	r2, r3
 8007be2:	d302      	bcc.n	8007bea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007be4:	2301      	movs	r3, #1
 8007be6:	617b      	str	r3, [r7, #20]
 8007be8:	e007      	b.n	8007bfa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007bea:	4b07      	ldr	r3, [pc, #28]	@ (8007c08 <prvInsertTimerInActiveList+0x80>)
 8007bec:	681a      	ldr	r2, [r3, #0]
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	3304      	adds	r3, #4
 8007bf2:	4619      	mov	r1, r3
 8007bf4:	4610      	mov	r0, r2
 8007bf6:	f7fe f86c 	bl	8005cd2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007bfa:	697b      	ldr	r3, [r7, #20]
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3718      	adds	r7, #24
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}
 8007c04:	20001b2c 	.word	0x20001b2c
 8007c08:	20001b28 	.word	0x20001b28

08007c0c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b08e      	sub	sp, #56	@ 0x38
 8007c10:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007c12:	e0d4      	b.n	8007dbe <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	da1b      	bge.n	8007c52 <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007c1a:	1d3b      	adds	r3, r7, #4
 8007c1c:	3304      	adds	r3, #4
 8007c1e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007c20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d10d      	bne.n	8007c42 <prvProcessReceivedCommands+0x36>
	__asm volatile
 8007c26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c2a:	b672      	cpsid	i
 8007c2c:	f383 8811 	msr	BASEPRI, r3
 8007c30:	f3bf 8f6f 	isb	sy
 8007c34:	f3bf 8f4f 	dsb	sy
 8007c38:	b662      	cpsie	i
 8007c3a:	61fb      	str	r3, [r7, #28]
}
 8007c3c:	bf00      	nop
 8007c3e:	bf00      	nop
 8007c40:	e7fd      	b.n	8007c3e <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007c42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c48:	6850      	ldr	r0, [r2, #4]
 8007c4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c4c:	6892      	ldr	r2, [r2, #8]
 8007c4e:	4611      	mov	r1, r2
 8007c50:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	f2c0 80b2 	blt.w	8007dbe <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007c5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c60:	695b      	ldr	r3, [r3, #20]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d004      	beq.n	8007c70 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c68:	3304      	adds	r3, #4
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f7fe f86a 	bl	8005d44 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007c70:	463b      	mov	r3, r7
 8007c72:	4618      	mov	r0, r3
 8007c74:	f7ff ff68 	bl	8007b48 <prvSampleTimeNow>
 8007c78:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2b09      	cmp	r3, #9
 8007c7e:	f200 809b 	bhi.w	8007db8 <prvProcessReceivedCommands+0x1ac>
 8007c82:	a201      	add	r2, pc, #4	@ (adr r2, 8007c88 <prvProcessReceivedCommands+0x7c>)
 8007c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c88:	08007cb1 	.word	0x08007cb1
 8007c8c:	08007cb1 	.word	0x08007cb1
 8007c90:	08007cb1 	.word	0x08007cb1
 8007c94:	08007d2b 	.word	0x08007d2b
 8007c98:	08007d3f 	.word	0x08007d3f
 8007c9c:	08007d8f 	.word	0x08007d8f
 8007ca0:	08007cb1 	.word	0x08007cb1
 8007ca4:	08007cb1 	.word	0x08007cb1
 8007ca8:	08007d2b 	.word	0x08007d2b
 8007cac:	08007d3f 	.word	0x08007d3f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007cb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cb2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007cb6:	f043 0301 	orr.w	r3, r3, #1
 8007cba:	b2da      	uxtb	r2, r3
 8007cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cbe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007cc2:	68ba      	ldr	r2, [r7, #8]
 8007cc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cc6:	699b      	ldr	r3, [r3, #24]
 8007cc8:	18d1      	adds	r1, r2, r3
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007cce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007cd0:	f7ff ff5a 	bl	8007b88 <prvInsertTimerInActiveList>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d070      	beq.n	8007dbc <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cdc:	6a1b      	ldr	r3, [r3, #32]
 8007cde:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007ce0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007ce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ce4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007ce8:	f003 0304 	and.w	r3, r3, #4
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d065      	beq.n	8007dbc <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007cf0:	68ba      	ldr	r2, [r7, #8]
 8007cf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cf4:	699b      	ldr	r3, [r3, #24]
 8007cf6:	441a      	add	r2, r3
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	9300      	str	r3, [sp, #0]
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	2100      	movs	r1, #0
 8007d00:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d02:	f7ff fdfb 	bl	80078fc <xTimerGenericCommand>
 8007d06:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007d08:	6a3b      	ldr	r3, [r7, #32]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d156      	bne.n	8007dbc <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 8007d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d12:	b672      	cpsid	i
 8007d14:	f383 8811 	msr	BASEPRI, r3
 8007d18:	f3bf 8f6f 	isb	sy
 8007d1c:	f3bf 8f4f 	dsb	sy
 8007d20:	b662      	cpsie	i
 8007d22:	61bb      	str	r3, [r7, #24]
}
 8007d24:	bf00      	nop
 8007d26:	bf00      	nop
 8007d28:	e7fd      	b.n	8007d26 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007d2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d2c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007d30:	f023 0301 	bic.w	r3, r3, #1
 8007d34:	b2da      	uxtb	r2, r3
 8007d36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d38:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007d3c:	e03f      	b.n	8007dbe <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007d3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d40:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007d44:	f043 0301 	orr.w	r3, r3, #1
 8007d48:	b2da      	uxtb	r2, r3
 8007d4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d4c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007d50:	68ba      	ldr	r2, [r7, #8]
 8007d52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d54:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007d56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d58:	699b      	ldr	r3, [r3, #24]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d10d      	bne.n	8007d7a <prvProcessReceivedCommands+0x16e>
	__asm volatile
 8007d5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d62:	b672      	cpsid	i
 8007d64:	f383 8811 	msr	BASEPRI, r3
 8007d68:	f3bf 8f6f 	isb	sy
 8007d6c:	f3bf 8f4f 	dsb	sy
 8007d70:	b662      	cpsie	i
 8007d72:	617b      	str	r3, [r7, #20]
}
 8007d74:	bf00      	nop
 8007d76:	bf00      	nop
 8007d78:	e7fd      	b.n	8007d76 <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007d7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d7c:	699a      	ldr	r2, [r3, #24]
 8007d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d80:	18d1      	adds	r1, r2, r3
 8007d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d88:	f7ff fefe 	bl	8007b88 <prvInsertTimerInActiveList>
					break;
 8007d8c:	e017      	b.n	8007dbe <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007d8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d90:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007d94:	f003 0302 	and.w	r3, r3, #2
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d103      	bne.n	8007da4 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 8007d9c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d9e:	f000 fbd1 	bl	8008544 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007da2:	e00c      	b.n	8007dbe <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007da6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007daa:	f023 0301 	bic.w	r3, r3, #1
 8007dae:	b2da      	uxtb	r2, r3
 8007db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007db2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007db6:	e002      	b.n	8007dbe <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 8007db8:	bf00      	nop
 8007dba:	e000      	b.n	8007dbe <prvProcessReceivedCommands+0x1b2>
					break;
 8007dbc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007dbe:	4b08      	ldr	r3, [pc, #32]	@ (8007de0 <prvProcessReceivedCommands+0x1d4>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	1d39      	adds	r1, r7, #4
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f7fe faaa 	bl	8006320 <xQueueReceive>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	f47f af20 	bne.w	8007c14 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007dd4:	bf00      	nop
 8007dd6:	bf00      	nop
 8007dd8:	3730      	adds	r7, #48	@ 0x30
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}
 8007dde:	bf00      	nop
 8007de0:	20001b30 	.word	0x20001b30

08007de4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b088      	sub	sp, #32
 8007de8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007dea:	e04b      	b.n	8007e84 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007dec:	4b2f      	ldr	r3, [pc, #188]	@ (8007eac <prvSwitchTimerLists+0xc8>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	68db      	ldr	r3, [r3, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007df6:	4b2d      	ldr	r3, [pc, #180]	@ (8007eac <prvSwitchTimerLists+0xc8>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	68db      	ldr	r3, [r3, #12]
 8007dfc:	68db      	ldr	r3, [r3, #12]
 8007dfe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	3304      	adds	r3, #4
 8007e04:	4618      	mov	r0, r3
 8007e06:	f7fd ff9d 	bl	8005d44 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	6a1b      	ldr	r3, [r3, #32]
 8007e0e:	68f8      	ldr	r0, [r7, #12]
 8007e10:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007e18:	f003 0304 	and.w	r3, r3, #4
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d031      	beq.n	8007e84 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	699b      	ldr	r3, [r3, #24]
 8007e24:	693a      	ldr	r2, [r7, #16]
 8007e26:	4413      	add	r3, r2
 8007e28:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007e2a:	68ba      	ldr	r2, [r7, #8]
 8007e2c:	693b      	ldr	r3, [r7, #16]
 8007e2e:	429a      	cmp	r2, r3
 8007e30:	d90e      	bls.n	8007e50 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	68ba      	ldr	r2, [r7, #8]
 8007e36:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	68fa      	ldr	r2, [r7, #12]
 8007e3c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007e3e:	4b1b      	ldr	r3, [pc, #108]	@ (8007eac <prvSwitchTimerLists+0xc8>)
 8007e40:	681a      	ldr	r2, [r3, #0]
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	3304      	adds	r3, #4
 8007e46:	4619      	mov	r1, r3
 8007e48:	4610      	mov	r0, r2
 8007e4a:	f7fd ff42 	bl	8005cd2 <vListInsert>
 8007e4e:	e019      	b.n	8007e84 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007e50:	2300      	movs	r3, #0
 8007e52:	9300      	str	r3, [sp, #0]
 8007e54:	2300      	movs	r3, #0
 8007e56:	693a      	ldr	r2, [r7, #16]
 8007e58:	2100      	movs	r1, #0
 8007e5a:	68f8      	ldr	r0, [r7, #12]
 8007e5c:	f7ff fd4e 	bl	80078fc <xTimerGenericCommand>
 8007e60:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d10d      	bne.n	8007e84 <prvSwitchTimerLists+0xa0>
	__asm volatile
 8007e68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e6c:	b672      	cpsid	i
 8007e6e:	f383 8811 	msr	BASEPRI, r3
 8007e72:	f3bf 8f6f 	isb	sy
 8007e76:	f3bf 8f4f 	dsb	sy
 8007e7a:	b662      	cpsie	i
 8007e7c:	603b      	str	r3, [r7, #0]
}
 8007e7e:	bf00      	nop
 8007e80:	bf00      	nop
 8007e82:	e7fd      	b.n	8007e80 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007e84:	4b09      	ldr	r3, [pc, #36]	@ (8007eac <prvSwitchTimerLists+0xc8>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d1ae      	bne.n	8007dec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007e8e:	4b07      	ldr	r3, [pc, #28]	@ (8007eac <prvSwitchTimerLists+0xc8>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007e94:	4b06      	ldr	r3, [pc, #24]	@ (8007eb0 <prvSwitchTimerLists+0xcc>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4a04      	ldr	r2, [pc, #16]	@ (8007eac <prvSwitchTimerLists+0xc8>)
 8007e9a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007e9c:	4a04      	ldr	r2, [pc, #16]	@ (8007eb0 <prvSwitchTimerLists+0xcc>)
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	6013      	str	r3, [r2, #0]
}
 8007ea2:	bf00      	nop
 8007ea4:	3718      	adds	r7, #24
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}
 8007eaa:	bf00      	nop
 8007eac:	20001b28 	.word	0x20001b28
 8007eb0:	20001b2c 	.word	0x20001b2c

08007eb4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b082      	sub	sp, #8
 8007eb8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007eba:	f000 f947 	bl	800814c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007ebe:	4b15      	ldr	r3, [pc, #84]	@ (8007f14 <prvCheckForValidListAndQueue+0x60>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d120      	bne.n	8007f08 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007ec6:	4814      	ldr	r0, [pc, #80]	@ (8007f18 <prvCheckForValidListAndQueue+0x64>)
 8007ec8:	f7fd feb2 	bl	8005c30 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007ecc:	4813      	ldr	r0, [pc, #76]	@ (8007f1c <prvCheckForValidListAndQueue+0x68>)
 8007ece:	f7fd feaf 	bl	8005c30 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007ed2:	4b13      	ldr	r3, [pc, #76]	@ (8007f20 <prvCheckForValidListAndQueue+0x6c>)
 8007ed4:	4a10      	ldr	r2, [pc, #64]	@ (8007f18 <prvCheckForValidListAndQueue+0x64>)
 8007ed6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007ed8:	4b12      	ldr	r3, [pc, #72]	@ (8007f24 <prvCheckForValidListAndQueue+0x70>)
 8007eda:	4a10      	ldr	r2, [pc, #64]	@ (8007f1c <prvCheckForValidListAndQueue+0x68>)
 8007edc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007ede:	2300      	movs	r3, #0
 8007ee0:	9300      	str	r3, [sp, #0]
 8007ee2:	4b11      	ldr	r3, [pc, #68]	@ (8007f28 <prvCheckForValidListAndQueue+0x74>)
 8007ee4:	4a11      	ldr	r2, [pc, #68]	@ (8007f2c <prvCheckForValidListAndQueue+0x78>)
 8007ee6:	2110      	movs	r1, #16
 8007ee8:	200a      	movs	r0, #10
 8007eea:	f7fd ffc1 	bl	8005e70 <xQueueGenericCreateStatic>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	4a08      	ldr	r2, [pc, #32]	@ (8007f14 <prvCheckForValidListAndQueue+0x60>)
 8007ef2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007ef4:	4b07      	ldr	r3, [pc, #28]	@ (8007f14 <prvCheckForValidListAndQueue+0x60>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d005      	beq.n	8007f08 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007efc:	4b05      	ldr	r3, [pc, #20]	@ (8007f14 <prvCheckForValidListAndQueue+0x60>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	490b      	ldr	r1, [pc, #44]	@ (8007f30 <prvCheckForValidListAndQueue+0x7c>)
 8007f02:	4618      	mov	r0, r3
 8007f04:	f7fe fc04 	bl	8006710 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007f08:	f000 f956 	bl	80081b8 <vPortExitCritical>
}
 8007f0c:	bf00      	nop
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}
 8007f12:	bf00      	nop
 8007f14:	20001b30 	.word	0x20001b30
 8007f18:	20001b00 	.word	0x20001b00
 8007f1c:	20001b14 	.word	0x20001b14
 8007f20:	20001b28 	.word	0x20001b28
 8007f24:	20001b2c 	.word	0x20001b2c
 8007f28:	20001bdc 	.word	0x20001bdc
 8007f2c:	20001b3c 	.word	0x20001b3c
 8007f30:	080096f4 	.word	0x080096f4

08007f34 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007f34:	b480      	push	{r7}
 8007f36:	b085      	sub	sp, #20
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	60f8      	str	r0, [r7, #12]
 8007f3c:	60b9      	str	r1, [r7, #8]
 8007f3e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	3b04      	subs	r3, #4
 8007f44:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007f4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	3b04      	subs	r3, #4
 8007f52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	f023 0201 	bic.w	r2, r3, #1
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	3b04      	subs	r3, #4
 8007f62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007f64:	4a0c      	ldr	r2, [pc, #48]	@ (8007f98 <pxPortInitialiseStack+0x64>)
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	3b14      	subs	r3, #20
 8007f6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007f70:	687a      	ldr	r2, [r7, #4]
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	3b04      	subs	r3, #4
 8007f7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	f06f 0202 	mvn.w	r2, #2
 8007f82:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	3b20      	subs	r3, #32
 8007f88:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3714      	adds	r7, #20
 8007f90:	46bd      	mov	sp, r7
 8007f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f96:	4770      	bx	lr
 8007f98:	08007f9d 	.word	0x08007f9d

08007f9c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b085      	sub	sp, #20
 8007fa0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007fa6:	4b15      	ldr	r3, [pc, #84]	@ (8007ffc <prvTaskExitError+0x60>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fae:	d00d      	beq.n	8007fcc <prvTaskExitError+0x30>
	__asm volatile
 8007fb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fb4:	b672      	cpsid	i
 8007fb6:	f383 8811 	msr	BASEPRI, r3
 8007fba:	f3bf 8f6f 	isb	sy
 8007fbe:	f3bf 8f4f 	dsb	sy
 8007fc2:	b662      	cpsie	i
 8007fc4:	60fb      	str	r3, [r7, #12]
}
 8007fc6:	bf00      	nop
 8007fc8:	bf00      	nop
 8007fca:	e7fd      	b.n	8007fc8 <prvTaskExitError+0x2c>
	__asm volatile
 8007fcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fd0:	b672      	cpsid	i
 8007fd2:	f383 8811 	msr	BASEPRI, r3
 8007fd6:	f3bf 8f6f 	isb	sy
 8007fda:	f3bf 8f4f 	dsb	sy
 8007fde:	b662      	cpsie	i
 8007fe0:	60bb      	str	r3, [r7, #8]
}
 8007fe2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007fe4:	bf00      	nop
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d0fc      	beq.n	8007fe6 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007fec:	bf00      	nop
 8007fee:	bf00      	nop
 8007ff0:	3714      	adds	r7, #20
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff8:	4770      	bx	lr
 8007ffa:	bf00      	nop
 8007ffc:	2000000c 	.word	0x2000000c

08008000 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008000:	4b07      	ldr	r3, [pc, #28]	@ (8008020 <pxCurrentTCBConst2>)
 8008002:	6819      	ldr	r1, [r3, #0]
 8008004:	6808      	ldr	r0, [r1, #0]
 8008006:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800800a:	f380 8809 	msr	PSP, r0
 800800e:	f3bf 8f6f 	isb	sy
 8008012:	f04f 0000 	mov.w	r0, #0
 8008016:	f380 8811 	msr	BASEPRI, r0
 800801a:	4770      	bx	lr
 800801c:	f3af 8000 	nop.w

08008020 <pxCurrentTCBConst2>:
 8008020:	20001600 	.word	0x20001600
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008024:	bf00      	nop
 8008026:	bf00      	nop

08008028 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008028:	4808      	ldr	r0, [pc, #32]	@ (800804c <prvPortStartFirstTask+0x24>)
 800802a:	6800      	ldr	r0, [r0, #0]
 800802c:	6800      	ldr	r0, [r0, #0]
 800802e:	f380 8808 	msr	MSP, r0
 8008032:	f04f 0000 	mov.w	r0, #0
 8008036:	f380 8814 	msr	CONTROL, r0
 800803a:	b662      	cpsie	i
 800803c:	b661      	cpsie	f
 800803e:	f3bf 8f4f 	dsb	sy
 8008042:	f3bf 8f6f 	isb	sy
 8008046:	df00      	svc	0
 8008048:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800804a:	bf00      	nop
 800804c:	e000ed08 	.word	0xe000ed08

08008050 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b084      	sub	sp, #16
 8008054:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008056:	4b37      	ldr	r3, [pc, #220]	@ (8008134 <xPortStartScheduler+0xe4>)
 8008058:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	781b      	ldrb	r3, [r3, #0]
 800805e:	b2db      	uxtb	r3, r3
 8008060:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	22ff      	movs	r2, #255	@ 0xff
 8008066:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	781b      	ldrb	r3, [r3, #0]
 800806c:	b2db      	uxtb	r3, r3
 800806e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008070:	78fb      	ldrb	r3, [r7, #3]
 8008072:	b2db      	uxtb	r3, r3
 8008074:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008078:	b2da      	uxtb	r2, r3
 800807a:	4b2f      	ldr	r3, [pc, #188]	@ (8008138 <xPortStartScheduler+0xe8>)
 800807c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800807e:	4b2f      	ldr	r3, [pc, #188]	@ (800813c <xPortStartScheduler+0xec>)
 8008080:	2207      	movs	r2, #7
 8008082:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008084:	e009      	b.n	800809a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008086:	4b2d      	ldr	r3, [pc, #180]	@ (800813c <xPortStartScheduler+0xec>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	3b01      	subs	r3, #1
 800808c:	4a2b      	ldr	r2, [pc, #172]	@ (800813c <xPortStartScheduler+0xec>)
 800808e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008090:	78fb      	ldrb	r3, [r7, #3]
 8008092:	b2db      	uxtb	r3, r3
 8008094:	005b      	lsls	r3, r3, #1
 8008096:	b2db      	uxtb	r3, r3
 8008098:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800809a:	78fb      	ldrb	r3, [r7, #3]
 800809c:	b2db      	uxtb	r3, r3
 800809e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080a2:	2b80      	cmp	r3, #128	@ 0x80
 80080a4:	d0ef      	beq.n	8008086 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80080a6:	4b25      	ldr	r3, [pc, #148]	@ (800813c <xPortStartScheduler+0xec>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f1c3 0307 	rsb	r3, r3, #7
 80080ae:	2b04      	cmp	r3, #4
 80080b0:	d00d      	beq.n	80080ce <xPortStartScheduler+0x7e>
	__asm volatile
 80080b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080b6:	b672      	cpsid	i
 80080b8:	f383 8811 	msr	BASEPRI, r3
 80080bc:	f3bf 8f6f 	isb	sy
 80080c0:	f3bf 8f4f 	dsb	sy
 80080c4:	b662      	cpsie	i
 80080c6:	60bb      	str	r3, [r7, #8]
}
 80080c8:	bf00      	nop
 80080ca:	bf00      	nop
 80080cc:	e7fd      	b.n	80080ca <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80080ce:	4b1b      	ldr	r3, [pc, #108]	@ (800813c <xPortStartScheduler+0xec>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	021b      	lsls	r3, r3, #8
 80080d4:	4a19      	ldr	r2, [pc, #100]	@ (800813c <xPortStartScheduler+0xec>)
 80080d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80080d8:	4b18      	ldr	r3, [pc, #96]	@ (800813c <xPortStartScheduler+0xec>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80080e0:	4a16      	ldr	r2, [pc, #88]	@ (800813c <xPortStartScheduler+0xec>)
 80080e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	b2da      	uxtb	r2, r3
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80080ec:	4b14      	ldr	r3, [pc, #80]	@ (8008140 <xPortStartScheduler+0xf0>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4a13      	ldr	r2, [pc, #76]	@ (8008140 <xPortStartScheduler+0xf0>)
 80080f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80080f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80080f8:	4b11      	ldr	r3, [pc, #68]	@ (8008140 <xPortStartScheduler+0xf0>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4a10      	ldr	r2, [pc, #64]	@ (8008140 <xPortStartScheduler+0xf0>)
 80080fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008102:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008104:	f000 f8dc 	bl	80082c0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008108:	4b0e      	ldr	r3, [pc, #56]	@ (8008144 <xPortStartScheduler+0xf4>)
 800810a:	2200      	movs	r2, #0
 800810c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800810e:	f000 f8fb 	bl	8008308 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008112:	4b0d      	ldr	r3, [pc, #52]	@ (8008148 <xPortStartScheduler+0xf8>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4a0c      	ldr	r2, [pc, #48]	@ (8008148 <xPortStartScheduler+0xf8>)
 8008118:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800811c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800811e:	f7ff ff83 	bl	8008028 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008122:	f7fe ff3f 	bl	8006fa4 <vTaskSwitchContext>
	prvTaskExitError();
 8008126:	f7ff ff39 	bl	8007f9c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800812a:	2300      	movs	r3, #0
}
 800812c:	4618      	mov	r0, r3
 800812e:	3710      	adds	r7, #16
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}
 8008134:	e000e400 	.word	0xe000e400
 8008138:	20001c2c 	.word	0x20001c2c
 800813c:	20001c30 	.word	0x20001c30
 8008140:	e000ed20 	.word	0xe000ed20
 8008144:	2000000c 	.word	0x2000000c
 8008148:	e000ef34 	.word	0xe000ef34

0800814c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800814c:	b480      	push	{r7}
 800814e:	b083      	sub	sp, #12
 8008150:	af00      	add	r7, sp, #0
	__asm volatile
 8008152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008156:	b672      	cpsid	i
 8008158:	f383 8811 	msr	BASEPRI, r3
 800815c:	f3bf 8f6f 	isb	sy
 8008160:	f3bf 8f4f 	dsb	sy
 8008164:	b662      	cpsie	i
 8008166:	607b      	str	r3, [r7, #4]
}
 8008168:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800816a:	4b11      	ldr	r3, [pc, #68]	@ (80081b0 <vPortEnterCritical+0x64>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	3301      	adds	r3, #1
 8008170:	4a0f      	ldr	r2, [pc, #60]	@ (80081b0 <vPortEnterCritical+0x64>)
 8008172:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008174:	4b0e      	ldr	r3, [pc, #56]	@ (80081b0 <vPortEnterCritical+0x64>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	2b01      	cmp	r3, #1
 800817a:	d112      	bne.n	80081a2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800817c:	4b0d      	ldr	r3, [pc, #52]	@ (80081b4 <vPortEnterCritical+0x68>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	b2db      	uxtb	r3, r3
 8008182:	2b00      	cmp	r3, #0
 8008184:	d00d      	beq.n	80081a2 <vPortEnterCritical+0x56>
	__asm volatile
 8008186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800818a:	b672      	cpsid	i
 800818c:	f383 8811 	msr	BASEPRI, r3
 8008190:	f3bf 8f6f 	isb	sy
 8008194:	f3bf 8f4f 	dsb	sy
 8008198:	b662      	cpsie	i
 800819a:	603b      	str	r3, [r7, #0]
}
 800819c:	bf00      	nop
 800819e:	bf00      	nop
 80081a0:	e7fd      	b.n	800819e <vPortEnterCritical+0x52>
	}
}
 80081a2:	bf00      	nop
 80081a4:	370c      	adds	r7, #12
 80081a6:	46bd      	mov	sp, r7
 80081a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ac:	4770      	bx	lr
 80081ae:	bf00      	nop
 80081b0:	2000000c 	.word	0x2000000c
 80081b4:	e000ed04 	.word	0xe000ed04

080081b8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80081b8:	b480      	push	{r7}
 80081ba:	b083      	sub	sp, #12
 80081bc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80081be:	4b13      	ldr	r3, [pc, #76]	@ (800820c <vPortExitCritical+0x54>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d10d      	bne.n	80081e2 <vPortExitCritical+0x2a>
	__asm volatile
 80081c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081ca:	b672      	cpsid	i
 80081cc:	f383 8811 	msr	BASEPRI, r3
 80081d0:	f3bf 8f6f 	isb	sy
 80081d4:	f3bf 8f4f 	dsb	sy
 80081d8:	b662      	cpsie	i
 80081da:	607b      	str	r3, [r7, #4]
}
 80081dc:	bf00      	nop
 80081de:	bf00      	nop
 80081e0:	e7fd      	b.n	80081de <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80081e2:	4b0a      	ldr	r3, [pc, #40]	@ (800820c <vPortExitCritical+0x54>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	3b01      	subs	r3, #1
 80081e8:	4a08      	ldr	r2, [pc, #32]	@ (800820c <vPortExitCritical+0x54>)
 80081ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80081ec:	4b07      	ldr	r3, [pc, #28]	@ (800820c <vPortExitCritical+0x54>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d105      	bne.n	8008200 <vPortExitCritical+0x48>
 80081f4:	2300      	movs	r3, #0
 80081f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	f383 8811 	msr	BASEPRI, r3
}
 80081fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008200:	bf00      	nop
 8008202:	370c      	adds	r7, #12
 8008204:	46bd      	mov	sp, r7
 8008206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820a:	4770      	bx	lr
 800820c:	2000000c 	.word	0x2000000c

08008210 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008210:	f3ef 8009 	mrs	r0, PSP
 8008214:	f3bf 8f6f 	isb	sy
 8008218:	4b15      	ldr	r3, [pc, #84]	@ (8008270 <pxCurrentTCBConst>)
 800821a:	681a      	ldr	r2, [r3, #0]
 800821c:	f01e 0f10 	tst.w	lr, #16
 8008220:	bf08      	it	eq
 8008222:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008226:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800822a:	6010      	str	r0, [r2, #0]
 800822c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008230:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008234:	b672      	cpsid	i
 8008236:	f380 8811 	msr	BASEPRI, r0
 800823a:	f3bf 8f4f 	dsb	sy
 800823e:	f3bf 8f6f 	isb	sy
 8008242:	b662      	cpsie	i
 8008244:	f7fe feae 	bl	8006fa4 <vTaskSwitchContext>
 8008248:	f04f 0000 	mov.w	r0, #0
 800824c:	f380 8811 	msr	BASEPRI, r0
 8008250:	bc09      	pop	{r0, r3}
 8008252:	6819      	ldr	r1, [r3, #0]
 8008254:	6808      	ldr	r0, [r1, #0]
 8008256:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800825a:	f01e 0f10 	tst.w	lr, #16
 800825e:	bf08      	it	eq
 8008260:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008264:	f380 8809 	msr	PSP, r0
 8008268:	f3bf 8f6f 	isb	sy
 800826c:	4770      	bx	lr
 800826e:	bf00      	nop

08008270 <pxCurrentTCBConst>:
 8008270:	20001600 	.word	0x20001600
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008274:	bf00      	nop
 8008276:	bf00      	nop

08008278 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b082      	sub	sp, #8
 800827c:	af00      	add	r7, sp, #0
	__asm volatile
 800827e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008282:	b672      	cpsid	i
 8008284:	f383 8811 	msr	BASEPRI, r3
 8008288:	f3bf 8f6f 	isb	sy
 800828c:	f3bf 8f4f 	dsb	sy
 8008290:	b662      	cpsie	i
 8008292:	607b      	str	r3, [r7, #4]
}
 8008294:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008296:	f7fe fdc9 	bl	8006e2c <xTaskIncrementTick>
 800829a:	4603      	mov	r3, r0
 800829c:	2b00      	cmp	r3, #0
 800829e:	d003      	beq.n	80082a8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80082a0:	4b06      	ldr	r3, [pc, #24]	@ (80082bc <SysTick_Handler+0x44>)
 80082a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082a6:	601a      	str	r2, [r3, #0]
 80082a8:	2300      	movs	r3, #0
 80082aa:	603b      	str	r3, [r7, #0]
	__asm volatile
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	f383 8811 	msr	BASEPRI, r3
}
 80082b2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80082b4:	bf00      	nop
 80082b6:	3708      	adds	r7, #8
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}
 80082bc:	e000ed04 	.word	0xe000ed04

080082c0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80082c0:	b480      	push	{r7}
 80082c2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80082c4:	4b0b      	ldr	r3, [pc, #44]	@ (80082f4 <vPortSetupTimerInterrupt+0x34>)
 80082c6:	2200      	movs	r2, #0
 80082c8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80082ca:	4b0b      	ldr	r3, [pc, #44]	@ (80082f8 <vPortSetupTimerInterrupt+0x38>)
 80082cc:	2200      	movs	r2, #0
 80082ce:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80082d0:	4b0a      	ldr	r3, [pc, #40]	@ (80082fc <vPortSetupTimerInterrupt+0x3c>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	4a0a      	ldr	r2, [pc, #40]	@ (8008300 <vPortSetupTimerInterrupt+0x40>)
 80082d6:	fba2 2303 	umull	r2, r3, r2, r3
 80082da:	099b      	lsrs	r3, r3, #6
 80082dc:	4a09      	ldr	r2, [pc, #36]	@ (8008304 <vPortSetupTimerInterrupt+0x44>)
 80082de:	3b01      	subs	r3, #1
 80082e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80082e2:	4b04      	ldr	r3, [pc, #16]	@ (80082f4 <vPortSetupTimerInterrupt+0x34>)
 80082e4:	2207      	movs	r2, #7
 80082e6:	601a      	str	r2, [r3, #0]
}
 80082e8:	bf00      	nop
 80082ea:	46bd      	mov	sp, r7
 80082ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f0:	4770      	bx	lr
 80082f2:	bf00      	nop
 80082f4:	e000e010 	.word	0xe000e010
 80082f8:	e000e018 	.word	0xe000e018
 80082fc:	20000000 	.word	0x20000000
 8008300:	10624dd3 	.word	0x10624dd3
 8008304:	e000e014 	.word	0xe000e014

08008308 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008308:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008318 <vPortEnableVFP+0x10>
 800830c:	6801      	ldr	r1, [r0, #0]
 800830e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008312:	6001      	str	r1, [r0, #0]
 8008314:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008316:	bf00      	nop
 8008318:	e000ed88 	.word	0xe000ed88

0800831c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800831c:	b480      	push	{r7}
 800831e:	b085      	sub	sp, #20
 8008320:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008322:	f3ef 8305 	mrs	r3, IPSR
 8008326:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	2b0f      	cmp	r3, #15
 800832c:	d917      	bls.n	800835e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800832e:	4a1a      	ldr	r2, [pc, #104]	@ (8008398 <vPortValidateInterruptPriority+0x7c>)
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	4413      	add	r3, r2
 8008334:	781b      	ldrb	r3, [r3, #0]
 8008336:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008338:	4b18      	ldr	r3, [pc, #96]	@ (800839c <vPortValidateInterruptPriority+0x80>)
 800833a:	781b      	ldrb	r3, [r3, #0]
 800833c:	7afa      	ldrb	r2, [r7, #11]
 800833e:	429a      	cmp	r2, r3
 8008340:	d20d      	bcs.n	800835e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8008342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008346:	b672      	cpsid	i
 8008348:	f383 8811 	msr	BASEPRI, r3
 800834c:	f3bf 8f6f 	isb	sy
 8008350:	f3bf 8f4f 	dsb	sy
 8008354:	b662      	cpsie	i
 8008356:	607b      	str	r3, [r7, #4]
}
 8008358:	bf00      	nop
 800835a:	bf00      	nop
 800835c:	e7fd      	b.n	800835a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800835e:	4b10      	ldr	r3, [pc, #64]	@ (80083a0 <vPortValidateInterruptPriority+0x84>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008366:	4b0f      	ldr	r3, [pc, #60]	@ (80083a4 <vPortValidateInterruptPriority+0x88>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	429a      	cmp	r2, r3
 800836c:	d90d      	bls.n	800838a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800836e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008372:	b672      	cpsid	i
 8008374:	f383 8811 	msr	BASEPRI, r3
 8008378:	f3bf 8f6f 	isb	sy
 800837c:	f3bf 8f4f 	dsb	sy
 8008380:	b662      	cpsie	i
 8008382:	603b      	str	r3, [r7, #0]
}
 8008384:	bf00      	nop
 8008386:	bf00      	nop
 8008388:	e7fd      	b.n	8008386 <vPortValidateInterruptPriority+0x6a>
	}
 800838a:	bf00      	nop
 800838c:	3714      	adds	r7, #20
 800838e:	46bd      	mov	sp, r7
 8008390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008394:	4770      	bx	lr
 8008396:	bf00      	nop
 8008398:	e000e3f0 	.word	0xe000e3f0
 800839c:	20001c2c 	.word	0x20001c2c
 80083a0:	e000ed0c 	.word	0xe000ed0c
 80083a4:	20001c30 	.word	0x20001c30

080083a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b08a      	sub	sp, #40	@ 0x28
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80083b0:	2300      	movs	r3, #0
 80083b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80083b4:	f7fe fc7c 	bl	8006cb0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80083b8:	4b5d      	ldr	r3, [pc, #372]	@ (8008530 <pvPortMalloc+0x188>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d101      	bne.n	80083c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80083c0:	f000 f920 	bl	8008604 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80083c4:	4b5b      	ldr	r3, [pc, #364]	@ (8008534 <pvPortMalloc+0x18c>)
 80083c6:	681a      	ldr	r2, [r3, #0]
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	4013      	ands	r3, r2
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	f040 8094 	bne.w	80084fa <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d020      	beq.n	800841a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 80083d8:	2208      	movs	r2, #8
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	4413      	add	r3, r2
 80083de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f003 0307 	and.w	r3, r3, #7
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d017      	beq.n	800841a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f023 0307 	bic.w	r3, r3, #7
 80083f0:	3308      	adds	r3, #8
 80083f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f003 0307 	and.w	r3, r3, #7
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d00d      	beq.n	800841a <pvPortMalloc+0x72>
	__asm volatile
 80083fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008402:	b672      	cpsid	i
 8008404:	f383 8811 	msr	BASEPRI, r3
 8008408:	f3bf 8f6f 	isb	sy
 800840c:	f3bf 8f4f 	dsb	sy
 8008410:	b662      	cpsie	i
 8008412:	617b      	str	r3, [r7, #20]
}
 8008414:	bf00      	nop
 8008416:	bf00      	nop
 8008418:	e7fd      	b.n	8008416 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d06c      	beq.n	80084fa <pvPortMalloc+0x152>
 8008420:	4b45      	ldr	r3, [pc, #276]	@ (8008538 <pvPortMalloc+0x190>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	687a      	ldr	r2, [r7, #4]
 8008426:	429a      	cmp	r2, r3
 8008428:	d867      	bhi.n	80084fa <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800842a:	4b44      	ldr	r3, [pc, #272]	@ (800853c <pvPortMalloc+0x194>)
 800842c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800842e:	4b43      	ldr	r3, [pc, #268]	@ (800853c <pvPortMalloc+0x194>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008434:	e004      	b.n	8008440 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8008436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008438:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800843a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008442:	685b      	ldr	r3, [r3, #4]
 8008444:	687a      	ldr	r2, [r7, #4]
 8008446:	429a      	cmp	r2, r3
 8008448:	d903      	bls.n	8008452 <pvPortMalloc+0xaa>
 800844a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d1f1      	bne.n	8008436 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008452:	4b37      	ldr	r3, [pc, #220]	@ (8008530 <pvPortMalloc+0x188>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008458:	429a      	cmp	r2, r3
 800845a:	d04e      	beq.n	80084fa <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800845c:	6a3b      	ldr	r3, [r7, #32]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	2208      	movs	r2, #8
 8008462:	4413      	add	r3, r2
 8008464:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008468:	681a      	ldr	r2, [r3, #0]
 800846a:	6a3b      	ldr	r3, [r7, #32]
 800846c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800846e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008470:	685a      	ldr	r2, [r3, #4]
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	1ad2      	subs	r2, r2, r3
 8008476:	2308      	movs	r3, #8
 8008478:	005b      	lsls	r3, r3, #1
 800847a:	429a      	cmp	r2, r3
 800847c:	d922      	bls.n	80084c4 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800847e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	4413      	add	r3, r2
 8008484:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008486:	69bb      	ldr	r3, [r7, #24]
 8008488:	f003 0307 	and.w	r3, r3, #7
 800848c:	2b00      	cmp	r3, #0
 800848e:	d00d      	beq.n	80084ac <pvPortMalloc+0x104>
	__asm volatile
 8008490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008494:	b672      	cpsid	i
 8008496:	f383 8811 	msr	BASEPRI, r3
 800849a:	f3bf 8f6f 	isb	sy
 800849e:	f3bf 8f4f 	dsb	sy
 80084a2:	b662      	cpsie	i
 80084a4:	613b      	str	r3, [r7, #16]
}
 80084a6:	bf00      	nop
 80084a8:	bf00      	nop
 80084aa:	e7fd      	b.n	80084a8 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80084ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084ae:	685a      	ldr	r2, [r3, #4]
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	1ad2      	subs	r2, r2, r3
 80084b4:	69bb      	ldr	r3, [r7, #24]
 80084b6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80084b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084ba:	687a      	ldr	r2, [r7, #4]
 80084bc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80084be:	69b8      	ldr	r0, [r7, #24]
 80084c0:	f000 f902 	bl	80086c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80084c4:	4b1c      	ldr	r3, [pc, #112]	@ (8008538 <pvPortMalloc+0x190>)
 80084c6:	681a      	ldr	r2, [r3, #0]
 80084c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084ca:	685b      	ldr	r3, [r3, #4]
 80084cc:	1ad3      	subs	r3, r2, r3
 80084ce:	4a1a      	ldr	r2, [pc, #104]	@ (8008538 <pvPortMalloc+0x190>)
 80084d0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80084d2:	4b19      	ldr	r3, [pc, #100]	@ (8008538 <pvPortMalloc+0x190>)
 80084d4:	681a      	ldr	r2, [r3, #0]
 80084d6:	4b1a      	ldr	r3, [pc, #104]	@ (8008540 <pvPortMalloc+0x198>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	429a      	cmp	r2, r3
 80084dc:	d203      	bcs.n	80084e6 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80084de:	4b16      	ldr	r3, [pc, #88]	@ (8008538 <pvPortMalloc+0x190>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	4a17      	ldr	r2, [pc, #92]	@ (8008540 <pvPortMalloc+0x198>)
 80084e4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80084e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084e8:	685a      	ldr	r2, [r3, #4]
 80084ea:	4b12      	ldr	r3, [pc, #72]	@ (8008534 <pvPortMalloc+0x18c>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	431a      	orrs	r2, r3
 80084f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084f2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80084f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084f6:	2200      	movs	r2, #0
 80084f8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80084fa:	f7fe fbe7 	bl	8006ccc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80084fe:	69fb      	ldr	r3, [r7, #28]
 8008500:	f003 0307 	and.w	r3, r3, #7
 8008504:	2b00      	cmp	r3, #0
 8008506:	d00d      	beq.n	8008524 <pvPortMalloc+0x17c>
	__asm volatile
 8008508:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800850c:	b672      	cpsid	i
 800850e:	f383 8811 	msr	BASEPRI, r3
 8008512:	f3bf 8f6f 	isb	sy
 8008516:	f3bf 8f4f 	dsb	sy
 800851a:	b662      	cpsie	i
 800851c:	60fb      	str	r3, [r7, #12]
}
 800851e:	bf00      	nop
 8008520:	bf00      	nop
 8008522:	e7fd      	b.n	8008520 <pvPortMalloc+0x178>
	return pvReturn;
 8008524:	69fb      	ldr	r3, [r7, #28]
}
 8008526:	4618      	mov	r0, r3
 8008528:	3728      	adds	r7, #40	@ 0x28
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}
 800852e:	bf00      	nop
 8008530:	2000583c 	.word	0x2000583c
 8008534:	20005848 	.word	0x20005848
 8008538:	20005840 	.word	0x20005840
 800853c:	20005834 	.word	0x20005834
 8008540:	20005844 	.word	0x20005844

08008544 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b086      	sub	sp, #24
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d04e      	beq.n	80085f4 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008556:	2308      	movs	r3, #8
 8008558:	425b      	negs	r3, r3
 800855a:	697a      	ldr	r2, [r7, #20]
 800855c:	4413      	add	r3, r2
 800855e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	685a      	ldr	r2, [r3, #4]
 8008568:	4b24      	ldr	r3, [pc, #144]	@ (80085fc <vPortFree+0xb8>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	4013      	ands	r3, r2
 800856e:	2b00      	cmp	r3, #0
 8008570:	d10d      	bne.n	800858e <vPortFree+0x4a>
	__asm volatile
 8008572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008576:	b672      	cpsid	i
 8008578:	f383 8811 	msr	BASEPRI, r3
 800857c:	f3bf 8f6f 	isb	sy
 8008580:	f3bf 8f4f 	dsb	sy
 8008584:	b662      	cpsie	i
 8008586:	60fb      	str	r3, [r7, #12]
}
 8008588:	bf00      	nop
 800858a:	bf00      	nop
 800858c:	e7fd      	b.n	800858a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d00d      	beq.n	80085b2 <vPortFree+0x6e>
	__asm volatile
 8008596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800859a:	b672      	cpsid	i
 800859c:	f383 8811 	msr	BASEPRI, r3
 80085a0:	f3bf 8f6f 	isb	sy
 80085a4:	f3bf 8f4f 	dsb	sy
 80085a8:	b662      	cpsie	i
 80085aa:	60bb      	str	r3, [r7, #8]
}
 80085ac:	bf00      	nop
 80085ae:	bf00      	nop
 80085b0:	e7fd      	b.n	80085ae <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80085b2:	693b      	ldr	r3, [r7, #16]
 80085b4:	685a      	ldr	r2, [r3, #4]
 80085b6:	4b11      	ldr	r3, [pc, #68]	@ (80085fc <vPortFree+0xb8>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4013      	ands	r3, r2
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d019      	beq.n	80085f4 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80085c0:	693b      	ldr	r3, [r7, #16]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d115      	bne.n	80085f4 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	685a      	ldr	r2, [r3, #4]
 80085cc:	4b0b      	ldr	r3, [pc, #44]	@ (80085fc <vPortFree+0xb8>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	43db      	mvns	r3, r3
 80085d2:	401a      	ands	r2, r3
 80085d4:	693b      	ldr	r3, [r7, #16]
 80085d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80085d8:	f7fe fb6a 	bl	8006cb0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	685a      	ldr	r2, [r3, #4]
 80085e0:	4b07      	ldr	r3, [pc, #28]	@ (8008600 <vPortFree+0xbc>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	4413      	add	r3, r2
 80085e6:	4a06      	ldr	r2, [pc, #24]	@ (8008600 <vPortFree+0xbc>)
 80085e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80085ea:	6938      	ldr	r0, [r7, #16]
 80085ec:	f000 f86c 	bl	80086c8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80085f0:	f7fe fb6c 	bl	8006ccc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80085f4:	bf00      	nop
 80085f6:	3718      	adds	r7, #24
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}
 80085fc:	20005848 	.word	0x20005848
 8008600:	20005840 	.word	0x20005840

08008604 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008604:	b480      	push	{r7}
 8008606:	b085      	sub	sp, #20
 8008608:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800860a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800860e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008610:	4b27      	ldr	r3, [pc, #156]	@ (80086b0 <prvHeapInit+0xac>)
 8008612:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f003 0307 	and.w	r3, r3, #7
 800861a:	2b00      	cmp	r3, #0
 800861c:	d00c      	beq.n	8008638 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	3307      	adds	r3, #7
 8008622:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	f023 0307 	bic.w	r3, r3, #7
 800862a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800862c:	68ba      	ldr	r2, [r7, #8]
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	1ad3      	subs	r3, r2, r3
 8008632:	4a1f      	ldr	r2, [pc, #124]	@ (80086b0 <prvHeapInit+0xac>)
 8008634:	4413      	add	r3, r2
 8008636:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800863c:	4a1d      	ldr	r2, [pc, #116]	@ (80086b4 <prvHeapInit+0xb0>)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008642:	4b1c      	ldr	r3, [pc, #112]	@ (80086b4 <prvHeapInit+0xb0>)
 8008644:	2200      	movs	r2, #0
 8008646:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	68ba      	ldr	r2, [r7, #8]
 800864c:	4413      	add	r3, r2
 800864e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008650:	2208      	movs	r2, #8
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	1a9b      	subs	r3, r3, r2
 8008656:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	f023 0307 	bic.w	r3, r3, #7
 800865e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	4a15      	ldr	r2, [pc, #84]	@ (80086b8 <prvHeapInit+0xb4>)
 8008664:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008666:	4b14      	ldr	r3, [pc, #80]	@ (80086b8 <prvHeapInit+0xb4>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	2200      	movs	r2, #0
 800866c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800866e:	4b12      	ldr	r3, [pc, #72]	@ (80086b8 <prvHeapInit+0xb4>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	2200      	movs	r2, #0
 8008674:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	68fa      	ldr	r2, [r7, #12]
 800867e:	1ad2      	subs	r2, r2, r3
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008684:	4b0c      	ldr	r3, [pc, #48]	@ (80086b8 <prvHeapInit+0xb4>)
 8008686:	681a      	ldr	r2, [r3, #0]
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	685b      	ldr	r3, [r3, #4]
 8008690:	4a0a      	ldr	r2, [pc, #40]	@ (80086bc <prvHeapInit+0xb8>)
 8008692:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	685b      	ldr	r3, [r3, #4]
 8008698:	4a09      	ldr	r2, [pc, #36]	@ (80086c0 <prvHeapInit+0xbc>)
 800869a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800869c:	4b09      	ldr	r3, [pc, #36]	@ (80086c4 <prvHeapInit+0xc0>)
 800869e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80086a2:	601a      	str	r2, [r3, #0]
}
 80086a4:	bf00      	nop
 80086a6:	3714      	adds	r7, #20
 80086a8:	46bd      	mov	sp, r7
 80086aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ae:	4770      	bx	lr
 80086b0:	20001c34 	.word	0x20001c34
 80086b4:	20005834 	.word	0x20005834
 80086b8:	2000583c 	.word	0x2000583c
 80086bc:	20005844 	.word	0x20005844
 80086c0:	20005840 	.word	0x20005840
 80086c4:	20005848 	.word	0x20005848

080086c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80086c8:	b480      	push	{r7}
 80086ca:	b085      	sub	sp, #20
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80086d0:	4b28      	ldr	r3, [pc, #160]	@ (8008774 <prvInsertBlockIntoFreeList+0xac>)
 80086d2:	60fb      	str	r3, [r7, #12]
 80086d4:	e002      	b.n	80086dc <prvInsertBlockIntoFreeList+0x14>
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	60fb      	str	r3, [r7, #12]
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	687a      	ldr	r2, [r7, #4]
 80086e2:	429a      	cmp	r2, r3
 80086e4:	d8f7      	bhi.n	80086d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	685b      	ldr	r3, [r3, #4]
 80086ee:	68ba      	ldr	r2, [r7, #8]
 80086f0:	4413      	add	r3, r2
 80086f2:	687a      	ldr	r2, [r7, #4]
 80086f4:	429a      	cmp	r2, r3
 80086f6:	d108      	bne.n	800870a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	685a      	ldr	r2, [r3, #4]
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	685b      	ldr	r3, [r3, #4]
 8008700:	441a      	add	r2, r3
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	685b      	ldr	r3, [r3, #4]
 8008712:	68ba      	ldr	r2, [r7, #8]
 8008714:	441a      	add	r2, r3
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	429a      	cmp	r2, r3
 800871c:	d118      	bne.n	8008750 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681a      	ldr	r2, [r3, #0]
 8008722:	4b15      	ldr	r3, [pc, #84]	@ (8008778 <prvInsertBlockIntoFreeList+0xb0>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	429a      	cmp	r2, r3
 8008728:	d00d      	beq.n	8008746 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	685a      	ldr	r2, [r3, #4]
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	441a      	add	r2, r3
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	681a      	ldr	r2, [r3, #0]
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	601a      	str	r2, [r3, #0]
 8008744:	e008      	b.n	8008758 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008746:	4b0c      	ldr	r3, [pc, #48]	@ (8008778 <prvInsertBlockIntoFreeList+0xb0>)
 8008748:	681a      	ldr	r2, [r3, #0]
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	601a      	str	r2, [r3, #0]
 800874e:	e003      	b.n	8008758 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681a      	ldr	r2, [r3, #0]
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008758:	68fa      	ldr	r2, [r7, #12]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	429a      	cmp	r2, r3
 800875e:	d002      	beq.n	8008766 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	687a      	ldr	r2, [r7, #4]
 8008764:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008766:	bf00      	nop
 8008768:	3714      	adds	r7, #20
 800876a:	46bd      	mov	sp, r7
 800876c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008770:	4770      	bx	lr
 8008772:	bf00      	nop
 8008774:	20005834 	.word	0x20005834
 8008778:	2000583c 	.word	0x2000583c

0800877c <std>:
 800877c:	2300      	movs	r3, #0
 800877e:	b510      	push	{r4, lr}
 8008780:	4604      	mov	r4, r0
 8008782:	e9c0 3300 	strd	r3, r3, [r0]
 8008786:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800878a:	6083      	str	r3, [r0, #8]
 800878c:	8181      	strh	r1, [r0, #12]
 800878e:	6643      	str	r3, [r0, #100]	@ 0x64
 8008790:	81c2      	strh	r2, [r0, #14]
 8008792:	6183      	str	r3, [r0, #24]
 8008794:	4619      	mov	r1, r3
 8008796:	2208      	movs	r2, #8
 8008798:	305c      	adds	r0, #92	@ 0x5c
 800879a:	f000 f906 	bl	80089aa <memset>
 800879e:	4b0d      	ldr	r3, [pc, #52]	@ (80087d4 <std+0x58>)
 80087a0:	6263      	str	r3, [r4, #36]	@ 0x24
 80087a2:	4b0d      	ldr	r3, [pc, #52]	@ (80087d8 <std+0x5c>)
 80087a4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80087a6:	4b0d      	ldr	r3, [pc, #52]	@ (80087dc <std+0x60>)
 80087a8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80087aa:	4b0d      	ldr	r3, [pc, #52]	@ (80087e0 <std+0x64>)
 80087ac:	6323      	str	r3, [r4, #48]	@ 0x30
 80087ae:	4b0d      	ldr	r3, [pc, #52]	@ (80087e4 <std+0x68>)
 80087b0:	6224      	str	r4, [r4, #32]
 80087b2:	429c      	cmp	r4, r3
 80087b4:	d006      	beq.n	80087c4 <std+0x48>
 80087b6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80087ba:	4294      	cmp	r4, r2
 80087bc:	d002      	beq.n	80087c4 <std+0x48>
 80087be:	33d0      	adds	r3, #208	@ 0xd0
 80087c0:	429c      	cmp	r4, r3
 80087c2:	d105      	bne.n	80087d0 <std+0x54>
 80087c4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80087c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087cc:	f000 b9c4 	b.w	8008b58 <__retarget_lock_init_recursive>
 80087d0:	bd10      	pop	{r4, pc}
 80087d2:	bf00      	nop
 80087d4:	08008925 	.word	0x08008925
 80087d8:	08008947 	.word	0x08008947
 80087dc:	0800897f 	.word	0x0800897f
 80087e0:	080089a3 	.word	0x080089a3
 80087e4:	2000584c 	.word	0x2000584c

080087e8 <stdio_exit_handler>:
 80087e8:	4a02      	ldr	r2, [pc, #8]	@ (80087f4 <stdio_exit_handler+0xc>)
 80087ea:	4903      	ldr	r1, [pc, #12]	@ (80087f8 <stdio_exit_handler+0x10>)
 80087ec:	4803      	ldr	r0, [pc, #12]	@ (80087fc <stdio_exit_handler+0x14>)
 80087ee:	f000 b869 	b.w	80088c4 <_fwalk_sglue>
 80087f2:	bf00      	nop
 80087f4:	20000010 	.word	0x20000010
 80087f8:	08009411 	.word	0x08009411
 80087fc:	20000020 	.word	0x20000020

08008800 <cleanup_stdio>:
 8008800:	6841      	ldr	r1, [r0, #4]
 8008802:	4b0c      	ldr	r3, [pc, #48]	@ (8008834 <cleanup_stdio+0x34>)
 8008804:	4299      	cmp	r1, r3
 8008806:	b510      	push	{r4, lr}
 8008808:	4604      	mov	r4, r0
 800880a:	d001      	beq.n	8008810 <cleanup_stdio+0x10>
 800880c:	f000 fe00 	bl	8009410 <_fflush_r>
 8008810:	68a1      	ldr	r1, [r4, #8]
 8008812:	4b09      	ldr	r3, [pc, #36]	@ (8008838 <cleanup_stdio+0x38>)
 8008814:	4299      	cmp	r1, r3
 8008816:	d002      	beq.n	800881e <cleanup_stdio+0x1e>
 8008818:	4620      	mov	r0, r4
 800881a:	f000 fdf9 	bl	8009410 <_fflush_r>
 800881e:	68e1      	ldr	r1, [r4, #12]
 8008820:	4b06      	ldr	r3, [pc, #24]	@ (800883c <cleanup_stdio+0x3c>)
 8008822:	4299      	cmp	r1, r3
 8008824:	d004      	beq.n	8008830 <cleanup_stdio+0x30>
 8008826:	4620      	mov	r0, r4
 8008828:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800882c:	f000 bdf0 	b.w	8009410 <_fflush_r>
 8008830:	bd10      	pop	{r4, pc}
 8008832:	bf00      	nop
 8008834:	2000584c 	.word	0x2000584c
 8008838:	200058b4 	.word	0x200058b4
 800883c:	2000591c 	.word	0x2000591c

08008840 <global_stdio_init.part.0>:
 8008840:	b510      	push	{r4, lr}
 8008842:	4b0b      	ldr	r3, [pc, #44]	@ (8008870 <global_stdio_init.part.0+0x30>)
 8008844:	4c0b      	ldr	r4, [pc, #44]	@ (8008874 <global_stdio_init.part.0+0x34>)
 8008846:	4a0c      	ldr	r2, [pc, #48]	@ (8008878 <global_stdio_init.part.0+0x38>)
 8008848:	601a      	str	r2, [r3, #0]
 800884a:	4620      	mov	r0, r4
 800884c:	2200      	movs	r2, #0
 800884e:	2104      	movs	r1, #4
 8008850:	f7ff ff94 	bl	800877c <std>
 8008854:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008858:	2201      	movs	r2, #1
 800885a:	2109      	movs	r1, #9
 800885c:	f7ff ff8e 	bl	800877c <std>
 8008860:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008864:	2202      	movs	r2, #2
 8008866:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800886a:	2112      	movs	r1, #18
 800886c:	f7ff bf86 	b.w	800877c <std>
 8008870:	20005984 	.word	0x20005984
 8008874:	2000584c 	.word	0x2000584c
 8008878:	080087e9 	.word	0x080087e9

0800887c <__sfp_lock_acquire>:
 800887c:	4801      	ldr	r0, [pc, #4]	@ (8008884 <__sfp_lock_acquire+0x8>)
 800887e:	f000 b96c 	b.w	8008b5a <__retarget_lock_acquire_recursive>
 8008882:	bf00      	nop
 8008884:	2000598d 	.word	0x2000598d

08008888 <__sfp_lock_release>:
 8008888:	4801      	ldr	r0, [pc, #4]	@ (8008890 <__sfp_lock_release+0x8>)
 800888a:	f000 b967 	b.w	8008b5c <__retarget_lock_release_recursive>
 800888e:	bf00      	nop
 8008890:	2000598d 	.word	0x2000598d

08008894 <__sinit>:
 8008894:	b510      	push	{r4, lr}
 8008896:	4604      	mov	r4, r0
 8008898:	f7ff fff0 	bl	800887c <__sfp_lock_acquire>
 800889c:	6a23      	ldr	r3, [r4, #32]
 800889e:	b11b      	cbz	r3, 80088a8 <__sinit+0x14>
 80088a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088a4:	f7ff bff0 	b.w	8008888 <__sfp_lock_release>
 80088a8:	4b04      	ldr	r3, [pc, #16]	@ (80088bc <__sinit+0x28>)
 80088aa:	6223      	str	r3, [r4, #32]
 80088ac:	4b04      	ldr	r3, [pc, #16]	@ (80088c0 <__sinit+0x2c>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d1f5      	bne.n	80088a0 <__sinit+0xc>
 80088b4:	f7ff ffc4 	bl	8008840 <global_stdio_init.part.0>
 80088b8:	e7f2      	b.n	80088a0 <__sinit+0xc>
 80088ba:	bf00      	nop
 80088bc:	08008801 	.word	0x08008801
 80088c0:	20005984 	.word	0x20005984

080088c4 <_fwalk_sglue>:
 80088c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088c8:	4607      	mov	r7, r0
 80088ca:	4688      	mov	r8, r1
 80088cc:	4614      	mov	r4, r2
 80088ce:	2600      	movs	r6, #0
 80088d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80088d4:	f1b9 0901 	subs.w	r9, r9, #1
 80088d8:	d505      	bpl.n	80088e6 <_fwalk_sglue+0x22>
 80088da:	6824      	ldr	r4, [r4, #0]
 80088dc:	2c00      	cmp	r4, #0
 80088de:	d1f7      	bne.n	80088d0 <_fwalk_sglue+0xc>
 80088e0:	4630      	mov	r0, r6
 80088e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088e6:	89ab      	ldrh	r3, [r5, #12]
 80088e8:	2b01      	cmp	r3, #1
 80088ea:	d907      	bls.n	80088fc <_fwalk_sglue+0x38>
 80088ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80088f0:	3301      	adds	r3, #1
 80088f2:	d003      	beq.n	80088fc <_fwalk_sglue+0x38>
 80088f4:	4629      	mov	r1, r5
 80088f6:	4638      	mov	r0, r7
 80088f8:	47c0      	blx	r8
 80088fa:	4306      	orrs	r6, r0
 80088fc:	3568      	adds	r5, #104	@ 0x68
 80088fe:	e7e9      	b.n	80088d4 <_fwalk_sglue+0x10>

08008900 <iprintf>:
 8008900:	b40f      	push	{r0, r1, r2, r3}
 8008902:	b507      	push	{r0, r1, r2, lr}
 8008904:	4906      	ldr	r1, [pc, #24]	@ (8008920 <iprintf+0x20>)
 8008906:	ab04      	add	r3, sp, #16
 8008908:	6808      	ldr	r0, [r1, #0]
 800890a:	f853 2b04 	ldr.w	r2, [r3], #4
 800890e:	6881      	ldr	r1, [r0, #8]
 8008910:	9301      	str	r3, [sp, #4]
 8008912:	f000 fa55 	bl	8008dc0 <_vfiprintf_r>
 8008916:	b003      	add	sp, #12
 8008918:	f85d eb04 	ldr.w	lr, [sp], #4
 800891c:	b004      	add	sp, #16
 800891e:	4770      	bx	lr
 8008920:	2000001c 	.word	0x2000001c

08008924 <__sread>:
 8008924:	b510      	push	{r4, lr}
 8008926:	460c      	mov	r4, r1
 8008928:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800892c:	f000 f8c6 	bl	8008abc <_read_r>
 8008930:	2800      	cmp	r0, #0
 8008932:	bfab      	itete	ge
 8008934:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008936:	89a3      	ldrhlt	r3, [r4, #12]
 8008938:	181b      	addge	r3, r3, r0
 800893a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800893e:	bfac      	ite	ge
 8008940:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008942:	81a3      	strhlt	r3, [r4, #12]
 8008944:	bd10      	pop	{r4, pc}

08008946 <__swrite>:
 8008946:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800894a:	461f      	mov	r7, r3
 800894c:	898b      	ldrh	r3, [r1, #12]
 800894e:	05db      	lsls	r3, r3, #23
 8008950:	4605      	mov	r5, r0
 8008952:	460c      	mov	r4, r1
 8008954:	4616      	mov	r6, r2
 8008956:	d505      	bpl.n	8008964 <__swrite+0x1e>
 8008958:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800895c:	2302      	movs	r3, #2
 800895e:	2200      	movs	r2, #0
 8008960:	f000 f89a 	bl	8008a98 <_lseek_r>
 8008964:	89a3      	ldrh	r3, [r4, #12]
 8008966:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800896a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800896e:	81a3      	strh	r3, [r4, #12]
 8008970:	4632      	mov	r2, r6
 8008972:	463b      	mov	r3, r7
 8008974:	4628      	mov	r0, r5
 8008976:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800897a:	f000 b8b1 	b.w	8008ae0 <_write_r>

0800897e <__sseek>:
 800897e:	b510      	push	{r4, lr}
 8008980:	460c      	mov	r4, r1
 8008982:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008986:	f000 f887 	bl	8008a98 <_lseek_r>
 800898a:	1c43      	adds	r3, r0, #1
 800898c:	89a3      	ldrh	r3, [r4, #12]
 800898e:	bf15      	itete	ne
 8008990:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008992:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008996:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800899a:	81a3      	strheq	r3, [r4, #12]
 800899c:	bf18      	it	ne
 800899e:	81a3      	strhne	r3, [r4, #12]
 80089a0:	bd10      	pop	{r4, pc}

080089a2 <__sclose>:
 80089a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089a6:	f000 b809 	b.w	80089bc <_close_r>

080089aa <memset>:
 80089aa:	4402      	add	r2, r0
 80089ac:	4603      	mov	r3, r0
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d100      	bne.n	80089b4 <memset+0xa>
 80089b2:	4770      	bx	lr
 80089b4:	f803 1b01 	strb.w	r1, [r3], #1
 80089b8:	e7f9      	b.n	80089ae <memset+0x4>
	...

080089bc <_close_r>:
 80089bc:	b538      	push	{r3, r4, r5, lr}
 80089be:	4d06      	ldr	r5, [pc, #24]	@ (80089d8 <_close_r+0x1c>)
 80089c0:	2300      	movs	r3, #0
 80089c2:	4604      	mov	r4, r0
 80089c4:	4608      	mov	r0, r1
 80089c6:	602b      	str	r3, [r5, #0]
 80089c8:	f7f8 fce7 	bl	800139a <_close>
 80089cc:	1c43      	adds	r3, r0, #1
 80089ce:	d102      	bne.n	80089d6 <_close_r+0x1a>
 80089d0:	682b      	ldr	r3, [r5, #0]
 80089d2:	b103      	cbz	r3, 80089d6 <_close_r+0x1a>
 80089d4:	6023      	str	r3, [r4, #0]
 80089d6:	bd38      	pop	{r3, r4, r5, pc}
 80089d8:	20005988 	.word	0x20005988

080089dc <_reclaim_reent>:
 80089dc:	4b2d      	ldr	r3, [pc, #180]	@ (8008a94 <_reclaim_reent+0xb8>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	4283      	cmp	r3, r0
 80089e2:	b570      	push	{r4, r5, r6, lr}
 80089e4:	4604      	mov	r4, r0
 80089e6:	d053      	beq.n	8008a90 <_reclaim_reent+0xb4>
 80089e8:	69c3      	ldr	r3, [r0, #28]
 80089ea:	b31b      	cbz	r3, 8008a34 <_reclaim_reent+0x58>
 80089ec:	68db      	ldr	r3, [r3, #12]
 80089ee:	b163      	cbz	r3, 8008a0a <_reclaim_reent+0x2e>
 80089f0:	2500      	movs	r5, #0
 80089f2:	69e3      	ldr	r3, [r4, #28]
 80089f4:	68db      	ldr	r3, [r3, #12]
 80089f6:	5959      	ldr	r1, [r3, r5]
 80089f8:	b9b1      	cbnz	r1, 8008a28 <_reclaim_reent+0x4c>
 80089fa:	3504      	adds	r5, #4
 80089fc:	2d80      	cmp	r5, #128	@ 0x80
 80089fe:	d1f8      	bne.n	80089f2 <_reclaim_reent+0x16>
 8008a00:	69e3      	ldr	r3, [r4, #28]
 8008a02:	4620      	mov	r0, r4
 8008a04:	68d9      	ldr	r1, [r3, #12]
 8008a06:	f000 f8b9 	bl	8008b7c <_free_r>
 8008a0a:	69e3      	ldr	r3, [r4, #28]
 8008a0c:	6819      	ldr	r1, [r3, #0]
 8008a0e:	b111      	cbz	r1, 8008a16 <_reclaim_reent+0x3a>
 8008a10:	4620      	mov	r0, r4
 8008a12:	f000 f8b3 	bl	8008b7c <_free_r>
 8008a16:	69e3      	ldr	r3, [r4, #28]
 8008a18:	689d      	ldr	r5, [r3, #8]
 8008a1a:	b15d      	cbz	r5, 8008a34 <_reclaim_reent+0x58>
 8008a1c:	4629      	mov	r1, r5
 8008a1e:	4620      	mov	r0, r4
 8008a20:	682d      	ldr	r5, [r5, #0]
 8008a22:	f000 f8ab 	bl	8008b7c <_free_r>
 8008a26:	e7f8      	b.n	8008a1a <_reclaim_reent+0x3e>
 8008a28:	680e      	ldr	r6, [r1, #0]
 8008a2a:	4620      	mov	r0, r4
 8008a2c:	f000 f8a6 	bl	8008b7c <_free_r>
 8008a30:	4631      	mov	r1, r6
 8008a32:	e7e1      	b.n	80089f8 <_reclaim_reent+0x1c>
 8008a34:	6961      	ldr	r1, [r4, #20]
 8008a36:	b111      	cbz	r1, 8008a3e <_reclaim_reent+0x62>
 8008a38:	4620      	mov	r0, r4
 8008a3a:	f000 f89f 	bl	8008b7c <_free_r>
 8008a3e:	69e1      	ldr	r1, [r4, #28]
 8008a40:	b111      	cbz	r1, 8008a48 <_reclaim_reent+0x6c>
 8008a42:	4620      	mov	r0, r4
 8008a44:	f000 f89a 	bl	8008b7c <_free_r>
 8008a48:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008a4a:	b111      	cbz	r1, 8008a52 <_reclaim_reent+0x76>
 8008a4c:	4620      	mov	r0, r4
 8008a4e:	f000 f895 	bl	8008b7c <_free_r>
 8008a52:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008a54:	b111      	cbz	r1, 8008a5c <_reclaim_reent+0x80>
 8008a56:	4620      	mov	r0, r4
 8008a58:	f000 f890 	bl	8008b7c <_free_r>
 8008a5c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8008a5e:	b111      	cbz	r1, 8008a66 <_reclaim_reent+0x8a>
 8008a60:	4620      	mov	r0, r4
 8008a62:	f000 f88b 	bl	8008b7c <_free_r>
 8008a66:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8008a68:	b111      	cbz	r1, 8008a70 <_reclaim_reent+0x94>
 8008a6a:	4620      	mov	r0, r4
 8008a6c:	f000 f886 	bl	8008b7c <_free_r>
 8008a70:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008a72:	b111      	cbz	r1, 8008a7a <_reclaim_reent+0x9e>
 8008a74:	4620      	mov	r0, r4
 8008a76:	f000 f881 	bl	8008b7c <_free_r>
 8008a7a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008a7c:	b111      	cbz	r1, 8008a84 <_reclaim_reent+0xa8>
 8008a7e:	4620      	mov	r0, r4
 8008a80:	f000 f87c 	bl	8008b7c <_free_r>
 8008a84:	6a23      	ldr	r3, [r4, #32]
 8008a86:	b11b      	cbz	r3, 8008a90 <_reclaim_reent+0xb4>
 8008a88:	4620      	mov	r0, r4
 8008a8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008a8e:	4718      	bx	r3
 8008a90:	bd70      	pop	{r4, r5, r6, pc}
 8008a92:	bf00      	nop
 8008a94:	2000001c 	.word	0x2000001c

08008a98 <_lseek_r>:
 8008a98:	b538      	push	{r3, r4, r5, lr}
 8008a9a:	4d07      	ldr	r5, [pc, #28]	@ (8008ab8 <_lseek_r+0x20>)
 8008a9c:	4604      	mov	r4, r0
 8008a9e:	4608      	mov	r0, r1
 8008aa0:	4611      	mov	r1, r2
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	602a      	str	r2, [r5, #0]
 8008aa6:	461a      	mov	r2, r3
 8008aa8:	f7f8 fc9e 	bl	80013e8 <_lseek>
 8008aac:	1c43      	adds	r3, r0, #1
 8008aae:	d102      	bne.n	8008ab6 <_lseek_r+0x1e>
 8008ab0:	682b      	ldr	r3, [r5, #0]
 8008ab2:	b103      	cbz	r3, 8008ab6 <_lseek_r+0x1e>
 8008ab4:	6023      	str	r3, [r4, #0]
 8008ab6:	bd38      	pop	{r3, r4, r5, pc}
 8008ab8:	20005988 	.word	0x20005988

08008abc <_read_r>:
 8008abc:	b538      	push	{r3, r4, r5, lr}
 8008abe:	4d07      	ldr	r5, [pc, #28]	@ (8008adc <_read_r+0x20>)
 8008ac0:	4604      	mov	r4, r0
 8008ac2:	4608      	mov	r0, r1
 8008ac4:	4611      	mov	r1, r2
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	602a      	str	r2, [r5, #0]
 8008aca:	461a      	mov	r2, r3
 8008acc:	f7f8 fc2c 	bl	8001328 <_read>
 8008ad0:	1c43      	adds	r3, r0, #1
 8008ad2:	d102      	bne.n	8008ada <_read_r+0x1e>
 8008ad4:	682b      	ldr	r3, [r5, #0]
 8008ad6:	b103      	cbz	r3, 8008ada <_read_r+0x1e>
 8008ad8:	6023      	str	r3, [r4, #0]
 8008ada:	bd38      	pop	{r3, r4, r5, pc}
 8008adc:	20005988 	.word	0x20005988

08008ae0 <_write_r>:
 8008ae0:	b538      	push	{r3, r4, r5, lr}
 8008ae2:	4d07      	ldr	r5, [pc, #28]	@ (8008b00 <_write_r+0x20>)
 8008ae4:	4604      	mov	r4, r0
 8008ae6:	4608      	mov	r0, r1
 8008ae8:	4611      	mov	r1, r2
 8008aea:	2200      	movs	r2, #0
 8008aec:	602a      	str	r2, [r5, #0]
 8008aee:	461a      	mov	r2, r3
 8008af0:	f7f8 fc37 	bl	8001362 <_write>
 8008af4:	1c43      	adds	r3, r0, #1
 8008af6:	d102      	bne.n	8008afe <_write_r+0x1e>
 8008af8:	682b      	ldr	r3, [r5, #0]
 8008afa:	b103      	cbz	r3, 8008afe <_write_r+0x1e>
 8008afc:	6023      	str	r3, [r4, #0]
 8008afe:	bd38      	pop	{r3, r4, r5, pc}
 8008b00:	20005988 	.word	0x20005988

08008b04 <__errno>:
 8008b04:	4b01      	ldr	r3, [pc, #4]	@ (8008b0c <__errno+0x8>)
 8008b06:	6818      	ldr	r0, [r3, #0]
 8008b08:	4770      	bx	lr
 8008b0a:	bf00      	nop
 8008b0c:	2000001c 	.word	0x2000001c

08008b10 <__libc_init_array>:
 8008b10:	b570      	push	{r4, r5, r6, lr}
 8008b12:	4d0d      	ldr	r5, [pc, #52]	@ (8008b48 <__libc_init_array+0x38>)
 8008b14:	4c0d      	ldr	r4, [pc, #52]	@ (8008b4c <__libc_init_array+0x3c>)
 8008b16:	1b64      	subs	r4, r4, r5
 8008b18:	10a4      	asrs	r4, r4, #2
 8008b1a:	2600      	movs	r6, #0
 8008b1c:	42a6      	cmp	r6, r4
 8008b1e:	d109      	bne.n	8008b34 <__libc_init_array+0x24>
 8008b20:	4d0b      	ldr	r5, [pc, #44]	@ (8008b50 <__libc_init_array+0x40>)
 8008b22:	4c0c      	ldr	r4, [pc, #48]	@ (8008b54 <__libc_init_array+0x44>)
 8008b24:	f000 fdc4 	bl	80096b0 <_init>
 8008b28:	1b64      	subs	r4, r4, r5
 8008b2a:	10a4      	asrs	r4, r4, #2
 8008b2c:	2600      	movs	r6, #0
 8008b2e:	42a6      	cmp	r6, r4
 8008b30:	d105      	bne.n	8008b3e <__libc_init_array+0x2e>
 8008b32:	bd70      	pop	{r4, r5, r6, pc}
 8008b34:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b38:	4798      	blx	r3
 8008b3a:	3601      	adds	r6, #1
 8008b3c:	e7ee      	b.n	8008b1c <__libc_init_array+0xc>
 8008b3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b42:	4798      	blx	r3
 8008b44:	3601      	adds	r6, #1
 8008b46:	e7f2      	b.n	8008b2e <__libc_init_array+0x1e>
 8008b48:	08009774 	.word	0x08009774
 8008b4c:	08009774 	.word	0x08009774
 8008b50:	08009774 	.word	0x08009774
 8008b54:	08009778 	.word	0x08009778

08008b58 <__retarget_lock_init_recursive>:
 8008b58:	4770      	bx	lr

08008b5a <__retarget_lock_acquire_recursive>:
 8008b5a:	4770      	bx	lr

08008b5c <__retarget_lock_release_recursive>:
 8008b5c:	4770      	bx	lr

08008b5e <memcpy>:
 8008b5e:	440a      	add	r2, r1
 8008b60:	4291      	cmp	r1, r2
 8008b62:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b66:	d100      	bne.n	8008b6a <memcpy+0xc>
 8008b68:	4770      	bx	lr
 8008b6a:	b510      	push	{r4, lr}
 8008b6c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b70:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b74:	4291      	cmp	r1, r2
 8008b76:	d1f9      	bne.n	8008b6c <memcpy+0xe>
 8008b78:	bd10      	pop	{r4, pc}
	...

08008b7c <_free_r>:
 8008b7c:	b538      	push	{r3, r4, r5, lr}
 8008b7e:	4605      	mov	r5, r0
 8008b80:	2900      	cmp	r1, #0
 8008b82:	d041      	beq.n	8008c08 <_free_r+0x8c>
 8008b84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b88:	1f0c      	subs	r4, r1, #4
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	bfb8      	it	lt
 8008b8e:	18e4      	addlt	r4, r4, r3
 8008b90:	f000 f8e0 	bl	8008d54 <__malloc_lock>
 8008b94:	4a1d      	ldr	r2, [pc, #116]	@ (8008c0c <_free_r+0x90>)
 8008b96:	6813      	ldr	r3, [r2, #0]
 8008b98:	b933      	cbnz	r3, 8008ba8 <_free_r+0x2c>
 8008b9a:	6063      	str	r3, [r4, #4]
 8008b9c:	6014      	str	r4, [r2, #0]
 8008b9e:	4628      	mov	r0, r5
 8008ba0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ba4:	f000 b8dc 	b.w	8008d60 <__malloc_unlock>
 8008ba8:	42a3      	cmp	r3, r4
 8008baa:	d908      	bls.n	8008bbe <_free_r+0x42>
 8008bac:	6820      	ldr	r0, [r4, #0]
 8008bae:	1821      	adds	r1, r4, r0
 8008bb0:	428b      	cmp	r3, r1
 8008bb2:	bf01      	itttt	eq
 8008bb4:	6819      	ldreq	r1, [r3, #0]
 8008bb6:	685b      	ldreq	r3, [r3, #4]
 8008bb8:	1809      	addeq	r1, r1, r0
 8008bba:	6021      	streq	r1, [r4, #0]
 8008bbc:	e7ed      	b.n	8008b9a <_free_r+0x1e>
 8008bbe:	461a      	mov	r2, r3
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	b10b      	cbz	r3, 8008bc8 <_free_r+0x4c>
 8008bc4:	42a3      	cmp	r3, r4
 8008bc6:	d9fa      	bls.n	8008bbe <_free_r+0x42>
 8008bc8:	6811      	ldr	r1, [r2, #0]
 8008bca:	1850      	adds	r0, r2, r1
 8008bcc:	42a0      	cmp	r0, r4
 8008bce:	d10b      	bne.n	8008be8 <_free_r+0x6c>
 8008bd0:	6820      	ldr	r0, [r4, #0]
 8008bd2:	4401      	add	r1, r0
 8008bd4:	1850      	adds	r0, r2, r1
 8008bd6:	4283      	cmp	r3, r0
 8008bd8:	6011      	str	r1, [r2, #0]
 8008bda:	d1e0      	bne.n	8008b9e <_free_r+0x22>
 8008bdc:	6818      	ldr	r0, [r3, #0]
 8008bde:	685b      	ldr	r3, [r3, #4]
 8008be0:	6053      	str	r3, [r2, #4]
 8008be2:	4408      	add	r0, r1
 8008be4:	6010      	str	r0, [r2, #0]
 8008be6:	e7da      	b.n	8008b9e <_free_r+0x22>
 8008be8:	d902      	bls.n	8008bf0 <_free_r+0x74>
 8008bea:	230c      	movs	r3, #12
 8008bec:	602b      	str	r3, [r5, #0]
 8008bee:	e7d6      	b.n	8008b9e <_free_r+0x22>
 8008bf0:	6820      	ldr	r0, [r4, #0]
 8008bf2:	1821      	adds	r1, r4, r0
 8008bf4:	428b      	cmp	r3, r1
 8008bf6:	bf04      	itt	eq
 8008bf8:	6819      	ldreq	r1, [r3, #0]
 8008bfa:	685b      	ldreq	r3, [r3, #4]
 8008bfc:	6063      	str	r3, [r4, #4]
 8008bfe:	bf04      	itt	eq
 8008c00:	1809      	addeq	r1, r1, r0
 8008c02:	6021      	streq	r1, [r4, #0]
 8008c04:	6054      	str	r4, [r2, #4]
 8008c06:	e7ca      	b.n	8008b9e <_free_r+0x22>
 8008c08:	bd38      	pop	{r3, r4, r5, pc}
 8008c0a:	bf00      	nop
 8008c0c:	20005994 	.word	0x20005994

08008c10 <sbrk_aligned>:
 8008c10:	b570      	push	{r4, r5, r6, lr}
 8008c12:	4e0f      	ldr	r6, [pc, #60]	@ (8008c50 <sbrk_aligned+0x40>)
 8008c14:	460c      	mov	r4, r1
 8008c16:	6831      	ldr	r1, [r6, #0]
 8008c18:	4605      	mov	r5, r0
 8008c1a:	b911      	cbnz	r1, 8008c22 <sbrk_aligned+0x12>
 8008c1c:	f000 fcb4 	bl	8009588 <_sbrk_r>
 8008c20:	6030      	str	r0, [r6, #0]
 8008c22:	4621      	mov	r1, r4
 8008c24:	4628      	mov	r0, r5
 8008c26:	f000 fcaf 	bl	8009588 <_sbrk_r>
 8008c2a:	1c43      	adds	r3, r0, #1
 8008c2c:	d103      	bne.n	8008c36 <sbrk_aligned+0x26>
 8008c2e:	f04f 34ff 	mov.w	r4, #4294967295
 8008c32:	4620      	mov	r0, r4
 8008c34:	bd70      	pop	{r4, r5, r6, pc}
 8008c36:	1cc4      	adds	r4, r0, #3
 8008c38:	f024 0403 	bic.w	r4, r4, #3
 8008c3c:	42a0      	cmp	r0, r4
 8008c3e:	d0f8      	beq.n	8008c32 <sbrk_aligned+0x22>
 8008c40:	1a21      	subs	r1, r4, r0
 8008c42:	4628      	mov	r0, r5
 8008c44:	f000 fca0 	bl	8009588 <_sbrk_r>
 8008c48:	3001      	adds	r0, #1
 8008c4a:	d1f2      	bne.n	8008c32 <sbrk_aligned+0x22>
 8008c4c:	e7ef      	b.n	8008c2e <sbrk_aligned+0x1e>
 8008c4e:	bf00      	nop
 8008c50:	20005990 	.word	0x20005990

08008c54 <_malloc_r>:
 8008c54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c58:	1ccd      	adds	r5, r1, #3
 8008c5a:	f025 0503 	bic.w	r5, r5, #3
 8008c5e:	3508      	adds	r5, #8
 8008c60:	2d0c      	cmp	r5, #12
 8008c62:	bf38      	it	cc
 8008c64:	250c      	movcc	r5, #12
 8008c66:	2d00      	cmp	r5, #0
 8008c68:	4606      	mov	r6, r0
 8008c6a:	db01      	blt.n	8008c70 <_malloc_r+0x1c>
 8008c6c:	42a9      	cmp	r1, r5
 8008c6e:	d904      	bls.n	8008c7a <_malloc_r+0x26>
 8008c70:	230c      	movs	r3, #12
 8008c72:	6033      	str	r3, [r6, #0]
 8008c74:	2000      	movs	r0, #0
 8008c76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c7a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008d50 <_malloc_r+0xfc>
 8008c7e:	f000 f869 	bl	8008d54 <__malloc_lock>
 8008c82:	f8d8 3000 	ldr.w	r3, [r8]
 8008c86:	461c      	mov	r4, r3
 8008c88:	bb44      	cbnz	r4, 8008cdc <_malloc_r+0x88>
 8008c8a:	4629      	mov	r1, r5
 8008c8c:	4630      	mov	r0, r6
 8008c8e:	f7ff ffbf 	bl	8008c10 <sbrk_aligned>
 8008c92:	1c43      	adds	r3, r0, #1
 8008c94:	4604      	mov	r4, r0
 8008c96:	d158      	bne.n	8008d4a <_malloc_r+0xf6>
 8008c98:	f8d8 4000 	ldr.w	r4, [r8]
 8008c9c:	4627      	mov	r7, r4
 8008c9e:	2f00      	cmp	r7, #0
 8008ca0:	d143      	bne.n	8008d2a <_malloc_r+0xd6>
 8008ca2:	2c00      	cmp	r4, #0
 8008ca4:	d04b      	beq.n	8008d3e <_malloc_r+0xea>
 8008ca6:	6823      	ldr	r3, [r4, #0]
 8008ca8:	4639      	mov	r1, r7
 8008caa:	4630      	mov	r0, r6
 8008cac:	eb04 0903 	add.w	r9, r4, r3
 8008cb0:	f000 fc6a 	bl	8009588 <_sbrk_r>
 8008cb4:	4581      	cmp	r9, r0
 8008cb6:	d142      	bne.n	8008d3e <_malloc_r+0xea>
 8008cb8:	6821      	ldr	r1, [r4, #0]
 8008cba:	1a6d      	subs	r5, r5, r1
 8008cbc:	4629      	mov	r1, r5
 8008cbe:	4630      	mov	r0, r6
 8008cc0:	f7ff ffa6 	bl	8008c10 <sbrk_aligned>
 8008cc4:	3001      	adds	r0, #1
 8008cc6:	d03a      	beq.n	8008d3e <_malloc_r+0xea>
 8008cc8:	6823      	ldr	r3, [r4, #0]
 8008cca:	442b      	add	r3, r5
 8008ccc:	6023      	str	r3, [r4, #0]
 8008cce:	f8d8 3000 	ldr.w	r3, [r8]
 8008cd2:	685a      	ldr	r2, [r3, #4]
 8008cd4:	bb62      	cbnz	r2, 8008d30 <_malloc_r+0xdc>
 8008cd6:	f8c8 7000 	str.w	r7, [r8]
 8008cda:	e00f      	b.n	8008cfc <_malloc_r+0xa8>
 8008cdc:	6822      	ldr	r2, [r4, #0]
 8008cde:	1b52      	subs	r2, r2, r5
 8008ce0:	d420      	bmi.n	8008d24 <_malloc_r+0xd0>
 8008ce2:	2a0b      	cmp	r2, #11
 8008ce4:	d917      	bls.n	8008d16 <_malloc_r+0xc2>
 8008ce6:	1961      	adds	r1, r4, r5
 8008ce8:	42a3      	cmp	r3, r4
 8008cea:	6025      	str	r5, [r4, #0]
 8008cec:	bf18      	it	ne
 8008cee:	6059      	strne	r1, [r3, #4]
 8008cf0:	6863      	ldr	r3, [r4, #4]
 8008cf2:	bf08      	it	eq
 8008cf4:	f8c8 1000 	streq.w	r1, [r8]
 8008cf8:	5162      	str	r2, [r4, r5]
 8008cfa:	604b      	str	r3, [r1, #4]
 8008cfc:	4630      	mov	r0, r6
 8008cfe:	f000 f82f 	bl	8008d60 <__malloc_unlock>
 8008d02:	f104 000b 	add.w	r0, r4, #11
 8008d06:	1d23      	adds	r3, r4, #4
 8008d08:	f020 0007 	bic.w	r0, r0, #7
 8008d0c:	1ac2      	subs	r2, r0, r3
 8008d0e:	bf1c      	itt	ne
 8008d10:	1a1b      	subne	r3, r3, r0
 8008d12:	50a3      	strne	r3, [r4, r2]
 8008d14:	e7af      	b.n	8008c76 <_malloc_r+0x22>
 8008d16:	6862      	ldr	r2, [r4, #4]
 8008d18:	42a3      	cmp	r3, r4
 8008d1a:	bf0c      	ite	eq
 8008d1c:	f8c8 2000 	streq.w	r2, [r8]
 8008d20:	605a      	strne	r2, [r3, #4]
 8008d22:	e7eb      	b.n	8008cfc <_malloc_r+0xa8>
 8008d24:	4623      	mov	r3, r4
 8008d26:	6864      	ldr	r4, [r4, #4]
 8008d28:	e7ae      	b.n	8008c88 <_malloc_r+0x34>
 8008d2a:	463c      	mov	r4, r7
 8008d2c:	687f      	ldr	r7, [r7, #4]
 8008d2e:	e7b6      	b.n	8008c9e <_malloc_r+0x4a>
 8008d30:	461a      	mov	r2, r3
 8008d32:	685b      	ldr	r3, [r3, #4]
 8008d34:	42a3      	cmp	r3, r4
 8008d36:	d1fb      	bne.n	8008d30 <_malloc_r+0xdc>
 8008d38:	2300      	movs	r3, #0
 8008d3a:	6053      	str	r3, [r2, #4]
 8008d3c:	e7de      	b.n	8008cfc <_malloc_r+0xa8>
 8008d3e:	230c      	movs	r3, #12
 8008d40:	6033      	str	r3, [r6, #0]
 8008d42:	4630      	mov	r0, r6
 8008d44:	f000 f80c 	bl	8008d60 <__malloc_unlock>
 8008d48:	e794      	b.n	8008c74 <_malloc_r+0x20>
 8008d4a:	6005      	str	r5, [r0, #0]
 8008d4c:	e7d6      	b.n	8008cfc <_malloc_r+0xa8>
 8008d4e:	bf00      	nop
 8008d50:	20005994 	.word	0x20005994

08008d54 <__malloc_lock>:
 8008d54:	4801      	ldr	r0, [pc, #4]	@ (8008d5c <__malloc_lock+0x8>)
 8008d56:	f7ff bf00 	b.w	8008b5a <__retarget_lock_acquire_recursive>
 8008d5a:	bf00      	nop
 8008d5c:	2000598c 	.word	0x2000598c

08008d60 <__malloc_unlock>:
 8008d60:	4801      	ldr	r0, [pc, #4]	@ (8008d68 <__malloc_unlock+0x8>)
 8008d62:	f7ff befb 	b.w	8008b5c <__retarget_lock_release_recursive>
 8008d66:	bf00      	nop
 8008d68:	2000598c 	.word	0x2000598c

08008d6c <__sfputc_r>:
 8008d6c:	6893      	ldr	r3, [r2, #8]
 8008d6e:	3b01      	subs	r3, #1
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	b410      	push	{r4}
 8008d74:	6093      	str	r3, [r2, #8]
 8008d76:	da08      	bge.n	8008d8a <__sfputc_r+0x1e>
 8008d78:	6994      	ldr	r4, [r2, #24]
 8008d7a:	42a3      	cmp	r3, r4
 8008d7c:	db01      	blt.n	8008d82 <__sfputc_r+0x16>
 8008d7e:	290a      	cmp	r1, #10
 8008d80:	d103      	bne.n	8008d8a <__sfputc_r+0x1e>
 8008d82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d86:	f000 bb6b 	b.w	8009460 <__swbuf_r>
 8008d8a:	6813      	ldr	r3, [r2, #0]
 8008d8c:	1c58      	adds	r0, r3, #1
 8008d8e:	6010      	str	r0, [r2, #0]
 8008d90:	7019      	strb	r1, [r3, #0]
 8008d92:	4608      	mov	r0, r1
 8008d94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d98:	4770      	bx	lr

08008d9a <__sfputs_r>:
 8008d9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d9c:	4606      	mov	r6, r0
 8008d9e:	460f      	mov	r7, r1
 8008da0:	4614      	mov	r4, r2
 8008da2:	18d5      	adds	r5, r2, r3
 8008da4:	42ac      	cmp	r4, r5
 8008da6:	d101      	bne.n	8008dac <__sfputs_r+0x12>
 8008da8:	2000      	movs	r0, #0
 8008daa:	e007      	b.n	8008dbc <__sfputs_r+0x22>
 8008dac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008db0:	463a      	mov	r2, r7
 8008db2:	4630      	mov	r0, r6
 8008db4:	f7ff ffda 	bl	8008d6c <__sfputc_r>
 8008db8:	1c43      	adds	r3, r0, #1
 8008dba:	d1f3      	bne.n	8008da4 <__sfputs_r+0xa>
 8008dbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008dc0 <_vfiprintf_r>:
 8008dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dc4:	460d      	mov	r5, r1
 8008dc6:	b09d      	sub	sp, #116	@ 0x74
 8008dc8:	4614      	mov	r4, r2
 8008dca:	4698      	mov	r8, r3
 8008dcc:	4606      	mov	r6, r0
 8008dce:	b118      	cbz	r0, 8008dd8 <_vfiprintf_r+0x18>
 8008dd0:	6a03      	ldr	r3, [r0, #32]
 8008dd2:	b90b      	cbnz	r3, 8008dd8 <_vfiprintf_r+0x18>
 8008dd4:	f7ff fd5e 	bl	8008894 <__sinit>
 8008dd8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008dda:	07d9      	lsls	r1, r3, #31
 8008ddc:	d405      	bmi.n	8008dea <_vfiprintf_r+0x2a>
 8008dde:	89ab      	ldrh	r3, [r5, #12]
 8008de0:	059a      	lsls	r2, r3, #22
 8008de2:	d402      	bmi.n	8008dea <_vfiprintf_r+0x2a>
 8008de4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008de6:	f7ff feb8 	bl	8008b5a <__retarget_lock_acquire_recursive>
 8008dea:	89ab      	ldrh	r3, [r5, #12]
 8008dec:	071b      	lsls	r3, r3, #28
 8008dee:	d501      	bpl.n	8008df4 <_vfiprintf_r+0x34>
 8008df0:	692b      	ldr	r3, [r5, #16]
 8008df2:	b99b      	cbnz	r3, 8008e1c <_vfiprintf_r+0x5c>
 8008df4:	4629      	mov	r1, r5
 8008df6:	4630      	mov	r0, r6
 8008df8:	f000 fb70 	bl	80094dc <__swsetup_r>
 8008dfc:	b170      	cbz	r0, 8008e1c <_vfiprintf_r+0x5c>
 8008dfe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008e00:	07dc      	lsls	r4, r3, #31
 8008e02:	d504      	bpl.n	8008e0e <_vfiprintf_r+0x4e>
 8008e04:	f04f 30ff 	mov.w	r0, #4294967295
 8008e08:	b01d      	add	sp, #116	@ 0x74
 8008e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e0e:	89ab      	ldrh	r3, [r5, #12]
 8008e10:	0598      	lsls	r0, r3, #22
 8008e12:	d4f7      	bmi.n	8008e04 <_vfiprintf_r+0x44>
 8008e14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008e16:	f7ff fea1 	bl	8008b5c <__retarget_lock_release_recursive>
 8008e1a:	e7f3      	b.n	8008e04 <_vfiprintf_r+0x44>
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e20:	2320      	movs	r3, #32
 8008e22:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008e26:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e2a:	2330      	movs	r3, #48	@ 0x30
 8008e2c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008fdc <_vfiprintf_r+0x21c>
 8008e30:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008e34:	f04f 0901 	mov.w	r9, #1
 8008e38:	4623      	mov	r3, r4
 8008e3a:	469a      	mov	sl, r3
 8008e3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e40:	b10a      	cbz	r2, 8008e46 <_vfiprintf_r+0x86>
 8008e42:	2a25      	cmp	r2, #37	@ 0x25
 8008e44:	d1f9      	bne.n	8008e3a <_vfiprintf_r+0x7a>
 8008e46:	ebba 0b04 	subs.w	fp, sl, r4
 8008e4a:	d00b      	beq.n	8008e64 <_vfiprintf_r+0xa4>
 8008e4c:	465b      	mov	r3, fp
 8008e4e:	4622      	mov	r2, r4
 8008e50:	4629      	mov	r1, r5
 8008e52:	4630      	mov	r0, r6
 8008e54:	f7ff ffa1 	bl	8008d9a <__sfputs_r>
 8008e58:	3001      	adds	r0, #1
 8008e5a:	f000 80a7 	beq.w	8008fac <_vfiprintf_r+0x1ec>
 8008e5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008e60:	445a      	add	r2, fp
 8008e62:	9209      	str	r2, [sp, #36]	@ 0x24
 8008e64:	f89a 3000 	ldrb.w	r3, [sl]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	f000 809f 	beq.w	8008fac <_vfiprintf_r+0x1ec>
 8008e6e:	2300      	movs	r3, #0
 8008e70:	f04f 32ff 	mov.w	r2, #4294967295
 8008e74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e78:	f10a 0a01 	add.w	sl, sl, #1
 8008e7c:	9304      	str	r3, [sp, #16]
 8008e7e:	9307      	str	r3, [sp, #28]
 8008e80:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008e84:	931a      	str	r3, [sp, #104]	@ 0x68
 8008e86:	4654      	mov	r4, sl
 8008e88:	2205      	movs	r2, #5
 8008e8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e8e:	4853      	ldr	r0, [pc, #332]	@ (8008fdc <_vfiprintf_r+0x21c>)
 8008e90:	f7f7 f9d6 	bl	8000240 <memchr>
 8008e94:	9a04      	ldr	r2, [sp, #16]
 8008e96:	b9d8      	cbnz	r0, 8008ed0 <_vfiprintf_r+0x110>
 8008e98:	06d1      	lsls	r1, r2, #27
 8008e9a:	bf44      	itt	mi
 8008e9c:	2320      	movmi	r3, #32
 8008e9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008ea2:	0713      	lsls	r3, r2, #28
 8008ea4:	bf44      	itt	mi
 8008ea6:	232b      	movmi	r3, #43	@ 0x2b
 8008ea8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008eac:	f89a 3000 	ldrb.w	r3, [sl]
 8008eb0:	2b2a      	cmp	r3, #42	@ 0x2a
 8008eb2:	d015      	beq.n	8008ee0 <_vfiprintf_r+0x120>
 8008eb4:	9a07      	ldr	r2, [sp, #28]
 8008eb6:	4654      	mov	r4, sl
 8008eb8:	2000      	movs	r0, #0
 8008eba:	f04f 0c0a 	mov.w	ip, #10
 8008ebe:	4621      	mov	r1, r4
 8008ec0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ec4:	3b30      	subs	r3, #48	@ 0x30
 8008ec6:	2b09      	cmp	r3, #9
 8008ec8:	d94b      	bls.n	8008f62 <_vfiprintf_r+0x1a2>
 8008eca:	b1b0      	cbz	r0, 8008efa <_vfiprintf_r+0x13a>
 8008ecc:	9207      	str	r2, [sp, #28]
 8008ece:	e014      	b.n	8008efa <_vfiprintf_r+0x13a>
 8008ed0:	eba0 0308 	sub.w	r3, r0, r8
 8008ed4:	fa09 f303 	lsl.w	r3, r9, r3
 8008ed8:	4313      	orrs	r3, r2
 8008eda:	9304      	str	r3, [sp, #16]
 8008edc:	46a2      	mov	sl, r4
 8008ede:	e7d2      	b.n	8008e86 <_vfiprintf_r+0xc6>
 8008ee0:	9b03      	ldr	r3, [sp, #12]
 8008ee2:	1d19      	adds	r1, r3, #4
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	9103      	str	r1, [sp, #12]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	bfbb      	ittet	lt
 8008eec:	425b      	neglt	r3, r3
 8008eee:	f042 0202 	orrlt.w	r2, r2, #2
 8008ef2:	9307      	strge	r3, [sp, #28]
 8008ef4:	9307      	strlt	r3, [sp, #28]
 8008ef6:	bfb8      	it	lt
 8008ef8:	9204      	strlt	r2, [sp, #16]
 8008efa:	7823      	ldrb	r3, [r4, #0]
 8008efc:	2b2e      	cmp	r3, #46	@ 0x2e
 8008efe:	d10a      	bne.n	8008f16 <_vfiprintf_r+0x156>
 8008f00:	7863      	ldrb	r3, [r4, #1]
 8008f02:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f04:	d132      	bne.n	8008f6c <_vfiprintf_r+0x1ac>
 8008f06:	9b03      	ldr	r3, [sp, #12]
 8008f08:	1d1a      	adds	r2, r3, #4
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	9203      	str	r2, [sp, #12]
 8008f0e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008f12:	3402      	adds	r4, #2
 8008f14:	9305      	str	r3, [sp, #20]
 8008f16:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008fec <_vfiprintf_r+0x22c>
 8008f1a:	7821      	ldrb	r1, [r4, #0]
 8008f1c:	2203      	movs	r2, #3
 8008f1e:	4650      	mov	r0, sl
 8008f20:	f7f7 f98e 	bl	8000240 <memchr>
 8008f24:	b138      	cbz	r0, 8008f36 <_vfiprintf_r+0x176>
 8008f26:	9b04      	ldr	r3, [sp, #16]
 8008f28:	eba0 000a 	sub.w	r0, r0, sl
 8008f2c:	2240      	movs	r2, #64	@ 0x40
 8008f2e:	4082      	lsls	r2, r0
 8008f30:	4313      	orrs	r3, r2
 8008f32:	3401      	adds	r4, #1
 8008f34:	9304      	str	r3, [sp, #16]
 8008f36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f3a:	4829      	ldr	r0, [pc, #164]	@ (8008fe0 <_vfiprintf_r+0x220>)
 8008f3c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008f40:	2206      	movs	r2, #6
 8008f42:	f7f7 f97d 	bl	8000240 <memchr>
 8008f46:	2800      	cmp	r0, #0
 8008f48:	d03f      	beq.n	8008fca <_vfiprintf_r+0x20a>
 8008f4a:	4b26      	ldr	r3, [pc, #152]	@ (8008fe4 <_vfiprintf_r+0x224>)
 8008f4c:	bb1b      	cbnz	r3, 8008f96 <_vfiprintf_r+0x1d6>
 8008f4e:	9b03      	ldr	r3, [sp, #12]
 8008f50:	3307      	adds	r3, #7
 8008f52:	f023 0307 	bic.w	r3, r3, #7
 8008f56:	3308      	adds	r3, #8
 8008f58:	9303      	str	r3, [sp, #12]
 8008f5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f5c:	443b      	add	r3, r7
 8008f5e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f60:	e76a      	b.n	8008e38 <_vfiprintf_r+0x78>
 8008f62:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f66:	460c      	mov	r4, r1
 8008f68:	2001      	movs	r0, #1
 8008f6a:	e7a8      	b.n	8008ebe <_vfiprintf_r+0xfe>
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	3401      	adds	r4, #1
 8008f70:	9305      	str	r3, [sp, #20]
 8008f72:	4619      	mov	r1, r3
 8008f74:	f04f 0c0a 	mov.w	ip, #10
 8008f78:	4620      	mov	r0, r4
 8008f7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f7e:	3a30      	subs	r2, #48	@ 0x30
 8008f80:	2a09      	cmp	r2, #9
 8008f82:	d903      	bls.n	8008f8c <_vfiprintf_r+0x1cc>
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d0c6      	beq.n	8008f16 <_vfiprintf_r+0x156>
 8008f88:	9105      	str	r1, [sp, #20]
 8008f8a:	e7c4      	b.n	8008f16 <_vfiprintf_r+0x156>
 8008f8c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f90:	4604      	mov	r4, r0
 8008f92:	2301      	movs	r3, #1
 8008f94:	e7f0      	b.n	8008f78 <_vfiprintf_r+0x1b8>
 8008f96:	ab03      	add	r3, sp, #12
 8008f98:	9300      	str	r3, [sp, #0]
 8008f9a:	462a      	mov	r2, r5
 8008f9c:	4b12      	ldr	r3, [pc, #72]	@ (8008fe8 <_vfiprintf_r+0x228>)
 8008f9e:	a904      	add	r1, sp, #16
 8008fa0:	4630      	mov	r0, r6
 8008fa2:	f3af 8000 	nop.w
 8008fa6:	4607      	mov	r7, r0
 8008fa8:	1c78      	adds	r0, r7, #1
 8008faa:	d1d6      	bne.n	8008f5a <_vfiprintf_r+0x19a>
 8008fac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008fae:	07d9      	lsls	r1, r3, #31
 8008fb0:	d405      	bmi.n	8008fbe <_vfiprintf_r+0x1fe>
 8008fb2:	89ab      	ldrh	r3, [r5, #12]
 8008fb4:	059a      	lsls	r2, r3, #22
 8008fb6:	d402      	bmi.n	8008fbe <_vfiprintf_r+0x1fe>
 8008fb8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008fba:	f7ff fdcf 	bl	8008b5c <__retarget_lock_release_recursive>
 8008fbe:	89ab      	ldrh	r3, [r5, #12]
 8008fc0:	065b      	lsls	r3, r3, #25
 8008fc2:	f53f af1f 	bmi.w	8008e04 <_vfiprintf_r+0x44>
 8008fc6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008fc8:	e71e      	b.n	8008e08 <_vfiprintf_r+0x48>
 8008fca:	ab03      	add	r3, sp, #12
 8008fcc:	9300      	str	r3, [sp, #0]
 8008fce:	462a      	mov	r2, r5
 8008fd0:	4b05      	ldr	r3, [pc, #20]	@ (8008fe8 <_vfiprintf_r+0x228>)
 8008fd2:	a904      	add	r1, sp, #16
 8008fd4:	4630      	mov	r0, r6
 8008fd6:	f000 f879 	bl	80090cc <_printf_i>
 8008fda:	e7e4      	b.n	8008fa6 <_vfiprintf_r+0x1e6>
 8008fdc:	08009738 	.word	0x08009738
 8008fe0:	08009742 	.word	0x08009742
 8008fe4:	00000000 	.word	0x00000000
 8008fe8:	08008d9b 	.word	0x08008d9b
 8008fec:	0800973e 	.word	0x0800973e

08008ff0 <_printf_common>:
 8008ff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ff4:	4616      	mov	r6, r2
 8008ff6:	4698      	mov	r8, r3
 8008ff8:	688a      	ldr	r2, [r1, #8]
 8008ffa:	690b      	ldr	r3, [r1, #16]
 8008ffc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009000:	4293      	cmp	r3, r2
 8009002:	bfb8      	it	lt
 8009004:	4613      	movlt	r3, r2
 8009006:	6033      	str	r3, [r6, #0]
 8009008:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800900c:	4607      	mov	r7, r0
 800900e:	460c      	mov	r4, r1
 8009010:	b10a      	cbz	r2, 8009016 <_printf_common+0x26>
 8009012:	3301      	adds	r3, #1
 8009014:	6033      	str	r3, [r6, #0]
 8009016:	6823      	ldr	r3, [r4, #0]
 8009018:	0699      	lsls	r1, r3, #26
 800901a:	bf42      	ittt	mi
 800901c:	6833      	ldrmi	r3, [r6, #0]
 800901e:	3302      	addmi	r3, #2
 8009020:	6033      	strmi	r3, [r6, #0]
 8009022:	6825      	ldr	r5, [r4, #0]
 8009024:	f015 0506 	ands.w	r5, r5, #6
 8009028:	d106      	bne.n	8009038 <_printf_common+0x48>
 800902a:	f104 0a19 	add.w	sl, r4, #25
 800902e:	68e3      	ldr	r3, [r4, #12]
 8009030:	6832      	ldr	r2, [r6, #0]
 8009032:	1a9b      	subs	r3, r3, r2
 8009034:	42ab      	cmp	r3, r5
 8009036:	dc26      	bgt.n	8009086 <_printf_common+0x96>
 8009038:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800903c:	6822      	ldr	r2, [r4, #0]
 800903e:	3b00      	subs	r3, #0
 8009040:	bf18      	it	ne
 8009042:	2301      	movne	r3, #1
 8009044:	0692      	lsls	r2, r2, #26
 8009046:	d42b      	bmi.n	80090a0 <_printf_common+0xb0>
 8009048:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800904c:	4641      	mov	r1, r8
 800904e:	4638      	mov	r0, r7
 8009050:	47c8      	blx	r9
 8009052:	3001      	adds	r0, #1
 8009054:	d01e      	beq.n	8009094 <_printf_common+0xa4>
 8009056:	6823      	ldr	r3, [r4, #0]
 8009058:	6922      	ldr	r2, [r4, #16]
 800905a:	f003 0306 	and.w	r3, r3, #6
 800905e:	2b04      	cmp	r3, #4
 8009060:	bf02      	ittt	eq
 8009062:	68e5      	ldreq	r5, [r4, #12]
 8009064:	6833      	ldreq	r3, [r6, #0]
 8009066:	1aed      	subeq	r5, r5, r3
 8009068:	68a3      	ldr	r3, [r4, #8]
 800906a:	bf0c      	ite	eq
 800906c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009070:	2500      	movne	r5, #0
 8009072:	4293      	cmp	r3, r2
 8009074:	bfc4      	itt	gt
 8009076:	1a9b      	subgt	r3, r3, r2
 8009078:	18ed      	addgt	r5, r5, r3
 800907a:	2600      	movs	r6, #0
 800907c:	341a      	adds	r4, #26
 800907e:	42b5      	cmp	r5, r6
 8009080:	d11a      	bne.n	80090b8 <_printf_common+0xc8>
 8009082:	2000      	movs	r0, #0
 8009084:	e008      	b.n	8009098 <_printf_common+0xa8>
 8009086:	2301      	movs	r3, #1
 8009088:	4652      	mov	r2, sl
 800908a:	4641      	mov	r1, r8
 800908c:	4638      	mov	r0, r7
 800908e:	47c8      	blx	r9
 8009090:	3001      	adds	r0, #1
 8009092:	d103      	bne.n	800909c <_printf_common+0xac>
 8009094:	f04f 30ff 	mov.w	r0, #4294967295
 8009098:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800909c:	3501      	adds	r5, #1
 800909e:	e7c6      	b.n	800902e <_printf_common+0x3e>
 80090a0:	18e1      	adds	r1, r4, r3
 80090a2:	1c5a      	adds	r2, r3, #1
 80090a4:	2030      	movs	r0, #48	@ 0x30
 80090a6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80090aa:	4422      	add	r2, r4
 80090ac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80090b0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80090b4:	3302      	adds	r3, #2
 80090b6:	e7c7      	b.n	8009048 <_printf_common+0x58>
 80090b8:	2301      	movs	r3, #1
 80090ba:	4622      	mov	r2, r4
 80090bc:	4641      	mov	r1, r8
 80090be:	4638      	mov	r0, r7
 80090c0:	47c8      	blx	r9
 80090c2:	3001      	adds	r0, #1
 80090c4:	d0e6      	beq.n	8009094 <_printf_common+0xa4>
 80090c6:	3601      	adds	r6, #1
 80090c8:	e7d9      	b.n	800907e <_printf_common+0x8e>
	...

080090cc <_printf_i>:
 80090cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80090d0:	7e0f      	ldrb	r7, [r1, #24]
 80090d2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80090d4:	2f78      	cmp	r7, #120	@ 0x78
 80090d6:	4691      	mov	r9, r2
 80090d8:	4680      	mov	r8, r0
 80090da:	460c      	mov	r4, r1
 80090dc:	469a      	mov	sl, r3
 80090de:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80090e2:	d807      	bhi.n	80090f4 <_printf_i+0x28>
 80090e4:	2f62      	cmp	r7, #98	@ 0x62
 80090e6:	d80a      	bhi.n	80090fe <_printf_i+0x32>
 80090e8:	2f00      	cmp	r7, #0
 80090ea:	f000 80d1 	beq.w	8009290 <_printf_i+0x1c4>
 80090ee:	2f58      	cmp	r7, #88	@ 0x58
 80090f0:	f000 80b8 	beq.w	8009264 <_printf_i+0x198>
 80090f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80090f8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80090fc:	e03a      	b.n	8009174 <_printf_i+0xa8>
 80090fe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009102:	2b15      	cmp	r3, #21
 8009104:	d8f6      	bhi.n	80090f4 <_printf_i+0x28>
 8009106:	a101      	add	r1, pc, #4	@ (adr r1, 800910c <_printf_i+0x40>)
 8009108:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800910c:	08009165 	.word	0x08009165
 8009110:	08009179 	.word	0x08009179
 8009114:	080090f5 	.word	0x080090f5
 8009118:	080090f5 	.word	0x080090f5
 800911c:	080090f5 	.word	0x080090f5
 8009120:	080090f5 	.word	0x080090f5
 8009124:	08009179 	.word	0x08009179
 8009128:	080090f5 	.word	0x080090f5
 800912c:	080090f5 	.word	0x080090f5
 8009130:	080090f5 	.word	0x080090f5
 8009134:	080090f5 	.word	0x080090f5
 8009138:	08009277 	.word	0x08009277
 800913c:	080091a3 	.word	0x080091a3
 8009140:	08009231 	.word	0x08009231
 8009144:	080090f5 	.word	0x080090f5
 8009148:	080090f5 	.word	0x080090f5
 800914c:	08009299 	.word	0x08009299
 8009150:	080090f5 	.word	0x080090f5
 8009154:	080091a3 	.word	0x080091a3
 8009158:	080090f5 	.word	0x080090f5
 800915c:	080090f5 	.word	0x080090f5
 8009160:	08009239 	.word	0x08009239
 8009164:	6833      	ldr	r3, [r6, #0]
 8009166:	1d1a      	adds	r2, r3, #4
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	6032      	str	r2, [r6, #0]
 800916c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009170:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009174:	2301      	movs	r3, #1
 8009176:	e09c      	b.n	80092b2 <_printf_i+0x1e6>
 8009178:	6833      	ldr	r3, [r6, #0]
 800917a:	6820      	ldr	r0, [r4, #0]
 800917c:	1d19      	adds	r1, r3, #4
 800917e:	6031      	str	r1, [r6, #0]
 8009180:	0606      	lsls	r6, r0, #24
 8009182:	d501      	bpl.n	8009188 <_printf_i+0xbc>
 8009184:	681d      	ldr	r5, [r3, #0]
 8009186:	e003      	b.n	8009190 <_printf_i+0xc4>
 8009188:	0645      	lsls	r5, r0, #25
 800918a:	d5fb      	bpl.n	8009184 <_printf_i+0xb8>
 800918c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009190:	2d00      	cmp	r5, #0
 8009192:	da03      	bge.n	800919c <_printf_i+0xd0>
 8009194:	232d      	movs	r3, #45	@ 0x2d
 8009196:	426d      	negs	r5, r5
 8009198:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800919c:	4858      	ldr	r0, [pc, #352]	@ (8009300 <_printf_i+0x234>)
 800919e:	230a      	movs	r3, #10
 80091a0:	e011      	b.n	80091c6 <_printf_i+0xfa>
 80091a2:	6821      	ldr	r1, [r4, #0]
 80091a4:	6833      	ldr	r3, [r6, #0]
 80091a6:	0608      	lsls	r0, r1, #24
 80091a8:	f853 5b04 	ldr.w	r5, [r3], #4
 80091ac:	d402      	bmi.n	80091b4 <_printf_i+0xe8>
 80091ae:	0649      	lsls	r1, r1, #25
 80091b0:	bf48      	it	mi
 80091b2:	b2ad      	uxthmi	r5, r5
 80091b4:	2f6f      	cmp	r7, #111	@ 0x6f
 80091b6:	4852      	ldr	r0, [pc, #328]	@ (8009300 <_printf_i+0x234>)
 80091b8:	6033      	str	r3, [r6, #0]
 80091ba:	bf14      	ite	ne
 80091bc:	230a      	movne	r3, #10
 80091be:	2308      	moveq	r3, #8
 80091c0:	2100      	movs	r1, #0
 80091c2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80091c6:	6866      	ldr	r6, [r4, #4]
 80091c8:	60a6      	str	r6, [r4, #8]
 80091ca:	2e00      	cmp	r6, #0
 80091cc:	db05      	blt.n	80091da <_printf_i+0x10e>
 80091ce:	6821      	ldr	r1, [r4, #0]
 80091d0:	432e      	orrs	r6, r5
 80091d2:	f021 0104 	bic.w	r1, r1, #4
 80091d6:	6021      	str	r1, [r4, #0]
 80091d8:	d04b      	beq.n	8009272 <_printf_i+0x1a6>
 80091da:	4616      	mov	r6, r2
 80091dc:	fbb5 f1f3 	udiv	r1, r5, r3
 80091e0:	fb03 5711 	mls	r7, r3, r1, r5
 80091e4:	5dc7      	ldrb	r7, [r0, r7]
 80091e6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80091ea:	462f      	mov	r7, r5
 80091ec:	42bb      	cmp	r3, r7
 80091ee:	460d      	mov	r5, r1
 80091f0:	d9f4      	bls.n	80091dc <_printf_i+0x110>
 80091f2:	2b08      	cmp	r3, #8
 80091f4:	d10b      	bne.n	800920e <_printf_i+0x142>
 80091f6:	6823      	ldr	r3, [r4, #0]
 80091f8:	07df      	lsls	r7, r3, #31
 80091fa:	d508      	bpl.n	800920e <_printf_i+0x142>
 80091fc:	6923      	ldr	r3, [r4, #16]
 80091fe:	6861      	ldr	r1, [r4, #4]
 8009200:	4299      	cmp	r1, r3
 8009202:	bfde      	ittt	le
 8009204:	2330      	movle	r3, #48	@ 0x30
 8009206:	f806 3c01 	strble.w	r3, [r6, #-1]
 800920a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800920e:	1b92      	subs	r2, r2, r6
 8009210:	6122      	str	r2, [r4, #16]
 8009212:	f8cd a000 	str.w	sl, [sp]
 8009216:	464b      	mov	r3, r9
 8009218:	aa03      	add	r2, sp, #12
 800921a:	4621      	mov	r1, r4
 800921c:	4640      	mov	r0, r8
 800921e:	f7ff fee7 	bl	8008ff0 <_printf_common>
 8009222:	3001      	adds	r0, #1
 8009224:	d14a      	bne.n	80092bc <_printf_i+0x1f0>
 8009226:	f04f 30ff 	mov.w	r0, #4294967295
 800922a:	b004      	add	sp, #16
 800922c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009230:	6823      	ldr	r3, [r4, #0]
 8009232:	f043 0320 	orr.w	r3, r3, #32
 8009236:	6023      	str	r3, [r4, #0]
 8009238:	4832      	ldr	r0, [pc, #200]	@ (8009304 <_printf_i+0x238>)
 800923a:	2778      	movs	r7, #120	@ 0x78
 800923c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009240:	6823      	ldr	r3, [r4, #0]
 8009242:	6831      	ldr	r1, [r6, #0]
 8009244:	061f      	lsls	r7, r3, #24
 8009246:	f851 5b04 	ldr.w	r5, [r1], #4
 800924a:	d402      	bmi.n	8009252 <_printf_i+0x186>
 800924c:	065f      	lsls	r7, r3, #25
 800924e:	bf48      	it	mi
 8009250:	b2ad      	uxthmi	r5, r5
 8009252:	6031      	str	r1, [r6, #0]
 8009254:	07d9      	lsls	r1, r3, #31
 8009256:	bf44      	itt	mi
 8009258:	f043 0320 	orrmi.w	r3, r3, #32
 800925c:	6023      	strmi	r3, [r4, #0]
 800925e:	b11d      	cbz	r5, 8009268 <_printf_i+0x19c>
 8009260:	2310      	movs	r3, #16
 8009262:	e7ad      	b.n	80091c0 <_printf_i+0xf4>
 8009264:	4826      	ldr	r0, [pc, #152]	@ (8009300 <_printf_i+0x234>)
 8009266:	e7e9      	b.n	800923c <_printf_i+0x170>
 8009268:	6823      	ldr	r3, [r4, #0]
 800926a:	f023 0320 	bic.w	r3, r3, #32
 800926e:	6023      	str	r3, [r4, #0]
 8009270:	e7f6      	b.n	8009260 <_printf_i+0x194>
 8009272:	4616      	mov	r6, r2
 8009274:	e7bd      	b.n	80091f2 <_printf_i+0x126>
 8009276:	6833      	ldr	r3, [r6, #0]
 8009278:	6825      	ldr	r5, [r4, #0]
 800927a:	6961      	ldr	r1, [r4, #20]
 800927c:	1d18      	adds	r0, r3, #4
 800927e:	6030      	str	r0, [r6, #0]
 8009280:	062e      	lsls	r6, r5, #24
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	d501      	bpl.n	800928a <_printf_i+0x1be>
 8009286:	6019      	str	r1, [r3, #0]
 8009288:	e002      	b.n	8009290 <_printf_i+0x1c4>
 800928a:	0668      	lsls	r0, r5, #25
 800928c:	d5fb      	bpl.n	8009286 <_printf_i+0x1ba>
 800928e:	8019      	strh	r1, [r3, #0]
 8009290:	2300      	movs	r3, #0
 8009292:	6123      	str	r3, [r4, #16]
 8009294:	4616      	mov	r6, r2
 8009296:	e7bc      	b.n	8009212 <_printf_i+0x146>
 8009298:	6833      	ldr	r3, [r6, #0]
 800929a:	1d1a      	adds	r2, r3, #4
 800929c:	6032      	str	r2, [r6, #0]
 800929e:	681e      	ldr	r6, [r3, #0]
 80092a0:	6862      	ldr	r2, [r4, #4]
 80092a2:	2100      	movs	r1, #0
 80092a4:	4630      	mov	r0, r6
 80092a6:	f7f6 ffcb 	bl	8000240 <memchr>
 80092aa:	b108      	cbz	r0, 80092b0 <_printf_i+0x1e4>
 80092ac:	1b80      	subs	r0, r0, r6
 80092ae:	6060      	str	r0, [r4, #4]
 80092b0:	6863      	ldr	r3, [r4, #4]
 80092b2:	6123      	str	r3, [r4, #16]
 80092b4:	2300      	movs	r3, #0
 80092b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80092ba:	e7aa      	b.n	8009212 <_printf_i+0x146>
 80092bc:	6923      	ldr	r3, [r4, #16]
 80092be:	4632      	mov	r2, r6
 80092c0:	4649      	mov	r1, r9
 80092c2:	4640      	mov	r0, r8
 80092c4:	47d0      	blx	sl
 80092c6:	3001      	adds	r0, #1
 80092c8:	d0ad      	beq.n	8009226 <_printf_i+0x15a>
 80092ca:	6823      	ldr	r3, [r4, #0]
 80092cc:	079b      	lsls	r3, r3, #30
 80092ce:	d413      	bmi.n	80092f8 <_printf_i+0x22c>
 80092d0:	68e0      	ldr	r0, [r4, #12]
 80092d2:	9b03      	ldr	r3, [sp, #12]
 80092d4:	4298      	cmp	r0, r3
 80092d6:	bfb8      	it	lt
 80092d8:	4618      	movlt	r0, r3
 80092da:	e7a6      	b.n	800922a <_printf_i+0x15e>
 80092dc:	2301      	movs	r3, #1
 80092de:	4632      	mov	r2, r6
 80092e0:	4649      	mov	r1, r9
 80092e2:	4640      	mov	r0, r8
 80092e4:	47d0      	blx	sl
 80092e6:	3001      	adds	r0, #1
 80092e8:	d09d      	beq.n	8009226 <_printf_i+0x15a>
 80092ea:	3501      	adds	r5, #1
 80092ec:	68e3      	ldr	r3, [r4, #12]
 80092ee:	9903      	ldr	r1, [sp, #12]
 80092f0:	1a5b      	subs	r3, r3, r1
 80092f2:	42ab      	cmp	r3, r5
 80092f4:	dcf2      	bgt.n	80092dc <_printf_i+0x210>
 80092f6:	e7eb      	b.n	80092d0 <_printf_i+0x204>
 80092f8:	2500      	movs	r5, #0
 80092fa:	f104 0619 	add.w	r6, r4, #25
 80092fe:	e7f5      	b.n	80092ec <_printf_i+0x220>
 8009300:	08009749 	.word	0x08009749
 8009304:	0800975a 	.word	0x0800975a

08009308 <__sflush_r>:
 8009308:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800930c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009310:	0716      	lsls	r6, r2, #28
 8009312:	4605      	mov	r5, r0
 8009314:	460c      	mov	r4, r1
 8009316:	d454      	bmi.n	80093c2 <__sflush_r+0xba>
 8009318:	684b      	ldr	r3, [r1, #4]
 800931a:	2b00      	cmp	r3, #0
 800931c:	dc02      	bgt.n	8009324 <__sflush_r+0x1c>
 800931e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009320:	2b00      	cmp	r3, #0
 8009322:	dd48      	ble.n	80093b6 <__sflush_r+0xae>
 8009324:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009326:	2e00      	cmp	r6, #0
 8009328:	d045      	beq.n	80093b6 <__sflush_r+0xae>
 800932a:	2300      	movs	r3, #0
 800932c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009330:	682f      	ldr	r7, [r5, #0]
 8009332:	6a21      	ldr	r1, [r4, #32]
 8009334:	602b      	str	r3, [r5, #0]
 8009336:	d030      	beq.n	800939a <__sflush_r+0x92>
 8009338:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800933a:	89a3      	ldrh	r3, [r4, #12]
 800933c:	0759      	lsls	r1, r3, #29
 800933e:	d505      	bpl.n	800934c <__sflush_r+0x44>
 8009340:	6863      	ldr	r3, [r4, #4]
 8009342:	1ad2      	subs	r2, r2, r3
 8009344:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009346:	b10b      	cbz	r3, 800934c <__sflush_r+0x44>
 8009348:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800934a:	1ad2      	subs	r2, r2, r3
 800934c:	2300      	movs	r3, #0
 800934e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009350:	6a21      	ldr	r1, [r4, #32]
 8009352:	4628      	mov	r0, r5
 8009354:	47b0      	blx	r6
 8009356:	1c43      	adds	r3, r0, #1
 8009358:	89a3      	ldrh	r3, [r4, #12]
 800935a:	d106      	bne.n	800936a <__sflush_r+0x62>
 800935c:	6829      	ldr	r1, [r5, #0]
 800935e:	291d      	cmp	r1, #29
 8009360:	d82b      	bhi.n	80093ba <__sflush_r+0xb2>
 8009362:	4a2a      	ldr	r2, [pc, #168]	@ (800940c <__sflush_r+0x104>)
 8009364:	40ca      	lsrs	r2, r1
 8009366:	07d6      	lsls	r6, r2, #31
 8009368:	d527      	bpl.n	80093ba <__sflush_r+0xb2>
 800936a:	2200      	movs	r2, #0
 800936c:	6062      	str	r2, [r4, #4]
 800936e:	04d9      	lsls	r1, r3, #19
 8009370:	6922      	ldr	r2, [r4, #16]
 8009372:	6022      	str	r2, [r4, #0]
 8009374:	d504      	bpl.n	8009380 <__sflush_r+0x78>
 8009376:	1c42      	adds	r2, r0, #1
 8009378:	d101      	bne.n	800937e <__sflush_r+0x76>
 800937a:	682b      	ldr	r3, [r5, #0]
 800937c:	b903      	cbnz	r3, 8009380 <__sflush_r+0x78>
 800937e:	6560      	str	r0, [r4, #84]	@ 0x54
 8009380:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009382:	602f      	str	r7, [r5, #0]
 8009384:	b1b9      	cbz	r1, 80093b6 <__sflush_r+0xae>
 8009386:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800938a:	4299      	cmp	r1, r3
 800938c:	d002      	beq.n	8009394 <__sflush_r+0x8c>
 800938e:	4628      	mov	r0, r5
 8009390:	f7ff fbf4 	bl	8008b7c <_free_r>
 8009394:	2300      	movs	r3, #0
 8009396:	6363      	str	r3, [r4, #52]	@ 0x34
 8009398:	e00d      	b.n	80093b6 <__sflush_r+0xae>
 800939a:	2301      	movs	r3, #1
 800939c:	4628      	mov	r0, r5
 800939e:	47b0      	blx	r6
 80093a0:	4602      	mov	r2, r0
 80093a2:	1c50      	adds	r0, r2, #1
 80093a4:	d1c9      	bne.n	800933a <__sflush_r+0x32>
 80093a6:	682b      	ldr	r3, [r5, #0]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d0c6      	beq.n	800933a <__sflush_r+0x32>
 80093ac:	2b1d      	cmp	r3, #29
 80093ae:	d001      	beq.n	80093b4 <__sflush_r+0xac>
 80093b0:	2b16      	cmp	r3, #22
 80093b2:	d11e      	bne.n	80093f2 <__sflush_r+0xea>
 80093b4:	602f      	str	r7, [r5, #0]
 80093b6:	2000      	movs	r0, #0
 80093b8:	e022      	b.n	8009400 <__sflush_r+0xf8>
 80093ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80093be:	b21b      	sxth	r3, r3
 80093c0:	e01b      	b.n	80093fa <__sflush_r+0xf2>
 80093c2:	690f      	ldr	r7, [r1, #16]
 80093c4:	2f00      	cmp	r7, #0
 80093c6:	d0f6      	beq.n	80093b6 <__sflush_r+0xae>
 80093c8:	0793      	lsls	r3, r2, #30
 80093ca:	680e      	ldr	r6, [r1, #0]
 80093cc:	bf08      	it	eq
 80093ce:	694b      	ldreq	r3, [r1, #20]
 80093d0:	600f      	str	r7, [r1, #0]
 80093d2:	bf18      	it	ne
 80093d4:	2300      	movne	r3, #0
 80093d6:	eba6 0807 	sub.w	r8, r6, r7
 80093da:	608b      	str	r3, [r1, #8]
 80093dc:	f1b8 0f00 	cmp.w	r8, #0
 80093e0:	dde9      	ble.n	80093b6 <__sflush_r+0xae>
 80093e2:	6a21      	ldr	r1, [r4, #32]
 80093e4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80093e6:	4643      	mov	r3, r8
 80093e8:	463a      	mov	r2, r7
 80093ea:	4628      	mov	r0, r5
 80093ec:	47b0      	blx	r6
 80093ee:	2800      	cmp	r0, #0
 80093f0:	dc08      	bgt.n	8009404 <__sflush_r+0xfc>
 80093f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80093fa:	81a3      	strh	r3, [r4, #12]
 80093fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009404:	4407      	add	r7, r0
 8009406:	eba8 0800 	sub.w	r8, r8, r0
 800940a:	e7e7      	b.n	80093dc <__sflush_r+0xd4>
 800940c:	20400001 	.word	0x20400001

08009410 <_fflush_r>:
 8009410:	b538      	push	{r3, r4, r5, lr}
 8009412:	690b      	ldr	r3, [r1, #16]
 8009414:	4605      	mov	r5, r0
 8009416:	460c      	mov	r4, r1
 8009418:	b913      	cbnz	r3, 8009420 <_fflush_r+0x10>
 800941a:	2500      	movs	r5, #0
 800941c:	4628      	mov	r0, r5
 800941e:	bd38      	pop	{r3, r4, r5, pc}
 8009420:	b118      	cbz	r0, 800942a <_fflush_r+0x1a>
 8009422:	6a03      	ldr	r3, [r0, #32]
 8009424:	b90b      	cbnz	r3, 800942a <_fflush_r+0x1a>
 8009426:	f7ff fa35 	bl	8008894 <__sinit>
 800942a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d0f3      	beq.n	800941a <_fflush_r+0xa>
 8009432:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009434:	07d0      	lsls	r0, r2, #31
 8009436:	d404      	bmi.n	8009442 <_fflush_r+0x32>
 8009438:	0599      	lsls	r1, r3, #22
 800943a:	d402      	bmi.n	8009442 <_fflush_r+0x32>
 800943c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800943e:	f7ff fb8c 	bl	8008b5a <__retarget_lock_acquire_recursive>
 8009442:	4628      	mov	r0, r5
 8009444:	4621      	mov	r1, r4
 8009446:	f7ff ff5f 	bl	8009308 <__sflush_r>
 800944a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800944c:	07da      	lsls	r2, r3, #31
 800944e:	4605      	mov	r5, r0
 8009450:	d4e4      	bmi.n	800941c <_fflush_r+0xc>
 8009452:	89a3      	ldrh	r3, [r4, #12]
 8009454:	059b      	lsls	r3, r3, #22
 8009456:	d4e1      	bmi.n	800941c <_fflush_r+0xc>
 8009458:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800945a:	f7ff fb7f 	bl	8008b5c <__retarget_lock_release_recursive>
 800945e:	e7dd      	b.n	800941c <_fflush_r+0xc>

08009460 <__swbuf_r>:
 8009460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009462:	460e      	mov	r6, r1
 8009464:	4614      	mov	r4, r2
 8009466:	4605      	mov	r5, r0
 8009468:	b118      	cbz	r0, 8009472 <__swbuf_r+0x12>
 800946a:	6a03      	ldr	r3, [r0, #32]
 800946c:	b90b      	cbnz	r3, 8009472 <__swbuf_r+0x12>
 800946e:	f7ff fa11 	bl	8008894 <__sinit>
 8009472:	69a3      	ldr	r3, [r4, #24]
 8009474:	60a3      	str	r3, [r4, #8]
 8009476:	89a3      	ldrh	r3, [r4, #12]
 8009478:	071a      	lsls	r2, r3, #28
 800947a:	d501      	bpl.n	8009480 <__swbuf_r+0x20>
 800947c:	6923      	ldr	r3, [r4, #16]
 800947e:	b943      	cbnz	r3, 8009492 <__swbuf_r+0x32>
 8009480:	4621      	mov	r1, r4
 8009482:	4628      	mov	r0, r5
 8009484:	f000 f82a 	bl	80094dc <__swsetup_r>
 8009488:	b118      	cbz	r0, 8009492 <__swbuf_r+0x32>
 800948a:	f04f 37ff 	mov.w	r7, #4294967295
 800948e:	4638      	mov	r0, r7
 8009490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009492:	6823      	ldr	r3, [r4, #0]
 8009494:	6922      	ldr	r2, [r4, #16]
 8009496:	1a98      	subs	r0, r3, r2
 8009498:	6963      	ldr	r3, [r4, #20]
 800949a:	b2f6      	uxtb	r6, r6
 800949c:	4283      	cmp	r3, r0
 800949e:	4637      	mov	r7, r6
 80094a0:	dc05      	bgt.n	80094ae <__swbuf_r+0x4e>
 80094a2:	4621      	mov	r1, r4
 80094a4:	4628      	mov	r0, r5
 80094a6:	f7ff ffb3 	bl	8009410 <_fflush_r>
 80094aa:	2800      	cmp	r0, #0
 80094ac:	d1ed      	bne.n	800948a <__swbuf_r+0x2a>
 80094ae:	68a3      	ldr	r3, [r4, #8]
 80094b0:	3b01      	subs	r3, #1
 80094b2:	60a3      	str	r3, [r4, #8]
 80094b4:	6823      	ldr	r3, [r4, #0]
 80094b6:	1c5a      	adds	r2, r3, #1
 80094b8:	6022      	str	r2, [r4, #0]
 80094ba:	701e      	strb	r6, [r3, #0]
 80094bc:	6962      	ldr	r2, [r4, #20]
 80094be:	1c43      	adds	r3, r0, #1
 80094c0:	429a      	cmp	r2, r3
 80094c2:	d004      	beq.n	80094ce <__swbuf_r+0x6e>
 80094c4:	89a3      	ldrh	r3, [r4, #12]
 80094c6:	07db      	lsls	r3, r3, #31
 80094c8:	d5e1      	bpl.n	800948e <__swbuf_r+0x2e>
 80094ca:	2e0a      	cmp	r6, #10
 80094cc:	d1df      	bne.n	800948e <__swbuf_r+0x2e>
 80094ce:	4621      	mov	r1, r4
 80094d0:	4628      	mov	r0, r5
 80094d2:	f7ff ff9d 	bl	8009410 <_fflush_r>
 80094d6:	2800      	cmp	r0, #0
 80094d8:	d0d9      	beq.n	800948e <__swbuf_r+0x2e>
 80094da:	e7d6      	b.n	800948a <__swbuf_r+0x2a>

080094dc <__swsetup_r>:
 80094dc:	b538      	push	{r3, r4, r5, lr}
 80094de:	4b29      	ldr	r3, [pc, #164]	@ (8009584 <__swsetup_r+0xa8>)
 80094e0:	4605      	mov	r5, r0
 80094e2:	6818      	ldr	r0, [r3, #0]
 80094e4:	460c      	mov	r4, r1
 80094e6:	b118      	cbz	r0, 80094f0 <__swsetup_r+0x14>
 80094e8:	6a03      	ldr	r3, [r0, #32]
 80094ea:	b90b      	cbnz	r3, 80094f0 <__swsetup_r+0x14>
 80094ec:	f7ff f9d2 	bl	8008894 <__sinit>
 80094f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094f4:	0719      	lsls	r1, r3, #28
 80094f6:	d422      	bmi.n	800953e <__swsetup_r+0x62>
 80094f8:	06da      	lsls	r2, r3, #27
 80094fa:	d407      	bmi.n	800950c <__swsetup_r+0x30>
 80094fc:	2209      	movs	r2, #9
 80094fe:	602a      	str	r2, [r5, #0]
 8009500:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009504:	81a3      	strh	r3, [r4, #12]
 8009506:	f04f 30ff 	mov.w	r0, #4294967295
 800950a:	e033      	b.n	8009574 <__swsetup_r+0x98>
 800950c:	0758      	lsls	r0, r3, #29
 800950e:	d512      	bpl.n	8009536 <__swsetup_r+0x5a>
 8009510:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009512:	b141      	cbz	r1, 8009526 <__swsetup_r+0x4a>
 8009514:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009518:	4299      	cmp	r1, r3
 800951a:	d002      	beq.n	8009522 <__swsetup_r+0x46>
 800951c:	4628      	mov	r0, r5
 800951e:	f7ff fb2d 	bl	8008b7c <_free_r>
 8009522:	2300      	movs	r3, #0
 8009524:	6363      	str	r3, [r4, #52]	@ 0x34
 8009526:	89a3      	ldrh	r3, [r4, #12]
 8009528:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800952c:	81a3      	strh	r3, [r4, #12]
 800952e:	2300      	movs	r3, #0
 8009530:	6063      	str	r3, [r4, #4]
 8009532:	6923      	ldr	r3, [r4, #16]
 8009534:	6023      	str	r3, [r4, #0]
 8009536:	89a3      	ldrh	r3, [r4, #12]
 8009538:	f043 0308 	orr.w	r3, r3, #8
 800953c:	81a3      	strh	r3, [r4, #12]
 800953e:	6923      	ldr	r3, [r4, #16]
 8009540:	b94b      	cbnz	r3, 8009556 <__swsetup_r+0x7a>
 8009542:	89a3      	ldrh	r3, [r4, #12]
 8009544:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009548:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800954c:	d003      	beq.n	8009556 <__swsetup_r+0x7a>
 800954e:	4621      	mov	r1, r4
 8009550:	4628      	mov	r0, r5
 8009552:	f000 f84f 	bl	80095f4 <__smakebuf_r>
 8009556:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800955a:	f013 0201 	ands.w	r2, r3, #1
 800955e:	d00a      	beq.n	8009576 <__swsetup_r+0x9a>
 8009560:	2200      	movs	r2, #0
 8009562:	60a2      	str	r2, [r4, #8]
 8009564:	6962      	ldr	r2, [r4, #20]
 8009566:	4252      	negs	r2, r2
 8009568:	61a2      	str	r2, [r4, #24]
 800956a:	6922      	ldr	r2, [r4, #16]
 800956c:	b942      	cbnz	r2, 8009580 <__swsetup_r+0xa4>
 800956e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009572:	d1c5      	bne.n	8009500 <__swsetup_r+0x24>
 8009574:	bd38      	pop	{r3, r4, r5, pc}
 8009576:	0799      	lsls	r1, r3, #30
 8009578:	bf58      	it	pl
 800957a:	6962      	ldrpl	r2, [r4, #20]
 800957c:	60a2      	str	r2, [r4, #8]
 800957e:	e7f4      	b.n	800956a <__swsetup_r+0x8e>
 8009580:	2000      	movs	r0, #0
 8009582:	e7f7      	b.n	8009574 <__swsetup_r+0x98>
 8009584:	2000001c 	.word	0x2000001c

08009588 <_sbrk_r>:
 8009588:	b538      	push	{r3, r4, r5, lr}
 800958a:	4d06      	ldr	r5, [pc, #24]	@ (80095a4 <_sbrk_r+0x1c>)
 800958c:	2300      	movs	r3, #0
 800958e:	4604      	mov	r4, r0
 8009590:	4608      	mov	r0, r1
 8009592:	602b      	str	r3, [r5, #0]
 8009594:	f7f7 ff36 	bl	8001404 <_sbrk>
 8009598:	1c43      	adds	r3, r0, #1
 800959a:	d102      	bne.n	80095a2 <_sbrk_r+0x1a>
 800959c:	682b      	ldr	r3, [r5, #0]
 800959e:	b103      	cbz	r3, 80095a2 <_sbrk_r+0x1a>
 80095a0:	6023      	str	r3, [r4, #0]
 80095a2:	bd38      	pop	{r3, r4, r5, pc}
 80095a4:	20005988 	.word	0x20005988

080095a8 <__swhatbuf_r>:
 80095a8:	b570      	push	{r4, r5, r6, lr}
 80095aa:	460c      	mov	r4, r1
 80095ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095b0:	2900      	cmp	r1, #0
 80095b2:	b096      	sub	sp, #88	@ 0x58
 80095b4:	4615      	mov	r5, r2
 80095b6:	461e      	mov	r6, r3
 80095b8:	da0d      	bge.n	80095d6 <__swhatbuf_r+0x2e>
 80095ba:	89a3      	ldrh	r3, [r4, #12]
 80095bc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80095c0:	f04f 0100 	mov.w	r1, #0
 80095c4:	bf14      	ite	ne
 80095c6:	2340      	movne	r3, #64	@ 0x40
 80095c8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80095cc:	2000      	movs	r0, #0
 80095ce:	6031      	str	r1, [r6, #0]
 80095d0:	602b      	str	r3, [r5, #0]
 80095d2:	b016      	add	sp, #88	@ 0x58
 80095d4:	bd70      	pop	{r4, r5, r6, pc}
 80095d6:	466a      	mov	r2, sp
 80095d8:	f000 f848 	bl	800966c <_fstat_r>
 80095dc:	2800      	cmp	r0, #0
 80095de:	dbec      	blt.n	80095ba <__swhatbuf_r+0x12>
 80095e0:	9901      	ldr	r1, [sp, #4]
 80095e2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80095e6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80095ea:	4259      	negs	r1, r3
 80095ec:	4159      	adcs	r1, r3
 80095ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80095f2:	e7eb      	b.n	80095cc <__swhatbuf_r+0x24>

080095f4 <__smakebuf_r>:
 80095f4:	898b      	ldrh	r3, [r1, #12]
 80095f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80095f8:	079d      	lsls	r5, r3, #30
 80095fa:	4606      	mov	r6, r0
 80095fc:	460c      	mov	r4, r1
 80095fe:	d507      	bpl.n	8009610 <__smakebuf_r+0x1c>
 8009600:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009604:	6023      	str	r3, [r4, #0]
 8009606:	6123      	str	r3, [r4, #16]
 8009608:	2301      	movs	r3, #1
 800960a:	6163      	str	r3, [r4, #20]
 800960c:	b003      	add	sp, #12
 800960e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009610:	ab01      	add	r3, sp, #4
 8009612:	466a      	mov	r2, sp
 8009614:	f7ff ffc8 	bl	80095a8 <__swhatbuf_r>
 8009618:	9f00      	ldr	r7, [sp, #0]
 800961a:	4605      	mov	r5, r0
 800961c:	4639      	mov	r1, r7
 800961e:	4630      	mov	r0, r6
 8009620:	f7ff fb18 	bl	8008c54 <_malloc_r>
 8009624:	b948      	cbnz	r0, 800963a <__smakebuf_r+0x46>
 8009626:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800962a:	059a      	lsls	r2, r3, #22
 800962c:	d4ee      	bmi.n	800960c <__smakebuf_r+0x18>
 800962e:	f023 0303 	bic.w	r3, r3, #3
 8009632:	f043 0302 	orr.w	r3, r3, #2
 8009636:	81a3      	strh	r3, [r4, #12]
 8009638:	e7e2      	b.n	8009600 <__smakebuf_r+0xc>
 800963a:	89a3      	ldrh	r3, [r4, #12]
 800963c:	6020      	str	r0, [r4, #0]
 800963e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009642:	81a3      	strh	r3, [r4, #12]
 8009644:	9b01      	ldr	r3, [sp, #4]
 8009646:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800964a:	b15b      	cbz	r3, 8009664 <__smakebuf_r+0x70>
 800964c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009650:	4630      	mov	r0, r6
 8009652:	f000 f81d 	bl	8009690 <_isatty_r>
 8009656:	b128      	cbz	r0, 8009664 <__smakebuf_r+0x70>
 8009658:	89a3      	ldrh	r3, [r4, #12]
 800965a:	f023 0303 	bic.w	r3, r3, #3
 800965e:	f043 0301 	orr.w	r3, r3, #1
 8009662:	81a3      	strh	r3, [r4, #12]
 8009664:	89a3      	ldrh	r3, [r4, #12]
 8009666:	431d      	orrs	r5, r3
 8009668:	81a5      	strh	r5, [r4, #12]
 800966a:	e7cf      	b.n	800960c <__smakebuf_r+0x18>

0800966c <_fstat_r>:
 800966c:	b538      	push	{r3, r4, r5, lr}
 800966e:	4d07      	ldr	r5, [pc, #28]	@ (800968c <_fstat_r+0x20>)
 8009670:	2300      	movs	r3, #0
 8009672:	4604      	mov	r4, r0
 8009674:	4608      	mov	r0, r1
 8009676:	4611      	mov	r1, r2
 8009678:	602b      	str	r3, [r5, #0]
 800967a:	f7f7 fe9a 	bl	80013b2 <_fstat>
 800967e:	1c43      	adds	r3, r0, #1
 8009680:	d102      	bne.n	8009688 <_fstat_r+0x1c>
 8009682:	682b      	ldr	r3, [r5, #0]
 8009684:	b103      	cbz	r3, 8009688 <_fstat_r+0x1c>
 8009686:	6023      	str	r3, [r4, #0]
 8009688:	bd38      	pop	{r3, r4, r5, pc}
 800968a:	bf00      	nop
 800968c:	20005988 	.word	0x20005988

08009690 <_isatty_r>:
 8009690:	b538      	push	{r3, r4, r5, lr}
 8009692:	4d06      	ldr	r5, [pc, #24]	@ (80096ac <_isatty_r+0x1c>)
 8009694:	2300      	movs	r3, #0
 8009696:	4604      	mov	r4, r0
 8009698:	4608      	mov	r0, r1
 800969a:	602b      	str	r3, [r5, #0]
 800969c:	f7f7 fe99 	bl	80013d2 <_isatty>
 80096a0:	1c43      	adds	r3, r0, #1
 80096a2:	d102      	bne.n	80096aa <_isatty_r+0x1a>
 80096a4:	682b      	ldr	r3, [r5, #0]
 80096a6:	b103      	cbz	r3, 80096aa <_isatty_r+0x1a>
 80096a8:	6023      	str	r3, [r4, #0]
 80096aa:	bd38      	pop	{r3, r4, r5, pc}
 80096ac:	20005988 	.word	0x20005988

080096b0 <_init>:
 80096b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096b2:	bf00      	nop
 80096b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096b6:	bc08      	pop	{r3}
 80096b8:	469e      	mov	lr, r3
 80096ba:	4770      	bx	lr

080096bc <_fini>:
 80096bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096be:	bf00      	nop
 80096c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096c2:	bc08      	pop	{r3}
 80096c4:	469e      	mov	lr, r3
 80096c6:	4770      	bx	lr
